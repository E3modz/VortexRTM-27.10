using E3_Modz_V5;
using E3Modz.Black_Ops_3;
using E3Modz.Login___Home;
using PS3Lib;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace E3Modz.Black_Ops_2
{
    public partial class BO2 : Form
    {
        public static System.Drawing.Point newpoint = new System.Drawing.Point();
        public static string Username;
        public static string Password;
        public static int x;
        public static int y;
        private int ctype;
        private static uint ClanOff = 0u;
        private static uint NameOff = 0u;
        WebClient wb = new WebClient();
        public static PS3API PS3 = new PS3API(SelectAPI.ControlConsole);
        public static PS3ManagerAPI.PS3MAPI PS3M_API = new PS3ManagerAPI.PS3MAPI();
        private static uint PIDOff = 0u;
        private static uint NatOff = 0u;
        private static uint RankOff = 0u;
        private static uint PresOff = 0u;
        private static uint IPOff = 0u;
        private static uint NpidOff = 0u;
        private static uint IIPOff = 0u;
        private static uint PortOff = 0u;
        private static uint XUIDOff = 0u;
        private uint nameOff = 0x26C0658;
        private int colour;
        private Stopwatch stopWatch = new Stopwatch();
        private Stopwatch stopWatch1 = new Stopwatch();
        private Stopwatch stopWatch2 = new Stopwatch();
        private Stopwatch stopWatch3 = new Stopwatch();
        public int Setter { get; private set; }
        internal uint a;
        private byte[] CombSetClan;
        private PS3API PS32 = new PS3API(SelectAPI.TargetManager);
        private CCAPI PS31 = new CCAPI();
        private Thread TargetInfo;
        private bool threadIsRunning = false;
        private uint[] procs;
        private Random Rand;
        private uint ClanOffset = 40927800u;
        private List<string> colorList = new List<string>();
        private Dictionary<string, Color> lblColors = new Dictionary<string, Color>();
        private List<Label> Labels = new List<Label>();
        private int charcount;
        public static string Status;
        public static string MemStatus;
        public TimeSpan Elapsed;
        public static uint LocalPlayerName = 40633983u;
        public static uint Prestige = 40882196u;

        public BO2()
        {
            InitializeComponent();
            this.a = 40633944u;
        }

        private void Button14_Click(object sender, EventArgs e)
        {
            BO2 bu = new BO2();
            bu.Show();
            this.Hide();
        }

        private void Button36_Click(object sender, EventArgs e)
        {
            base.WindowState = FormWindowState.Minimized;
        }

        private void RadioButton1_CheckedChanged(object sender, EventArgs e)
        {
            if (radioButton1.Checked == true)
            {
                PS3.ChangeAPI(SelectAPI.ControlConsole);
                label28.Text = "CCAPI";
                label28.ForeColor = Color.Green;
            }
            else
            {
                PS3.ChangeAPI(SelectAPI.TargetManager);
                label28.Text = "TMAPI";
                label28.ForeColor = Color.Green;
            }
        }

        private void RadioButton2_CheckedChanged(object sender, EventArgs e)
        {
            if (radioButton2.Checked == true)
            {
                PS3.ChangeAPI(SelectAPI.TargetManager);
                label28.Text = "TMAPI";
                label28.ForeColor = Color.Green;
            }
            else
            {
                PS3.ChangeAPI(SelectAPI.ControlConsole);
                label28.Text = "CCAPI";
                label28.ForeColor = Color.Green;
            }
        }
        public void FPS()
        {
            PS3.SetMemory(0x00397788, new byte[] { 0x2C, 0x03, 0x00, 0x01 });
        }

        public void AntiLVL()
        {
            PS3.SetMemory(2948476u, new byte[]
            {
            96
            });
            PS3.SetMemory(9482500u, new byte[]
            {
            96
            });
            PS3.SetMemory(1327440u, new byte[]
            {
            96
            });
            PS3.SetMemory(9347824u, new byte[]
            {
            82
            });
        }

        private void Hear()
        {
            byte[] array = new byte[2];
            array[0] = 96;
            PS3.SetMemory(5638108u, array);
            array = new byte[2];
            array[0] = 96;
            PS3.SetMemory(5638064u, array);
        }

        private void Notify(string textHeader, string text, string Shader)
        {
            PS3.SetMemory(0x1C1FE73, new byte[] { 0x28 });
            Lib.WriteString(0x01C1FC65, textHeader);
            Lib.WriteString(0x01C1FE65, Shader);
            Lib.WriteString(0x1C1FD65, text);
            PS3.SetMemory(0x1C1FF66, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
            PS3.SetMemory(0x0D50025, new byte[] { 0x20 });
            System.Threading.Thread.Sleep(2500);
            PS3.SetMemory(0x1C1FF66, new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 });
            Lib.WriteString(0x1C1FD65, "");
        }
        public void AntiFreeze()
        {
            PS3.SetMemory(0x017865bf, new byte[] { 00, 00, 03, 07, 96, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x178bdc7, new byte[] { 00, 00, 03, 07, 32, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17bd60f, new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17c2e17, new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17c861f, new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17cde27, new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17d362f, new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17d8e37, new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17e3e47, new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17915cf, new byte[] { 00, 00, 03, 07, 96, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x1796dd7, new byte[] { 00, 00, 03, 07, 96, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x179c5df, new byte[] { 00, 00, 03, 07, 96, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17a1de7, new byte[] { 00, 00, 03, 07, 96, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17a75ef, new byte[] { 00, 00, 03, 07, 96, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17acdf7, new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17b25ff, new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
            PS3.SetMemory(0x17b7e07, new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00 });
        }
        private void Button38_Click(object sender, EventArgs e)
        {
            pictureBox1.Visible = true;
            if (HenRadio.Checked == true)
            {
                if (E3Modz.Properties.Settings.Default.bool1 == true)
                {
                    PS3M_API.ConnectTarget(Main.hencon, Convert.ToInt32(7887));
                    try
                    {
                        comboBox8.Items.Clear();
                        foreach (uint num in PS3M_API.Process.GetPidProcesses())
                        {
                            if (num == 0u)
                            {
                                break;

                            }
                            comboBox8.Items.Add(PS3M_API.Process.GetName(num));
                            label27.Text = "Connected! Awaiting Attach Process";
                            label3.Text = "Connection Success!";
                            label3.ForeColor = Color.Green;


                        }
                        MessageBox.Show("Connected", "Succesfully", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        this.comboBox8.SelectedIndex = 0;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message, "Error.", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    }
                }
                else
                {
                    DialogResult dialogResult = MessageBox.Show("No Console found!\nPlease add it on hen console manager!\n If you Click Yes you come to the Console Manager\nEROOR:0x7761A", "Some Title", MessageBoxButtons.YesNo);
                    if (dialogResult == DialogResult.Yes)
                    {
                        HenCidChanger henman = new HenCidChanger();
                        henman.Show();

                    }
                    else if (dialogResult == DialogResult.No)
                    {

                    }
                }
            }
            else
            {
                if (PS3.ConnectTarget(0))
                {

                    label22.Text = PS3.CCAPI.GetTemperatureCELL();
                    label23.Text = PS3.CCAPI.GetTemperatureRSX();
                    label24.Text = PS3.CCAPI.GetFirmwareVersion();
                    label25.Text = PS3.CCAPI.GetFirmwareType();
                    label3.Text = "Connected! Awaiting Attach Process";
                    label27.Text = "Connection Success!";
                    label3.ForeColor = Color.Green;
                }
                else
                {
                    MessageBox.Show("Cant Connect! Restart your PS3! and check your IP!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    label27.Text = "Failed Application Break!";
                }
            }


        }




        private void Button1_Click(object sender, EventArgs e)
        {
            tabControl1.SelectedIndex = 1;
        }

        private void Button35_Click(object sender, EventArgs e)
        {
            Dashboard h = new Dashboard();
            h.Show();
            this.Hide();
        }

        private void Panel7_Paint(object sender, PaintEventArgs e)
        {

        }

        private void Button10_Click(object sender, EventArgs e)
        {

            DialogResult result = MessageBox.Show("Are You Using Paradox.sprx?", "Question", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                MessageBox.Show("Your PS3 Freeze Instant when you turn on the RPC! Please delet Paradox or let RPC Disabled! [Process Canceled]", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            else if (result == DialogResult.No)
            {

                BO2RPC.Init();
                label9.Text = "Enabled";
                label9.ForeColor = Color.Green;
                MessageBox.Show("RPC Enabled!", "RPC", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }


        private void TabPage1_Click(object sender, EventArgs e)
        {

        }

        private void Button11_Click(object sender, EventArgs e)
        {
            byte[] bytes = Encoding.ASCII.GetBytes("Unlimited Name Activated>!>>>byE3MoDZ");
            Array.Resize<byte>(ref bytes, bytes.Length + 1);
            PS3.SetMemory(0x67362, bytes);
            PS3.SetMemory(0x346521A, bytes);
            byte[] array = new byte[4];
            array[0] = 96;
            byte[] buffer = array;
            PS3.SetMemory(0x52A2123, buffer);
        }
        void MessageSpammer()
        {


            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1InfectionLoading...");
        }



        private void Button15_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x26FD011 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0xd000000));
            MessageSpammer();
        }

        private void Button16_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x27078C0 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x50010000));

            var loadoffsetretrv40 = 0x27078CE - 0x3782F21C;
            var loadoffsetretwrite40 = Convert.ToDecimal(loadoffsetretrv40);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite40 / 4 + " " + Convert.ToDecimal(0xA8000000));

            var loadoffsetretrv41 = 0x27078F4 - 0x3782F21C;
            var loadoffsetretwrite41 = Convert.ToDecimal(loadoffsetretrv41);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite41 / 4 + " " + Convert.ToDecimal(0x00150000));

            var loadoffsetretrv42 = 0x2707902 - 0x3782F21C;
            var loadoffsetretwrite42 = Convert.ToDecimal(loadoffsetretrv42);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite42 / 4 + " " + Convert.ToDecimal(0x800A0000));

            var loadoffsetretrv43 = 0x2707929 - 0x3782F21C;
            var loadoffsetretwrite43 = Convert.ToDecimal(loadoffsetretrv43);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite43 / 4 + " " + Convert.ToDecimal(0x50010000));

            var loadoffsetretrv44 = 0x2707937 - 0x3782F21C;
            var loadoffsetretwrite44 = Convert.ToDecimal(loadoffsetretrv44);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite44 / 4 + " " + Convert.ToDecimal(0xA8000000));

            var loadoffsetretrv45 = 0x270795D - 0x3782F21C;
            var loadoffsetretwrite45 = Convert.ToDecimal(loadoffsetretrv45);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite45 / 4 + " " + Convert.ToDecimal(0x00150000));

            var loadoffsetretrv46 = 0x270796B - 0x3782F21C;
            var loadoffsetretwrite46 = Convert.ToDecimal(loadoffsetretrv46);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite46 / 4 + " " + Convert.ToDecimal(0x800A0000));

            var loadoffsetretrv47 = 0x2707992 - 0x3782F21C;
            var loadoffsetretwrite47 = Convert.ToDecimal(loadoffsetretrv47);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite47 / 4 + " " + Convert.ToDecimal(0x50010000));

            var loadoffsetretrv48 = 0x27079A0 - 0x3782F21C;
            var loadoffsetretwrite48 = Convert.ToDecimal(loadoffsetretrv48);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite48 / 4 + " " + Convert.ToDecimal(0xA8000000));

            var loadoffsetretrv49 = 0x27079C6 - 0x3782F21C;
            var loadoffsetretwrite49 = Convert.ToDecimal(loadoffsetretrv49);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite49 / 4 + " " + Convert.ToDecimal(0x50010000));

            var loadoffsetretrv50 = 0x27079D4 - 0x3782F21C;
            var loadoffsetretwrite50 = Convert.ToDecimal(loadoffsetretrv50);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite50 / 4 + " " + Convert.ToDecimal(0xA8000000));

            var loadoffsetretrv51 = 0x27079FB - 0x3782F21C;
            var loadoffsetretwrite51 = Convert.ToDecimal(loadoffsetretrv51);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite51 / 4 + " " + Convert.ToDecimal(0x00150000));

            var loadoffsetretrv52 = 0x2707A09 - 0x3782F21C;
            var loadoffsetretwrite52 = Convert.ToDecimal(loadoffsetretrv52);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite52 / 4 + " " + Convert.ToDecimal(0x800A0000));

            var loadoffsetretrv53 = 0x2707A2F - 0x3782F21C;
            var loadoffsetretwrite53 = Convert.ToDecimal(loadoffsetretrv53);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite53 / 4 + " " + Convert.ToDecimal(0x50010000));

            var loadoffsetretrv54 = 0x2707A3D - 0x3782F21C;
            var loadoffsetretwrite54 = Convert.ToDecimal(loadoffsetretrv54);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite54 / 4 + " " + Convert.ToDecimal(0xA8000000));

            var loadoffsetretrv55 = 0x2707A64 - 0x3782F21C;
            var loadoffsetretwrite55 = Convert.ToDecimal(loadoffsetretrv55);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite55 / 4 + " " + Convert.ToDecimal(0x00150000));

            var loadoffsetretrv56 = 0x2707A72 - 0x3782F21C;
            var loadoffsetretwrite56 = Convert.ToDecimal(loadoffsetretrv56);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite56 / 4 + " " + Convert.ToDecimal(0x800A0000));

            var loadoffsetretrv57 = 0x2707A98 - 0x3782F21C;
            var loadoffsetretwrite57 = Convert.ToDecimal(loadoffsetretrv57);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite57 / 4 + " " + Convert.ToDecimal(0x50010000));

            var loadoffsetretrv58 = 0x2707AA6 - 0x3782F21C;
            var loadoffsetretwrite58 = Convert.ToDecimal(loadoffsetretrv58);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite58 / 4 + " " + Convert.ToDecimal(0xA8000000));
        }

        private void Button18_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x2707B74 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x9F0A0000));

            var loadoffsetretrv40 = 0x2707B82 - 0x3782F21C;
            var loadoffsetretwrite40 = Convert.ToDecimal(loadoffsetretrv40);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite40 / 4 + " " + Convert.ToDecimal(0x4F050000));

            var loadoffsetretrv41 = 0x2707BA9 - 0x3782F21C;
            var loadoffsetretwrite41 = Convert.ToDecimal(loadoffsetretrv41);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite41 / 4 + " " + Convert.ToDecimal(0xA8000000));

            var loadoffsetretrv42 = 0x2707BB7 - 0x3782F21C;
            var loadoffsetretwrite42 = Convert.ToDecimal(loadoffsetretrv42);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite42 / 4 + " " + Convert.ToDecimal(0x54000000));

            var loadoffsetretrv43 = 0x2707B74 - 0x3782F21C;
            var loadoffsetretwrite43 = Convert.ToDecimal(loadoffsetretrv43);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite43 / 4 + " " + Convert.ToDecimal(0x9F0A0000));

            var loadoffsetretrv44 = 0x2707B82 - 0x3782F21C;
            var loadoffsetretwrite44 = Convert.ToDecimal(loadoffsetretrv44);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite44 / 4 + " " + Convert.ToDecimal(0x4F050000));

            var loadoffsetretrv45 = 0x2707BA9 - 0x3782F21C;
            var loadoffsetretwrite45 = Convert.ToDecimal(loadoffsetretrv45);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite45 / 4 + " " + Convert.ToDecimal(0xA8000000));

            var loadoffsetretrv46 = 0x2707BB7 - 0x3782F21C;
            var loadoffsetretwrite46 = Convert.ToDecimal(loadoffsetretrv46);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite46 / 4 + " " + Convert.ToDecimal(0x54000000));

            var loadoffsetretrv47 = 0x2707B74 - 0x3782F21C;
            var loadoffsetretwrite47 = Convert.ToDecimal(loadoffsetretrv47);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite47 / 4 + " " + Convert.ToDecimal(0x9F0A0000));

            var loadoffsetretrv48 = 0x2707B82 - 0x3782F21C;
            var loadoffsetretwrite48 = Convert.ToDecimal(loadoffsetretrv48);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite48 / 4 + " " + Convert.ToDecimal(0x4F050000));
        }

        private void Button17_Click(object sender, EventArgs e)
        {
            //var loadoffsetretrv39 = 0x2706938 - 0x3782F21C;
            //var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            //RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x2000000));
            var nameaddr = 0x26C0658 - 0x3782F21C;
            var nameoffsetretrv = nameaddr / 4;
            var testname = Convert.ToDecimal(nameoffsetretrv);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + testname + " " + Convert.ToDecimal(0x5e374533));

            var nameaddr2 = 0x26C065C - 0x3782F21C;
            var nameoffsetretrv2 = nameaddr2 / 4;
            var testname2 = Convert.ToDecimal(nameoffsetretrv2);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + testname2 + " " + Convert.ToDecimal(0x4d6f647a));

            var nameaddr3 = 0x26C0660 - 0x3782F21C;
            var nameoffsetretrv3 = nameaddr3 / 4;
            var testname3 = Convert.ToDecimal(nameoffsetretrv3);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + testname3 + " " + Convert.ToDecimal(0x5e313c33));

            //var nameaddr4 = 0x26C0664 - 0x3782F21C;
            //var nameoffsetretrv4 = nameaddr4 / 4;
            //var testname4 = Convert.ToDecimal(nameoffsetretrv4);
            //RPC.Call(0x349F6C, -1, 1, "i " + testname4 + " " + Convert.ToDecimal(0x5954));
        }

        private void Button19_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x26FD011 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x0000000));
        }

        private void Button24_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0xE60E0 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x38600602));
        }

        private void Button23_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x005BE0B4 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x4500));
        }

        private void Button22_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x005BE0B4 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x45000000));   //0x45000000
        }

        private void Button21_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x26FD011 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0xb000000));
        }
        void MessageSpammerGSC()
        {
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
            Thread.Sleep(200);
            BO2RPC.iPrintlnBold((int)-1, "^1Welcome to RCE Exploit  > ^2Created by ^5YT/DexCFW Subscribe<3");
        }
        void RCENameChanger()
        {
            //var loadoffsetretrv39 = 0x2706938 - 0x3782F21C;
            //var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            //BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x2000000));
            var nameaddr = 0x26C0658 - 0x3782F21C;
            var nameoffsetretrv = nameaddr / 4;
            var testname = Convert.ToDecimal(nameoffsetretrv);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + testname + " " + Convert.ToDecimal(0x5E325954));

            var nameaddr2 = 0x26C065C - 0x3782F21C;
            var nameoffsetretrv2 = nameaddr2 / 4;
            var testname2 = Convert.ToDecimal(nameoffsetretrv2);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + testname2 + " " + Convert.ToDecimal(0x2F446578));

            var nameaddr3 = 0x26C0660 - 0x3782F21C;
            var nameoffsetretrv3 = nameaddr3 / 4;
            var testname3 = Convert.ToDecimal(nameoffsetretrv3);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + testname3 + " " + Convert.ToDecimal(0x43465700));

            //var nameaddr4 = 0x26C0664 - 0x3782F21C;
            //var nameoffsetretrv4 = nameaddr4 / 4;
            //var testname4 = Convert.ToDecimal(nameoffsetretrv4);
            //BO2RPC.Call(0x349F6C, -1, 1, "i " + testname4 + " " + Convert.ToDecimal(0x5954));
        }
        void RCE_GSC_Infection()
        {
            //Lädt die GSC Datei in den BinaryReader
            BinaryReader2 gsc_file = new BinaryReader2(File.Open(@"C:\Users\Krypton91\source\repos\E3Modz\E3Modz\bin\Debug\Modmneu\_clientids.gsc", FileMode.Open));

            //Überschreibt den originallen Pointer der _clientids.gsc im Multiplayer 
            var loadoffsetretrv39 = 0x140C4C8 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x10060000));

            //Schleife bei dem die GSC Datei geschrieben wird.
            for (int i = 0; i <= (int)gsc_file.BaseStream.Length; i += 4)
            {
                byte[] element = new byte[4];
                var decRead = gsc_file.ReadInt32();

                var loadoffsetretrv11 = 0x10060000 + i - 0x3782F21C;
                var loadoffsetretwrite11 = Convert.ToDecimal(loadoffsetretrv11);
                BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite11 / 4 + " " + Convert.ToDecimal(decRead));
            }
        }
        void EntGameSpammer()
        {

            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
            BO2RPC.Call(0x0349F6C, -1, 1, "O " + "^1Inject^2Done");
            Thread.Sleep(200);
        }

        private void Button20_Click(object sender, EventArgs e)
        {
            MessageSpammerGSC();
            RCENameChanger();
            RCE_GSC_Infection();
            EntGameSpammer();
        }



        private void Button44_Click(object sender, EventArgs e)
        {
            switch (this.button44.Text)
            {
                case "OFF":
                    this.button44.Text = "ON";
                    Mods.RedBoxON();
                    break;

                case "ON":
                    this.button44.Text = "OFF";
                    Mods.RedBoxOFF();
                    break;
            }
        }

        private void Button43_Click(object sender, EventArgs e)
        {
            switch (this.button43.Text)
            {
                case "OFF":
                    this.button43.Text = "ON";
                    Mods.NoRecoilON();
                    break;

                case "ON":
                    this.button43.Text = "OFF";
                    Mods.NoRecoilOFF();
                    break;
            }
        }

        private void Button42_Click(object sender, EventArgs e)
        {
            switch (this.button42.Text)
            {
                case "OFF":
                    this.button42.Text = "ON";
                    Wallhack.Start();
                    break;

                case "ON":
                    this.button42.Text = "OFF";
                    Wallhack.Stop();
                    break;
            }
        }

        private void Button48_Click(object sender, EventArgs e)
        {
            switch (this.button48.Text)
            {
                case "OFF":
                    this.button48.Text = "ON";
                    Mods.FunnyON();
                    break;

                case "ON":
                    this.button48.Text = "OFF";
                    Mods.FunnyOFF();
                    break;
            }
        }

        private void Wallhack_Tick(object sender, EventArgs e)
        {
            if (PS3.Extension.ReadByte(0x1CBF9F8) != 0)
            {
                PS3.SetMemory(0x1CBF9F8, new byte[] { 0x00 });
                PS3.SetMemory(0x1CBF9F8, new byte[] { 0x00 });
                PS3.SetMemory(0x000834D0, new byte[] { 0x38, 0xC0, 0xFF, 0xFF });
                PS3.SetMemory(0x000834D0, new byte[] { 0x38, 0xC0, 0xFF, 0xFF });
            }
            else
            {

            }
        }

        private void Button45_Click(object sender, EventArgs e)
        {
            switch (this.button45.Text)
            {
                case "OFF":
                    this.button45.Text = "ON";
                    Mods.SelfInviteON();
                    break;

                case "ON":
                    this.button45.Text = "OFF";
                    Mods.SelfInviteOFF();
                    break;
            }
        }

        private void Button25_Click(object sender, EventArgs e)
        {
            switch (this.button25.Text)
            {
                case "OFF":
                    this.button25.Text = "ON";
                    Mods.AutoInviteON();
                    break;

                case "ON":
                    this.button25.Text = "OFF";
                    Mods.AutoInviteOFF();
                    break;
            }
        }

        private void Button27_Click(object sender, EventArgs e)
        {
            switch (this.button10.Text)
            {
                case "OFF":
                    this.button10.Text = "ON";
                    Mods.HideIDON();
                    break;

                case "ON":
                    this.button10.Text = "OFF";
                    Mods.HideIDOFF();
                    break;
            }
        }

        private void Button37_Click(object sender, EventArgs e)
        {
            switch (this.button9.Text)
            {
                case "OFF":
                    this.button9.Text = "ON";
                    Mods.HideMicON();
                    break;

                case "ON":
                    this.button9.Text = "OFF";
                    Mods.HideMicOFF();
                    break;
            }
        }

        private void Button41_Click(object sender, EventArgs e)
        {
            switch (this.button41.Text)
            {
                case "OFF":
                    this.button41.Text = "ON";
                    Mods.AntiCloseON();
                    break;

                case "ON":
                    this.button41.Text = "OFF";
                    Mods.AntiCloseOFF();
                    break;
            }
        }

        private void Button56_Click(object sender, EventArgs e)
        {

        }

        private void Button47_Click(object sender, EventArgs e)
        {
            switch (this.button47.Text)
            {
                case "OFF":
                    this.button47.Text = "ON";
                    Mods.ScreenON();
                    break;

                case "ON":
                    this.button47.Text = "OFF";
                    Mods.ScreenOFF();
                    break;
            }
        }

        private void Button46_Click(object sender, EventArgs e)
        {
            switch (this.button46.Text)
            {
                case "OFF":
                    this.button46.Text = "ON";
                    Mods.RON();
                    break;

                case "ON":
                    this.button46.Text = "OFF";
                    Mods.ROFF();
                    break;
            }
        }

        private void Button49_Click(object sender, EventArgs e)
        {
            switch (this.button49.Text)
            {
                case "OFF":
                    this.button49.Text = "ON";
                    Mods.ModON();
                    break;

                case "ON":
                    this.button49.Text = "OFF";
                    Mods.ModOFF();
                    break;
            }
        }

        private void Button50_Click(object sender, EventArgs e)
        {
            switch (this.button50.Text)
            {
                case "OFF":
                    this.button50.Text = "ON";
                    //BO2RPC.ExecuteCommand("g_allowvote 0");
                    break;

                case "ON":
                    this.button50.Text = "OFF";
                    //BO2RPC.ExecuteCommand("g_allowvote 1");
                    break;
            }
        }

        private void Button61_Click(object sender, EventArgs e)
        {

        }

        private void Button60_Click(object sender, EventArgs e)
        {

        }

        private void Button59_Click(object sender, EventArgs e)
        {

        }

        private void Button77_Click(object sender, EventArgs e)
        {


        }

        private void Button76_Click(object sender, EventArgs e)
        {


        }

        private void Button75_Click(object sender, EventArgs e)
        {

        }

        private void Button74_Click(object sender, EventArgs e)
        {

        }

        private void Button73_Click(object sender, EventArgs e)
        {

        }

        private void Button72_Click(object sender, EventArgs e)
        {

        }

        private void Button71_Click(object sender, EventArgs e)
        {

        }

        private void Button70_Click(object sender, EventArgs e)
        {

        }

        private void Button53_Click(object sender, EventArgs e)
        {
            switch (this.button53.Text)
            {
                case "OFF":
                    this.button53.Text = "ON";
                    Mods.LazerON();
                    break;

                case "ON":
                    this.button53.Text = "OFF";
                    Mods.LazerOFF();
                    break;
            }
        }

        private void Button52_Click(object sender, EventArgs e)
        {

            switch (this.button52.Text)
            {
                case "OFF":
                    this.button52.Text = "ON";
                    Mods.VSATON();
                    break;

                case "ON":
                    this.button52.Text = "OFF";
                    Mods.VSATOFF();
                    break;
            }
        }

        private void Button51_Click(object sender, EventArgs e)
        {
            switch (this.button51.Text)
            {
                case "OFF":
                    this.button51.Text = "ON";
                    uint address = 6228512u;
                    byte[] array = new byte[4];
                    array[0] = 44;
                    array[1] = 4;
                    Lib.WriteBytes(address, array);
                    break;

                case "ON":
                    this.button51.Text = "OFF";
                    Lib.WriteBytes(6228512u, new byte[]
                {
                    44,
                    4,
                    0,
                    2
                });
                    break;
            }
        }

        private void Button69_Click(object sender, EventArgs e)
        {
            switch (this.button69.Text)
            {
                case "OFF":
                    this.button69.Text = "ON";
                    PS3.SetMemory(10375392u, new byte[]
                                   {
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    28,
                    29,
                    30,
                    31,
                    0
                                   });
                    break;

                case "ON":
                    this.button69.Text = "OFF";
                    PS3.SetMemory(10375392u, new byte[]
                {
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    28,
                    29,
                    30,
                    31
                });
                    break;
            }
        }

        private void Button68_Click(object sender, EventArgs e)
        {
            switch (this.button68.Text)
            {
                case "OFF":
                    this.button68.Text = "ON";
                    Mods.GreenBoddyON();
                    break;

                case "ON":
                    this.button68.Text = "OFF";
                    Mods.GreenBoddyOFF();
                    break;
            }
        }

        private void Button67_Click(object sender, EventArgs e)
        {
            switch (this.button67.Text)
            {
                case "OFF":
                    this.button67.Text = "ON";
                    Mods.PurpleBoddyON();
                    break;

                case "ON":
                    this.button67.Text = "OFF";
                    Mods.PurpleBoddyOFF();
                    break;
            }
        }

        private void Button66_Click(object sender, EventArgs e)
        {
            switch (this.button66.Text)
            {
                case "OFF":
                    this.button66.Text = "ON";
                    PS3.SetMemory(30236696u, new byte[1]);
                    byte[] bytes = Encoding.ASCII.GetBytes("^2%i\0");
                    PS3.SetMemory(9319056u, bytes);
                    byte[] array = new byte[4];
                    array[0] = 96;
                    byte[] buffer = array;
                    PS3.SetMemory(229356u, buffer);
                    break;

                case "ON":
                    this.button66.Text = "OFF";
                    PS3.SetMemory(30236696u, new byte[]
             {
                1
             });
                    PS3.SetMemory(9319824u, new byte[]
                    {
                37,
                105,
                102,
                112,
                115,
                32,
                47,
                32,
                37,
                48,
                50,
                105,
                109,
                115,
                40,
                115,
                118,
                41,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
                    });
                    PS3.SetMemory(229356u, new byte[]
                    {
                65,
                130,
                8,
                240
                    });
                    break;
            }
        }

        private void Button65_Click(object sender, EventArgs e)
        {
            switch (this.button65.Text)
            {
                case "OFF":
                    this.button65.Text = "ON";
                    Mods.VisionON();
                    break;

                case "ON":
                    this.button65.Text = "OFF";
                    Mods.VisionOFF();
                    break;
            }
        }

        private void Night_Click(object sender, EventArgs e)
        {
            switch (this.Night.Text)
            {
                case "OFF":
                    this.Night.Text = "ON";
                    PS3.SetMemory(24645442u, new byte[]
                          {
                    16
                          });
                    break;

                case "ON":
                    this.Night.Text = "OFF";
                    PS3.SetMemory(24645442u, new byte[1]);
                    break;
            }
        }

        private void FPRS_Click(object sender, EventArgs e)
        {
            if (this.FPRS.Text == "OFF")
            {
                this.FPRS.Text = "ON";
                PS3.SetMemory(0x00397788, new byte[] { 0x2C, 0x03, 0x00, 0x01 });

                return;
            }
            this.FPRS.Text = "OFF";
            PS3.SetMemory(0x00397788, new byte[] { 0x2C, 0x03, 0x00, 0x00 });
        }

        private void Button62_Click(object sender, EventArgs e)
        {
            switch (this.button62.Text)
            {
                case "OFF":
                    this.button62.Text = "ON";
                    BO2RPC.Call(0x313C18, 0, "party_connectToOthers 0;partyMigrate_disabled 1;party_mergingEnabled 0;xpartygo");
                    break;

                case "ON":
                    this.button62.Text = "OFF";
                    BO2RPC.Call(0x313C18, 0, "reset party_connectToOthers;partyMigrate_disabled;party_mergingEnabled");
                    break;
            }
        }

        private void Panel8_Paint(object sender, PaintEventArgs e)
        {

        }

        private void Button40_Click(object sender, EventArgs e)
        {
            string text = "cmd mr " + Lib.ReadInt32(15801756u) + " 3 endround";
            BO2RPC.Call(3226648u, new object[]
            {
                0,
                text
            });
        }

        private void Button39_Click(object sender, EventArgs e)
        {
            BO2RPC.Call(3226648u, new object[]
           {
                0,
                "cmd sl"
           });
            BO2RPC.Call(3226648u, new object[]
            {
                0,
                "cmd s1"
            });
            BO2RPC.Call(3226648u, new object[]
            {
                0,
                "cmd s2"
            });
        }

        private void Button64_Click(object sender, EventArgs e)
        {
            BO2RPC.Call(3226648u, new object[]
          {
                0,
                "cmd sl"
          });
            BO2RPC.Call(3226648u, new object[]
            {
                0,
                "cmd s1"
            });
            BO2RPC.Call(3226648u, new object[]
            {
                0,
                "cmd s2"
            });
        }

        private void Button63_Click(object sender, EventArgs e)
        {
            //BO2RPC.cbuf_addtext("xstopallparties");
        }

        private void Button81_Click(object sender, EventArgs e)
        {
            PS3.SetMemory(32538966u, new byte[]
           {
                10
           });
        }

        private void Button80_Click(object sender, EventArgs e)
        {
            if (this.button80.Text == "Unlimited Class Slots")
            {
                this.button80.Text = "ON";
                this.classslots.RunWorkerAsync();
                this.timer4.Start();
                this.timer4.Enabled = true;
                return;
            }
            this.button80.Text = "Unlimited Class Slots";
            // this.classslots.CancelAsync();
        }

        private void Timer4_Tick(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
    {
                11,
                20
    };
            PS3.SetMemory(40925404u, buffer);
            byte[] buffer2 = new byte[]
            {
                11,
                20
            };
            PS3.SetMemory(40925509u, buffer2);
            byte[] buffer3 = new byte[]
            {
                11,
                20
            };
            PS3.SetMemory(40925614u, buffer3);
            byte[] buffer4 = new byte[]
            {
                11,
                20
            };
            PS3.SetMemory(40925719u, buffer4);
            byte[] buffer5 = new byte[]
            {
                11,
                20
            };
            PS3.SetMemory(40925824u, buffer5);
        }

        private void Classslots_DoWork(object sender, DoWorkEventArgs e)
        {
            byte[] buffer = new byte[]
     {
                11,
                20
     };
            PS3.SetMemory(40925404u, buffer);
            byte[] buffer2 = new byte[]
            {
                11,
                20
            };
            PS3.SetMemory(40925509u, buffer2);
            byte[] buffer3 = new byte[]
            {
                11,
                20
            };
            PS3.SetMemory(40925614u, buffer3);
            byte[] buffer4 = new byte[]
            {
                11,
                20
            };
            PS3.SetMemory(40925719u, buffer4);
            byte[] buffer5 = new byte[]
            {
                11,
                20
            };
            PS3.SetMemory(40925824u, buffer5);
        }

        private void Button408_Click(object sender, EventArgs e)
        {
            this.connectbox.DroppedDown = true;
        }

        private void Button79_Click(object sender, EventArgs e)
        {
            byte[] bytes = Encoding.ASCII.GetBytes(textBox1.Text);
            Array.Resize<byte>(ref bytes, bytes.Length + 1);
            PS3.SetMemory(0x26c0658, bytes);
            PS3.SetMemory(0x26c067f, bytes);
            byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
        }

        private void TextBox2_TextChanged(object sender, EventArgs e)
        {
            byte[] bytes = Encoding.ASCII.GetBytes(textBox3.Text);
            Array.Resize<byte>(ref bytes, bytes.Length + 1);
            PS3.SetMemory(0x26c0658, bytes);
            PS3.SetMemory(0x26c067f, bytes);
            byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
        }

        private void Button84_Click(object sender, EventArgs e)
        {
            iNgameName.Init();
            iNgameName.CBuf_Addtext(";cmd userinfo \"\\clanAbbrev\\" + this.textBox3.Text + "\\name\\" + this.textBox3.Text);
        }
        private void NameResett()
        {
            byte[] bytes = Encoding.ASCII.GetBytes(this.PSNGamertag.Text);
            Array.Resize<byte>(ref bytes, bytes.Length + 1);
            PS3.SetMemory(40633944U, bytes);
            PS3.SetMemory(40633983U, bytes);
        }
        private void Button85_Click(object sender, EventArgs e)
        {
            NameResett();
        }

        private void Button78_Click(object sender, EventArgs e)
        {
            if (button78.Text == "Flash OFF")
            {
                flashname.Start();
                button78.Text = "Flash ON";
            }
            else if (button78.Text == "Flash ON")
            {
                flashname.Stop();
                button78.Text = "Flash OFF";
            }

        }


        private void Flashname_Tick(object sender, EventArgs e)
        {
            base.Name = this.textBox1.Text; int num = new Random().Next(0, 9); PS3.SetMemory(0x026C0658, Encoding.ASCII.GetBytes("^" + num.ToString() + base.Name + "\0")); PS3.SetMemory(0x026C0658, Encoding.ASCII.GetBytes("^" + num.ToString() + base.Name + "\0")); PS3.SetMemory(0x026c067f, Encoding.ASCII.GetBytes("^" + num.ToString() + base.Name + "\0")); PS3.SetMemory(0x026c067f, Encoding.ASCII.GetBytes("^" + num.ToString() + base.Name + "\0"));
        }

        private void Button82_Click(object sender, EventArgs e)
        {

        }

        private void Timer1_Tick(object sender, EventArgs e)
        {
            base.Name = this.textBox2.Text; int num = new Random().Next(0, 9); PS3.SetMemory(0x026C0658, Encoding.ASCII.GetBytes("^" + num.ToString() + base.Name + "\0")); PS3.SetMemory(0x026C0658, Encoding.ASCII.GetBytes("^" + num.ToString() + base.Name + "\0")); PS3.SetMemory(0x026c067f, Encoding.ASCII.GetBytes("^" + num.ToString() + base.Name + "\0")); PS3.SetMemory(0x026c067f, Encoding.ASCII.GetBytes("^" + num.ToString() + base.Name + "\0"));
        }

        private void Button86_Click(object sender, EventArgs e)
        {
            PS3.Extension.WriteString(0x026C0658, "^Hc2youtube_logo" + textBox1.Text);
        }

        private void Connectbox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (connectbox.Text == "E3Modz")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("E3Modz");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Enstone")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^3Enstone");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Sony")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^2Gay^1Sony");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Treyarch")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^2T^1rey^5arch");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Black Ops 2")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^2Black ^1Ops^5 2");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Unlockall Free")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^2Unlockall ^1FREE");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Unlockall not Free!")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Unlockall not Free!");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Kid shut up")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^2Kid ^1shut up");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "French ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^3French ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "America ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^1Am^2erica");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Brasil ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^3Brasil ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "German ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^3German ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Austria")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^1Aus^7tr^1ia");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "PS3")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^2PS3");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "HDMI Kabel ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^2HDMI Kabel ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "RGB ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^1R^6G^3B ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Modded PS3 ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^2Modded PS3 ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "DEX ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^1DEX ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "CEX")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^2CEX");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "HAN ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("H^3AN ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Han = Gay ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Han = Gay ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Target Manager ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Target Manager ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Control Console ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Control Console ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "PS4")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^3PS4");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "LUUUL ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("LUUUL ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Fuck You ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Fuck ^2You ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "E3Modz ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^1E3^2Modz ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Trooool ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Tro^2oool ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Marcelscorpion")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Marcelscorpion");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Visca_Barca")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Visca_Barca");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Visca96Barca")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Visca96Barca");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "MontanaBlack88 ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("MontanaBlack88 ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Faze_Rain ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Faze_Rain ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Faze_Pamaj")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Faze_Pamaj");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Faze_Clan ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Faze_Clan ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Faze ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Faze ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "PewDiePie")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("PewDiePie");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Ninja ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Ninja ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Dex_CFW")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Dex_CFW");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Kiwi_Modz ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Kiwi_Modz ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "BassHaxor")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("BassHaxor");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Exill")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Exill");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Smoky_Mods")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Smoky_Mods");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "E3Modz ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("E3Modz ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Nuketown ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Nuketown ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Standoff")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Standoff");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Express")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Express");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Carrier")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Carrier");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Raid ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Raid ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Aftermath")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Aftermath");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Cargo")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Cargo");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Drone")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Drone");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Hijacked")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Hijacked");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Meltdown")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Meltdown");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Plaza")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Plaza");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Slums")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Slums");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Turbine")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Turbine");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Yemen ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Yemen ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Iphone")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Iphone");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Samsung ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Samsung ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Redbull ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Redbull ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "AkiiiNator")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("AkiiiNator");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Saskia ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Saskia");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "GermanGirl ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("GermanGirl ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Webman ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Webman ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "Exploit ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("Exploit ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "E3Modz ")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("E3Modz ");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
            else if (connectbox.Text == "DontTryHard")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("DontTryHard");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                PS3.SetMemory(0x26c067f, bytes);
                byte[] byE3Modz = new byte[] { 0x60, 0x00, 0x00, 0x00 }; PS3.SetMemory(0x52DFC0, byE3Modz);
            }
        }

        private void Button95_Click(object sender, EventArgs e)
        {
            byte[] bytes = Encoding.ASCII.GetBytes("^3Facebook:" + this.textBox1.Text);
            Array.Resize<byte>(ref bytes, bytes.Length + 1);
            PS3.SetMemory(40633944u, bytes);
            PS3.SetMemory(40633983u, bytes);
            byte[] array = new byte[4];
            array[0] = 96;
            byte[] buffer = array;
            PS3.SetMemory(5431232u, buffer);

        }

        private void Button97_Click(object sender, EventArgs e)
        {
            PS3.Extension.WriteString(0x026C0658, "^Hc2youtube_logo" + textBox1.Text);
        }

        private void Button94_Click(object sender, EventArgs e)
        {
            NameResett();
        }

        private void Button96_Click(object sender, EventArgs e)
        {
            NameResett();
        }

        private void Button99_Click(object sender, EventArgs e)
        {
            PS3.Extension.WriteString(this.nameOff, "^H");
            PS3.SetMemory(this.nameOff + 2u, new byte[]
            {
                Convert.ToByte("99")
            });
            PS3.SetMemory(this.nameOff + 3u, new byte[]
            {
                Convert.ToByte("50")
            });
            PS3.SetMemory(this.nameOff + 4u, new byte[]
            {
                Convert.ToByte("twitch_logo".Length)
            });
            PS3.Extension.WriteString(this.nameOff + 5u, "twitch_logo" + this.textBox1.Text + "\0");
        }

        private void Button101_Click(object sender, EventArgs e)
        {
            PS3.Extension.WriteString(this.a, "^H");
            PS3.SetMemory(this.a + 2u, new byte[]
            {
                Convert.ToByte("99")
            });
            PS3.SetMemory(this.a + 3u, new byte[]
            {
                Convert.ToByte("50")
            });
            PS3.SetMemory(this.a + 4u, new byte[]
            {
                Convert.ToByte("menu_lobby_icon_twitter".Length)
            });
            PS3.Extension.WriteString(this.a + 5u, "menu_lobby_icon_twitter\0" + this.textBox1.Text + "\0");
        }

        private void Button100_Click(object sender, EventArgs e)
        {
            NameResett();
        }

        private void Button98_Click(object sender, EventArgs e)
        {
            NameResett();
        }

        private void GroupBox6_Enter(object sender, EventArgs e)
        {

        }

        private void LinkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start("https://discord.gg/VxvBTcN");
        }

        private void StatusTimer_Tick(object sender, EventArgs e)
        {

        }

        private void BO2_Load(object sender, EventArgs e)
        {
            pictureBox1.Visible = false;
        }
        private byte[] Combine(byte[] Arr1, byte[] Arr2)
        {
            byte[] array = new byte[Arr1.Length + Arr2.Length];
            Buffer.BlockCopy(Arr1, 0, array, 0, Arr1.Length);
            Buffer.BlockCopy(Arr2, 0, array, Arr1.Length, Arr2.Length);
            return array;
        }
        private void SetClan(uint offset, string input)
        {
            PS3.SetMemory(offset, new byte[6]);
            bool flag = input.Length == 1;
            if (flag)
            {
                this.CombSetClan = this.Combine(new byte[7], Encoding.ASCII.GetBytes(input).Reverse<byte>().ToArray<byte>()).Reverse<byte>().ToArray<byte>();
            }
            else
            {
                bool flag2 = input.Length == 2;
                if (flag2)
                {
                    this.CombSetClan = this.Combine(new byte[6], Encoding.ASCII.GetBytes(input).Reverse<byte>().ToArray<byte>()).Reverse<byte>().ToArray<byte>();
                }
                else
                {
                    bool flag3 = input.Length == 3;
                    if (flag3)
                    {
                        this.CombSetClan = this.Combine(new byte[5], Encoding.ASCII.GetBytes(input).Reverse<byte>().ToArray<byte>()).Reverse<byte>().ToArray<byte>();
                    }
                    else
                    {
                        bool flag4 = input.Length == 4;
                        if (flag4)
                        {
                            this.CombSetClan = this.Combine(new byte[4], Encoding.ASCII.GetBytes(input).Reverse<byte>().ToArray<byte>()).Reverse<byte>().ToArray<byte>();
                        }
                    }
                }
            }
            bool flag5 = input.Length <= 0;
            if (!flag5)
            {
                PS3.SetMemory(offset, BitConverter.GetBytes(BitConverter.ToUInt64(this.CombSetClan, 0) * 64UL));
            }
        }
        private void Button93_Click(object sender, EventArgs e)
        {
            this.SetClan(Variables.Clantag, this.textBox6.Text);
        }

        private void Button92_Click(object sender, EventArgs e)
        {
            string text = this.button92.Text;
            if (text == "Flash? ")
            {
                this.button92.Text = "Flash ON";
                this.ClanFlash.Start();
                return;
            }
            if (!(text == "Flash ON"))
            {
                return;
            }
            this.button92.Text = "Flash OFF";
            this.ClanFlash.Stop();
        }

        private void ClanFlash_Tick(object sender, EventArgs e)
        {
            {
                this.ClanFlash.Start();
                this.ClanFlash.Interval = 100;
                ++this.Setter;
                switch (this.Setter)
                {
                    case 1:
                        this.SetClan(Variables.Clantag, "^1");
                        break;
                    case 2:
                        this.SetClan(Variables.Clantag, "^2");
                        break;
                    case 3:
                        this.SetClan(Variables.Clantag, "^3");
                        break;
                    case 4:
                        this.SetClan(Variables.Clantag, "^4");
                        break;
                    case 5:
                        this.SetClan(Variables.Clantag, "^5");
                        break;
                    case 6:
                        this.SetClan(Variables.Clantag, "^6");
                        break;
                    case 8:
                        this.SetClan(Variables.Clantag, "^8");
                        break;
                    case 9:
                        this.SetClan(Variables.Clantag, "^9");
                        break;
                    case 10:
                        this.SetClan(Variables.Clantag, "^0");
                        break;
                }
                if (this.Setter == 9)
                    this.Setter = 0;
                this.ClanFlash.Start();
            }
        }

        private void ComboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBox2.Text == "Globe")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^H\u007f\u007f\bui_globe\0");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(40633944u, bytes);
                PS5.SetMemory(40633983u, bytes);
            }
            else if (comboBox2.Text == "GlobeV2")
            {
                byte[] bytes = Encoding.ASCII.GetBytes("^H\u007f\u007f\bui_globe ^H\u007f\u007f\bui_globe\0");
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(40633944u, bytes);
                PS5.SetMemory(40633983u, bytes);
            }
            else if (comboBox2.Text == "KD")
            {
                PS3.Extension.WriteString(40633944u, "^Hdd\u001amenu_mp_lobby_aar_icons_kd\0");
            }
            else if (comboBox2.Text == "LowHealth")
            {
                PS3.Extension.WriteString(40633944u, "^Hdd\u0012overlay_low_health\0");
            }
            else if (comboBox2.Text == "ScoreBar")
            {
                PS3.Extension.WriteString(40633944u, "^Hdd\u000fscorebar_fadein\0");
            }
            else if (comboBox2.Text == "AquaCamo")
            {
                PS3.Extension.WriteString(this.a, "^H");
                PS3.SetMemory(this.a + 2u, new byte[]
                {
                Convert.ToByte("120")
                });
                PS3.SetMemory(this.a + 3u, new byte[]
                {
                Convert.ToByte("120")
                });
                PS3.SetMemory(this.a + 4u, new byte[]
                {
                Convert.ToByte("menu_camo_aqua_pattern".Length)
                });
                PS3.Extension.WriteString(this.a + 5u, "menu_camo_pattern\0");
            }
            else if (comboBox2.Text == "DiamondCamo")
            {
                PS3.Extension.WriteString(this.a, "^H");
                PS3.SetMemory(this.a + 2u, new byte[]
                {
                Convert.ToByte("120")
                });
                PS3.SetMemory(this.a + 3u, new byte[]
                {
                Convert.ToByte("120")
                });
                PS3.SetMemory(this.a + 4u, new byte[]
                {
                Convert.ToByte("menu_camo_diamond_pattern".Length)
                });
                PS3.Extension.WriteString(this.a + 5u, "menu_camo_diamond_pattern\0");
            }
            else if (comboBox2.Text == "GoldCamo")
            {

                PS3.Extension.WriteString(this.a, "^H");
                PS3.SetMemory(this.a + 2u, new byte[]
                {
                Convert.ToByte("120")
                });
                PS3.SetMemory(this.a + 3u, new byte[]
                {
                Convert.ToByte("120")
                });
                PS3.SetMemory(this.a + 4u, new byte[]
                {
                Convert.ToByte("menu_camo_gold_pattern".Length)
                });
                PS3.Extension.WriteString(this.a + 5u, "menu_camo_gold_pattern\0");
            }
            else if (comboBox2.Text == "GhostCamo")
            {
                PS3.Extension.WriteString(this.a, "^H");
                PS3.SetMemory(this.a + 2u, new byte[]
                {
                Convert.ToByte("120")
                });
                PS3.SetMemory(this.a + 3u, new byte[]
                {
                Convert.ToByte("120")
                });
                PS3.SetMemory(this.a + 4u, new byte[]
                {
                Convert.ToByte("menu_camo_diamond_pattern".Length)
                });
                PS3.Extension.WriteString(this.a + 5u, "menu_camo_ghost_pattern\0");
            }
            else if (comboBox2.Text == "Smoke")
            {
                PS3.Extension.WriteString(this.a, "^H");
                PS3.SetMemory(this.a + 2u, new byte[]
                {
                Convert.ToByte("100")
                });
                PS3.SetMemory(this.a + 3u, new byte[]
                {
                Convert.ToByte("100")
                });
                PS3.SetMemory(this.a + 4u, new byte[]
                {
                Convert.ToByte("ui_smoke".Length)
                });
                PS3.Extension.WriteString(this.a + 5u, "ui_smoke\0");
            }
            else if (comboBox2.Text == "EMP")
            {
                PS3.Extension.WriteString(this.a, "^H");
                PS3.SetMemory(this.a + 2u, new byte[]
                {
                Convert.ToByte("120")
                });
                PS3.SetMemory(this.a + 3u, new byte[]
                {
                Convert.ToByte("120")
                });
                PS3.SetMemory(this.a + 4u, new byte[]
                {
                Convert.ToByte("compass_emp".Length)
                });
                PS3.Extension.WriteString(this.a + 5u, "compass_emp\0");
            }
        }

        private void Button91_Click(object sender, EventArgs e)
        {
            this.comboBox2.DroppedDown = true;
        }
        public void Reset()
        {
            PS3.SetMemory(0xD707DB, new byte[] { 0x74 });
        }
        private void Button87_Click(object sender, EventArgs e)
        {
            Lib.WriteString(0x00D707DB, "S");
            Reset();
        }

        private void Button9_Click(object sender, EventArgs e)
        {
            tabControl1.SelectedIndex = 0;
        }

        private void Button2_Click(object sender, EventArgs e)
        {
            tabControl1.SelectedIndex = 2;
        }

        private void Button3_Click(object sender, EventArgs e)
        {
            tabControl1.SelectedIndex = 3;
        }

        private void Button4_Click(object sender, EventArgs e)
        {
            tabControl1.SelectedIndex = 4;
        }

        private void Button5_Click(object sender, EventArgs e)
        {
            tabControl1.SelectedIndex = 5;
        }

        private void Button6_Click(object sender, EventArgs e)
        {
            tabControl1.SelectedIndex = 6;
        }

        private void Button7_Click(object sender, EventArgs e)
        {
            tabControl1.SelectedIndex = 7;
        }

        private void Button8_Click(object sender, EventArgs e)
        {

        }

        private void Button13_Click(object sender, EventArgs e)
        {
            PS3.CCAPI.ShutDown(CCAPI.RebootFlags.ShutDown);
        }
        private void AntiFreeeeze1()
        {

            byte[] array = new byte[1];
            PS3.SetMemory(30236696u, array);
            byte[] bytes = Encoding.ASCII.GetBytes("%i ^2HACK HERO 3\0");
            PS3.SetMemory(9319056u, bytes);
            byte[] array2 = new byte[4];
            array2[0] = 96;
            byte[] array3 = array2;
            PS3.SetMemory(229356u, array3);
        }
        private void AntiFreeeeze2()
        {
            PS3.Extension.WriteBytes(0x1b31c, new byte[] { 0x35, 0x17, 0x35, 0x30 });
            PS3.SetMemory(0xd4ffef, new byte[] {
                    0x5e, 0x1f, 0x47, 0x49, 0x36, 0x6b, 0x4e, 0x5e, 0x23, 0x1a, 0x5e, 0x24, 0x29, 0x4c, 0x39, 0x65,
                    0x4e, 0x2d, 0x41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                 });
            this.timer2.Start();
        }



        private void AntiFreeeeze3()
        {
            byte[] array = new byte[4];
            array[0] = 56;
            array[1] = 96;
            uint offset2 = 4307164u;
            array = new byte[4];
            array[0] = 60;
            array[1] = 96;
            PS3.SetMemory(offset2, array);
            uint offset3 = 4307128u;
            array = new byte[4];
            array[0] = 60;
            array[1] = 96;
            PS3.SetMemory(offset3, array);
            uint offset4 = 7894432u;
            array = new byte[4];
            array[0] = 60;
            array[1] = 96;
            PS3.SetMemory(offset4, array);
            uint offset5 = 4307152u;
            array = new byte[4];
            array[0] = 56;
            array[1] = 96;
            PS3.SetMemory(offset5, array);
            uint offset6 = 7740788u;
            array = new byte[4];
            array[0] = 60;
            array[1] = 96;
            PS3.SetMemory(offset6, array);
            uint offset7 = 7607508u;
            array = new byte[4];
            array[0] = 60;
            array[1] = 96;
            PS3.SetMemory(offset7, array);
            uint offset8 = 7740752u;
            array = new byte[4];
            array[0] = 60;
            array[1] = 96;
            PS3.SetMemory(offset8, array);
            uint offset9 = 7746652u;
            array = new byte[4];
            array[0] = 60;
            array[1] = 96;
            PS3.SetMemory(offset9, array);
            uint offset10 = 7743252u;
            array = new byte[4];
            array[0] = 56;
            array[1] = 96;
            PS3.SetMemory(offset10, array);
            uint offset11 = 7743232u;
            array = new byte[4];
            array[0] = 60;
            array[1] = 96;
            PS3.SetMemory(offset11, array);
            uint offset12 = 7743220u;
            array = new byte[4];
            array[0] = 60;
            array[1] = 96;
            PS3.SetMemory(offset12, array);
            uint offset13 = 7743212u;
            array = new byte[4];
            array[0] = 60;
            array[1] = 96;
            PS3.SetMemory(offset13, array);
            uint offset14 = 7740768u;
            array = new byte[4];
            array[0] = 60;
            array[1] = 96;
            PS3.SetMemory(offset14, array);
            uint offset15 = 7740756u;
            array = new byte[4];
            array[0] = 56;
            array[1] = 96;
            PS3.SetMemory(offset15, array);
            uint offset16 = 7745684u;
            array = new byte[4];
            array[0] = 56;
            array[1] = 96;
            PS3.SetMemory(offset16, array);
            uint offset17 = 7745656u;
            array = new byte[4];
            array[0] = 56;
            array[1] = 96;
            PS3.SetMemory(offset17, array);
            uint offset18 = 7745700u;
            array = new byte[4];
            array[0] = 96;
            PS3.SetMemory(offset18, array);
            uint offset19 = 7745632u;
            array = new byte[4];
            array[0] = 56;
            array[1] = 96;
            PS3.SetMemory(offset19, array);
            uint offset20 = 4046164u;
            array = new byte[2];
            array[0] = 72;
            PS3.SetMemory(offset20, array);
            uint offset21 = 5273536u;
            array = new byte[2];
            array[0] = 72;
            PS3.SetMemory(offset21, array);
            uint offset22 = 5284768u;
            array = new byte[2];
            array[0] = 72;
            PS3.SetMemory(offset22, array);
            uint offset23 = 5289500u;
            array = new byte[2];
            array[0] = 72;
            PS3.SetMemory(offset23, array);
            uint offset24 = 5292000u;
            array = new byte[2];
            array[0] = 72;
            PS3.SetMemory(offset24, array);
            uint offset25 = 5295240u;
            array = new byte[2];
            array[0] = 72;
            PS3.SetMemory(offset25, array);
            uint offset26 = 5504108u;
            array = new byte[2];
            array[0] = 72;
            PS3.SetMemory(offset26, array);
            uint offset27 = 5290612u;
            array = new byte[4];
            array[0] = 96;
            PS3.SetMemory(offset27, array);
            uint offset28 = 5537236u;
            array = new byte[4];
            array[0] = 96;
            PS3.SetMemory(offset28, array);
            uint offset29 = 5538120u;
            array = new byte[4];
            array[0] = 96;
            PS3.SetMemory(offset29, array);

            PS3.SetMemory(0x67b824, new byte[] { 0x90, 0x9a, 0, 0, 0x48, 0, 0, 0x48, 0x80, 0x9f, 0, 0, 0x30, 0x84 });
            PS3.SetMemory(0x8e3590, new byte[13]);
            PS3.SetMemory(0x37fec, new byte[] { 0x41, 130, 8, 240 });
            byte[] buffer2 = new byte[] { 0x60 };
            PS3.SetMemory(0x67b828, buffer2);
            PS3.SetMemory(0x67b82b, new byte[1]);
            byte[] buffer3 = new byte[] { 0x7f };
            PS3.SetMemory(0x67b832, buffer3);
            PS3.SetMemory(0x67b828, buffer3);
            PS3.SetMemory(0x67b82b, new byte[1]);
            PS3.SetMemory(0x67b832, buffer2);
            PS3.SetMemory(0x67b824, new byte[] { 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x80, 0x9f, 0, 0, 0x60, 0x84, 0, 13 });
            PS3.SetMemory(0x67b824, new byte[] { 0x60, 0, 0, 0, 0x60, 0, 0, 0, 0x80, 0x9f, 0, 0, 0x30, 0x84, 0x7f });
            PS3.SetMemory(0x67b824, new byte[] { 0x90, 0x9a, 0, 0, 0x5e, 0x5e, 0x5e });
            PS3.SetMemory(0x67b832, new byte[] { 0x5e, 0x5e });
            PS3.SetMemory(0x8e3590, new byte[] { 13 });
            PS3.SetMemory(0x37fec, new byte[] { 0x41, 130, 8, 240 });
            PS3.SetMemory(0x67b824, new byte[] { 0x90, 0x9a, 0, 0, 0x5e, 0x5e, 0x5e });
            PS3.SetMemory(0x67b832, new byte[] { 0x5e, 0x5e });
            PS3.SetMemory(0x37fec, new byte[] { 0x41, 130, 8, 240 });
            PS3.SetMemory(0x67b824, new byte[] { 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x80, 0x9f, 0, 0, 0x60, 0x84, 0, 13 });
            PS3.SetMemory(0x67b824, new byte[] { 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x80, 0x9f, 0, 0, 0x60, 0x84, 0, 13 });
            PS3.Extension.WriteBytes(0x1b31c, new byte[] { 0x35, 0x17, 0x35, 30 });
            PS3.SetMemory(0x67b824, new byte[] { 0x60, 0x90, 0x9e, 0x70, 0x60, 0x70, 0x60, 0x70, 0x80, 0x9f, 0, 0, 0x60, 0x84, 0, 13 });
            PS3.Extension.WriteBytes(0x1b31c, new byte[] { 0x97, 0xee, 0x35, 0x98 });
            PS3.Extension.WriteBytes(0x1b31c, new byte[] { 0x7c, 0xff, 0x18, 0x9f });
            PS3.SetMemory(0x67b824, new byte[] { 0x90, 0x9a, 0, 0, 0x5e, 0x5e, 0x5e });
            PS3.SetMemory(0x67b832, new byte[] { 0x5e, 0x5e });
            PS3.SetMemory(0x37fec, new byte[] { 0x41, 130, 8, 240 });
            PS3.SetMemory(0x67b824, new byte[] { 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x80, 0x9f, 0, 0, 0x60, 0x84, 0, 13 });
            PS3.SetMemory(0x1b31c, new byte[] { 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x80, 0x9f, 0, 0, 0x60, 0x84, 0, 13 });
            PS3.SetMemory(0x18330, new byte[] { 0xd0, 0x41, 0, 140, 0xc0, 0x5f, 0, 0, 0x48, 0x3a, 0x23, 0x21, 0x30, 0x7f, 0 });
            PS3.SetMemory(0x20d30, new byte[] { 0xdb, 0xa1, 1, 0x38, 0xdb, 0xc1, 1, 0x40, 0xdb, 0xe1, 1, 0x48, 60, 0xc0, 0, 0 });
            PS3.SetMemory(0x2cfd7c, new byte[] { 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x80, 0x9f, 0, 0, 0x60, 0x84, 0, 13 });
            PS3.SetMemory(0x67b824, new byte[] { 0x90, 0x9a, 0, 0, 0x5e, 0x5e, 0x5e });
            PS3.SetMemory(0x67b832, new byte[] { 0x5e, 0x5e, 0x38 });
            PS3.SetMemory(0x8e3590, new byte[13]);
            PS3.SetMemory(0x37fec, new byte[] { 0x41, 130, 8, 240 });
            PS3.SetMemory(0x1781470, new byte[] {
                0x25, 0x69, 0x66, 0x70, 0x73, 0x20, 0x2f, 0x20, 0x25, 0x30, 50, 0x69, 0x6d, 0x73, 40, 0x73,
                0x76, 0x29, 0, 0, 0, 0, 0, 0, 0, 0
             });
            PS3.SetMemory(0x1781478, new byte[] {
                0x25, 0x69, 0x66, 0x70, 0x73, 0x20, 0x2f, 0x20, 0x25, 0x30, 50, 0x69, 0x6d, 0x73, 40, 0x73,
                0x76, 0x29, 0, 0, 0, 0, 0, 0, 0, 0
             });
            PS3.SetMemory(0x1780f28, new byte[] {
                0x25, 0x69, 0x66, 0x70, 0x73, 0x20, 0x2f, 0x20, 0x25, 0x30, 50, 0x69, 0x6d, 0x73, 40, 0x73,
                0x76, 0x29, 0, 0, 0, 0, 0, 0, 0, 0
             });
            PS3.SetMemory(0x67b824, new byte[] { 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x80, 0x9f, 0, 0, 0x60, 0x84, 0, 13 });
            PS3.SetMemory(0x67b832, new byte[] { 0x5e, 0x5e, 0x38 });
            PS3.SetMemory(0x1b31c, new byte[] { 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x60, 0x70, 0x80, 0x9f, 0, 0, 0x60, 0x84, 0, 13 });
        }
        private void firstantifreeze()
        {
            PS3.SetMemory(6797352u, new byte[]
            {
                96
            });
            PS3.SetMemory(6797355u, new byte[1]);
            PS3.SetMemory(6797362u, new byte[]
            {
                127
            });
            PS3.SetMemory(810557548u, new byte[8]);
            byte[] array = new byte[4];
            array[0] = 56;
            array[1] = 96;
            PS3.SetMemory(111388u, array);
            PS3.SetMemory(9482500u, new byte[3]);

        }
        private void Button90_Click(object sender, EventArgs e)
        {
            Antifreeze.AntiFreeze100();
            Antifreeze.frz1();
            Antifreeze.deluxeanti();
            Antifreeze.Ingame();
            Antifreeze.AntiFeezeButton();
            Antifreeze.AntiFreezeIngame();
            this.AntiLVL();
            this.AntiFreeze();
            this.Hear();
            this.firstantifreeze();
            this.label16.Text = "Enabled";
            this.label16.ForeColor = Color.Green;
            MessageBox.Show("- 100% Anti Freeze Activated");
        }




        private void Timer2_Tick(object sender, EventArgs e)
        {
            PS3.SetMemory(0x90b104, new byte[2]);
            PS3.Extension.WriteBytes(0xfa9bc7, new byte[1]);
            PS3.Extension.WriteBytes(0xfa9e57, new byte[1]);
            PS3.Extension.WriteBytes(0xfa9d0f, new byte[1]);
            PS3.SetMemory(0x90b104, new byte[2]);
        }

        private void TabPage2_Click(object sender, EventArgs e)
        {

        }

        private void Button83_Click(object sender, EventArgs e)
        {
            if (this.button83.Text == "Flash OFF")
            {
                this.InGameNameFlash.Start();
                this.button83.Text = "Flash ON";
                return;
            }
            if (this.button83.Text == "Flash ON")
            {
                this.InGameNameFlash.Stop();
                this.button83.Text = "Flash OFF";
            }
        }

        private void InGameNameFlash_Tick(object sender, EventArgs e)
        {
            Random random = new Random();
            this.colour = random.Next(0, 9);
            iNgameName.CBuf_Addtext(";cmd userinfo \"\\clanAbbrev\\^" + this.colour.ToString() + "\\name\\" + this.textBox3.Text);
        }

        private void TextBox3_TextChanged(object sender, EventArgs e)
        {
            iNgameName.Init();
        }

        private void Button102_Click(object sender, EventArgs e)
        {
            PS3.Extension.WriteString(40633944u, this.textBox4.Text + "\u0010\u0001\u0001" + this.textBox4.Text + "\u0006holo_9\0");
        }

        private void Button103_Click(object sender, EventArgs e)
        {

        }

        private void Skipp1Timer_Tick(object sender, EventArgs e)
        {

        }

        private void Skipp2Timer_Tick(object sender, EventArgs e)
        {

        }

        private void Button110_Click(object sender, EventArgs e)
        {
            byte[] bytes = Encoding.ASCII.GetBytes("^Hdd\u000eperk_times_two^2EP LOBBY");
            Array.Resize<byte>(ref bytes, bytes.Length + 1);
            PS3.SetMemory(40633944u, bytes);
            PS3.SetMemory(40633983u, bytes);
            byte[] array = new byte[4];
            array[0] = 96;
            byte[] buffer = array;
            PS3.SetMemory(5431232u, buffer);
        }

        private void Button109_Click(object sender, EventArgs e)
        {
            NameResett();
        }

        private void Button104_Click(object sender, EventArgs e)
        {

        }

        private void Button103_Click_1(object sender, EventArgs e)
        {
            string text = this.button103.Text;
            if (text == "rename ALL OFF")
            {
                this.button103.Text = "ON";
                this.timer3.Start();
                return;
            }
            if (!(text == "ON"))
            {
                return;
            }
            this.button103.Text = "rename ALL OFF";
            this.timer3.Stop();
        }

        private void Button105_Click(object sender, EventArgs e)
        {


        }

        private void Button106_Click(object sender, EventArgs e)
        {



        }

        private void Button107_Click(object sender, EventArgs e)
        {


        }

        private void Button108_Click(object sender, EventArgs e)
        {




        }

        private void Button111_Click(object sender, EventArgs e)
        {



        }

        private void Button112_Click(object sender, EventArgs e)
        {




        }

        private void Button162_Click(object sender, EventArgs e)
        {
            if (this.prestigetxt.Text == "" || this.ranktxt.Text == "" || this.xptxt.Text == "" || this.killstxt.Text == "" || this.deathtxt.Text == "" || this.winstxt.Text == "" || this.lossestxt.Text == "" || this.scoretxt.Text == "")
            {
                MessageBox.Show("Please fill in all fields for the Stats", "RPC Question");
                return;
            }
            if (this.prestigetxt.Text == "Prestige" || this.ranktxt.Text == "Rank" || this.xptxt.Text == "Player XP" || this.killstxt.Text == "Kills" || this.deathtxt.Text == "Deaths" || this.winstxt.Text == "Wins" || this.lossestxt.Text == "Losses" || this.scoretxt.Text == "Score")
            {
                MessageBox.Show("Please fill in all fields for the Stats", "RPC Question");
                return;
            }
            Server.GiveRank(this.prestigetxt.Text, this.ranktxt.Text, this.xptxt.Text, this.killstxt.Text, this.deathtxt.Text, this.winstxt.Text, this.lossestxt.Text, this.scoretxt.Text);
        }

        private void Button240_Click(object sender, EventArgs e)
        {
            Server.GiveRank("11", "55", "2000", "82695", "39231", "450304", "36657", "92443");
        }

        private void Button117_Click(object sender, EventArgs e)
        {
            string DRNKDBO2 = "callvote map \"mp_hijacked;statsetbyname RANKXP 1;statsetbyname PLEVEL 0;statsetbyname RANK 1;\"";
            BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
            Thread.Sleep(1000);
            BO2RPC.Call(0x313C18, 0, "disconnect\n");
        }

        private void Button118_Click(object sender, EventArgs e)
        {
            string DRNKDBO2 = "callvote map \"mp_hijacked;statsetbyname RANKXP 99999;statsetbyname PLEVEL 11;statsetbyname RANK 54;\"";
            BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
            Thread.Sleep(400);
            BO2RPC.Call(0x313C18, 0, "disconnect\n");
        }

        private void Button119_Click(object sender, EventArgs e)
        {
            string DRNKDBO2 = "callvote map \"mp_raid;statsetbyname RANKXP 9999999;statsetbyname PLEVEL 9999999999;statsetbyname RANK 0;\"";
            BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
            Thread.Sleep(400);
            BO2RPC.Call(0x313C18, 0, "disconnect\n");
        }

        private void Button120_Click(object sender, EventArgs e)
        {
            string DRNKDBO2 = "callvote map \"mp_raid;statsetbyname RANKXP 9999999999999999;statsetbyname PLEVEL 9999999999999999;statsetbyname RANK 9999999999999999;\"";
            BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
            Thread.Sleep(400);
            BO2RPC.Call(0x313C18, 0, "disconnect\n");
        }

        private void Button121_Click(object sender, EventArgs e)
        {
            MessageBox.Show("With this Method you can Derank and Rank the Host! ex: You play a 1vs1 with a Player and he is Host you can Derank him!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void Button131_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x60AE14 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x38600080));
            MessageSpammer();
        }

        private void Button123_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x01cc28d8 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x3E800000));
            MessageSpammer();
        }

        private void Button127_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x01cc28d8 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x3D800000));
            MessageSpammer();
        }

        private void Button130_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x01cc28d8 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x3C800000));
            MessageSpammer();
        }

        private void Button129_Click(object sender, EventArgs e)
        {
            var loadoffsetretrv39 = 0x01cc28d8 - 0x3782F21C;
            var loadoffsetretwrite39 = Convert.ToDecimal(loadoffsetretrv39);
            BO2RPC.Call(0x349F6C, -1, 1, "i " + loadoffsetretwrite39 / 4 + " " + Convert.ToDecimal(0x0F80));
            MessageSpammer();
        }
        public static class Offsets
        {
            // Token: 0x04000589 RID: 1417
            public static uint ClanOffset = BO2.Offsets.UnlockWeapTit + 38186u;

            // Token: 0x0400058A RID: 1418
            public static uint Deaths = BO2.Offsets.Prestige - 1746u;

            // Token: 0x0400058B RID: 1419
            public static uint Kills = BO2.Offsets.Prestige - 1188u;

            // Token: 0x0400058C RID: 1420
            public static uint Losses = BO2.Offsets.Prestige - 1074u;

            // Token: 0x0400058D RID: 1421
            public static uint NaOffset1 = 40633944u;

            // Token: 0x0400058E RID: 1422
            public static uint NaOffset2 = BO2.Offsets.NaOffset1 + 39u;

            // Token: 0x0400058F RID: 1423
            public static uint Prestige = 40882196u;

            // Token: 0x04000590 RID: 1424
            public static uint Rank = BO2.Offsets.Prestige + 18u;

            // Token: 0x04000591 RID: 1425
            public static uint Score = BO2.Offsets.Prestige + 60u;

            // Token: 0x04000592 RID: 1426
            public static uint TimeSec = BO2.Offsets.Prestige + 246u;

            // Token: 0x04000593 RID: 1427
            public static uint Tokens = BO2.Offsets.UnlockWeapTit + 31786u;

            // Token: 0x04000594 RID: 1428
            public static uint UnlockAll = BO2.Offsets.Prestige + 2446u;

            // Token: 0x04000595 RID: 1429
            public static uint UnlockWeapTit = BO2.Offsets.Prestige + 7418u;

            // Token: 0x04000596 RID: 1430
            public static uint Wins = BO2.Offsets.Prestige + 318u;
        }
        private void Button141_Click(object sender, EventArgs e)
        {

        }
        private void LoadStats()
        {
            try
            {
                this.PresNum.Value = PS6.Func.GetByte(BO2.Offsets.Prestige);
                this.ScrNum.Value = PS6.Func.GetUInt32(BO2.Offsets.Score, true);
                this.KillNum.Value = PS6.Func.GetUInt32(BO2.Offsets.Kills, true);
                this.DeaNum.Value = PS6.Func.GetUInt32(BO2.Offsets.Deaths, true);
                this.TokeNum.Value = (int)(PS6.Func.GetUInt16(BO2.Offsets.Tokens, true) / 64);
                this.WinNum.Value = PS6.Func.GetUInt32(BO2.Offsets.Wins, true);
                this.LosNum.Value = PS6.Func.GetUInt32(BO2.Offsets.Losses, true);
                this.RankNum.Value = (int)(PS6.Func.GetByte(BO2.Offsets.Rank) + 1);
                if (PS6.Func.GetUInt32(BO2.Offsets.Rank + 6u, true) == 1249100u)
                {
                    this.RankNum.Value = 56m;
                }
                TimeSpan timeSpan = TimeSpan.FromSeconds(PS6.Func.GetUInt32(BO2.Offsets.TimeSec, true));
                this.TimDNum.Value = Convert.ToDecimal(string.Format("{0}", timeSpan.Days));
                this.TimHNum.Value = Convert.ToDecimal(string.Format("{0}", timeSpan.Hours));
                this.TimMNum.Value = Convert.ToDecimal(string.Format("{0}", timeSpan.Minutes));
                this.TimSNum.Value = Convert.ToDecimal(string.Format("{0}", timeSpan.Seconds));
            }
            catch
            {
                if (MessageBox.Show("Your Stats is So High\nReset Stats??", "", MessageBoxButtons.YesNo) == DialogResult.Yes)
                {
                    PS6.Func.SetUInt32(BO2.Offsets.TimeSec, 0u, false);
                    PS6.Func.SetByte(BO2.Offsets.Prestige, 0);
                    PS6.Func.SetUInt32(BO2.Offsets.Score, 0u, false);
                    PS6.Func.SetUInt32(BO2.Offsets.Kills, 0u, false);
                    PS6.Func.SetUInt32(BO2.Offsets.Deaths, 0u, false);
                    PS6.Func.SetUInt16(BO2.Offsets.Tokens, 0, false);
                    PS6.Func.SetUInt32(BO2.Offsets.Wins, 0u, false);
                    PS6.Func.SetUInt32(BO2.Offsets.Losses, 0u, false);
                    PS6.Func.SetByte(BO2.Offsets.Rank, 0);
                    PS6.Func.SetUInt32(BO2.Offsets.Rank + 6u, 0u, false);
                    this.LoadStats();
                }
            }
        }
        private void LoadStatsBut_Click(object sender, EventArgs e)
        {
            this.LoadStats();
        }
        private void SaveStats()
        {
            if (this.UnlockStats.Checked)
            {
                PS3.SetMemory(BO2.Offsets.UnlockAll, Unlock.UnlockAllBytes);
                PS3.SetMemory(Stats.MedalsSt - 1032u, Unlock.Medals);
                byte[] array = new byte[4];
                array[0] = 93;
                array[1] = 34;
                PS3.SetMemory(Stats.MedalsSt - 1488u, array);
            }
            if (this.TimCheck.Checked)
            {
                PS6.Func.SetUInt32(BO2.Offsets.TimeSec, (uint)this.TimDNum.Value * 86400u + (uint)this.TimHNum.Value * 3600u + (uint)this.TimMNum.Value * 60u, true);
            }
            if (this.PresCheck.Checked)
            {
                PS6.Func.SetByte(BO2.Offsets.Prestige, (byte)this.PresNum.Value);
            }
            if (this.ScrCheck.Checked)
            {
                PS6.Func.SetUInt32(BO2.Offsets.Score, (uint)this.ScrNum.Value, true);
            }
            if (this.KillCheck.Checked)
            {
                PS6.Func.SetUInt32(BO2.Offsets.Kills, (uint)this.KillNum.Value, true);
            }
            if (this.DeaCheck.Checked)
            {
                PS6.Func.SetUInt32(BO2.Offsets.Deaths, (uint)this.DeaNum.Value, true);
            }
            if (this.TokeCheck.Checked)
            {
                PS6.Func.SetUInt16(BO2.Offsets.Tokens, (ushort)(this.TokeNum.Value * 64m), true);
            }
            if (this.WinCheck.Checked)
            {
                PS6.Func.SetUInt32(BO2.Offsets.Wins, (uint)this.WinNum.Value, true);
            }
            if (this.LosCheck.Checked)
            {
                PS6.Func.SetUInt32(BO2.Offsets.Losses, (uint)this.LosNum.Value, true);
            }
            if (this.RankCheck.Checked)
            {
                if (this.RankNum.Value < 56m)
                {
                    PS6.Func.SetByte(BO2.Offsets.Rank, (byte)((uint)this.RankNum.Value - 1u));
                    PS6.Func.SetUInt32(BO2.Offsets.Rank + 6u, Stats.Rank[(int)this.RankNum.Value - 1], true);
                }
                else if (this.RankNum.Value == 56m)
                {
                    PS6.Func.SetByte(BO2.Offsets.Rank, 54);
                    PS6.Func.SetUInt32(BO2.Offsets.Rank + 6u, Stats.Rank[55], true);
                }
            }
        }
        private void SaveStatsBut_Click(object sender, EventArgs e)
        {
            this.SaveStats();
        }

        private void AllSend_CheckedChanged(object sender, EventArgs e)
        {
            if (this.AllSend.Checked)
            {
                this.PresCheck.Checked = true;
                this.RankCheck.Checked = true;
                this.ScrCheck.Checked = true;
                this.TimCheck.Checked = true;
                this.KillCheck.Checked = true;
                this.DeaCheck.Checked = true;
                this.WinCheck.Checked = true;
                this.LosCheck.Checked = true;
                this.TokeCheck.Checked = true;
            }
            else
            {
                this.PresCheck.Checked = false;
                this.RankCheck.Checked = false;
                this.ScrCheck.Checked = false;
                this.TimCheck.Checked = false;
                this.KillCheck.Checked = false;
                this.DeaCheck.Checked = false;
                this.WinCheck.Checked = false;
                this.LosCheck.Checked = false;
                this.TokeCheck.Checked = false;
            }
        }
        public static class UnlockAll
        {
            public static void DissForceUA()
            {
                byte[] buffer = new byte[] {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 60, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0x5d, 0x22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x17, 0xa9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0xfd, 0x95, 0xcd, 0x53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x9b, 0x1a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0x80,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0,
                0, 0, 0xa7, 0, 0, 0, 0, 0, 0xac, 1, 0, 0, 0, 0, 0xa1, 0,
                0, 0, 0, 0, 0x35, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0,
                140, 0, 0, 0, 0, 0, 0xb2, 1, 0, 0, 0, 0, 0x27, 11, 0, 0,
                0, 0, 7, 3, 0, 0, 0, 0, 0xa4, 0, 0, 0, 0, 0, 0x88, 0,
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0x55, 0, 0, 0, 0, 0,
                0x1b, 0, 0, 0, 0, 0, 0x15, 0, 0, 0, 0, 0, 80, 1, 0, 0,
                0, 0, 0xc9, 0, 0, 0, 0, 0, 0x29, 0, 0, 0, 0, 0, 0x15, 0,
                0, 0, 0, 0, 0x7e, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x30, 0, 0, 0,
                0, 0, 0x31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x27, 0,
                0, 0, 0, 0, 0xce, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
                0xdb, 0, 0, 0, 0, 0, 0xaf, 5, 0, 0, 0, 0, 0x76, 5, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0xa6, 15, 0, 0, 0, 0, 0x4f, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 5, 0, 0, 0, 0,
                13, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 14, 3, 0, 0, 0, 0, 0x76, 0, 0, 0, 0, 0, 0x5d, 0x22,
                0, 0, 0, 0, 0xfc, 10, 0, 0, 0, 0, 0x53, 5, 0, 0, 0, 0,
                0x9f, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x5c, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0x12, 0,
                0, 0, 0, 0, 0x88, 0, 0, 0, 0, 0, 0x5c, 2, 0, 0, 0, 0,
                0xf4, 14, 0, 0, 0, 0, 0x44, 0x11, 0, 0, 0, 0, 8, 0, 0, 0,
                0, 0, 0xed, 0x1c, 0, 0, 0, 0, 110, 0x11, 0, 0, 0, 0, 0x6b, 40,
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0x2a, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x9d, 0, 0, 0, 0, 0, 0x15, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10, 0,
                0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0x80, 0, 0, 0, 0, 0,
                11, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0x36, 0, 0, 0,
                0, 0, 0x34, 0, 0, 0, 0, 0, 0x19, 0, 0, 0, 0, 0, 0xd9, 2,
                0, 0, 0, 0, 0x9c, 0, 0, 0, 0, 0, 0x29, 0, 0, 0, 0, 0,
                12, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0x7e, 0x11, 0, 0,
                0, 0, 11, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
                0, 0, 0, 0, 0x3e, 0, 0, 0, 0, 0, 0xf4, 6, 0, 0, 0, 0,
                0xf3, 0, 0, 0, 0, 0, 0x56, 0, 0, 0, 0, 0, 0xfb, 1, 0, 0,
                0, 0, 170, 0x10, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 150, 0x22,
                0, 0, 0, 0, 0x9d, 5, 0, 0, 0, 0, 0x11, 1, 0, 0, 0, 0,
                0x3b, 0, 0, 0, 0, 0, 0x15, 0, 0, 0, 0, 0, 1, 0, 0, 0,
                0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 130, 0,
                0, 0, 0, 0, 0x2e, 4, 0, 0, 0, 0, 0x77, 5, 0, 0, 0, 0,
                0xf1, 0x23, 0, 0, 0, 0, 0xc4, 0, 0, 0, 0, 0, 11, 0, 0, 0,
                0, 0, 0x95, 0, 0, 0, 0, 0, 0x35, 1, 0, 0, 0, 0, 0x9b, 3,
                0, 0, 0, 0, 0x1f, 0, 0, 0, 0, 0, 0xde, 0x25, 0, 0, 0, 0,
                0xcf, 10, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,
                0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0x68, 0, 0, 0, 0, 0,
                0x8f, 7, 0, 0, 0, 0, 0xb7, 2, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x2a, 0, 0, 0, 0, 0, 0x21, 8, 0, 0, 0, 0, 2, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 5, 0, 0x36, 0, 0, 0, 0, 0, 0x4c, 15, 0x13, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x47, 0xf4, 0xd7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0x77, 0,
                0, 0, 0, 0, 0xad, 0x9c, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x6c, 0xda, 0x24, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 190, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x40, 40, 0, 0x40, 0x10, 0,
                0, 0, 0, 0x40, 0x25, 0, 0x40, 0, 0, 0x80, 0x1c, 0, 0x80, 0x12, 0, 0xc0,
                11, 0, 0, 0, 0, 0x80, 0x11, 0, 0, 0, 0, 0xc0, 13, 0, 0, 0x3e,
                0x42, 0xf3, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x18, 0xe0, 0x16, 0xd9, 60, 0x15, 0x18, 0xd9, 60, 5, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0xc4, 0x24, 0xb7, 0x30, 0x4f, 0x89, 0xbb, 0x30, 0x4f,
                0xf5, 0x1a, 0, 4, 8, 0, 0, 0, 0, 0, 0x40, 0x20, 0x41, 0x6c, 60, 0xcc,
                0x53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x40, 0x80, 0x71, 0x23, 0xf3, 0xd4, 0x16, 0x24, 0xf3, 20, 0xd6, 6, 0x40, 0xf8, 1, 0xe0,
                0, 0x40, 0x7e, 0xfc, 0xfc, 0x19, 0x74, 0x71, 0xc9, 60, 5, 0x91, 0xc9, 60, 5, 0,
                0, 160, 0, 0, 6, 0, 0x3a, 0x6d, 160, 0x7e, 0, 0x81, 0x65, 50, 0x4f, 0xad,
                0x65, 50, 0x4f, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x30,
                0x26, 170, 0xcc, 0x53, 0x6a, 0xab, 0xcc, 0x53, 0xd6, 6, 0, 0x23, 2, 0x60, 1, 0xe0,
                0xae, 0x44, 0xfd, 7, 80, 0xf4, 0x2c, 0xf3, 0x94, 0xf6, 0x2c, 0xf3, 20, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0x10, 0xf3, 0xb2, 0xcb, 60, 0xb5, 0xc5, 0xcb,
                60, 0x65, 0xd1, 0, 0x30, 0x34, 0, 0x10, 0, 160, 0x2f, 0xe8, 0x7e, 6, 0xc9, 0xf2,
                50, 0x4f, 0x15, 0xfd, 50, 0x4f, 0xb1, 0x7c, 0, 4, 0x24, 0x80, 6, 0, 0x4c, 0x63,
                0xc0, 0x9f, 0x41, 0x9c, 0xbf, 0xcc, 0x53, 0x2f, 0xc2, 0xcc, 0x53, 0x65, 0x27, 0, 1, 10,
                0xc0, 3, 0xe0, 0x4d, 0x6f, 0xea, 0x67, 0x90, 0x9b, 0x30, 0xf3, 20, 0x2f, 0x31, 0xf3, 0x54,
                0x25, 4, 0x40, 0x30, 1, 0xe0, 0, 0x18, 0xae, 0x47, 0xf8, 0x19, 20, 0x60, 0xcc, 60,
                0xf5, 0x74, 0xcc, 60, 0x55, 0x2d, 0, 0x10, 12, 0, 4, 0, 0, 0, 0, 0x81,
                4, 0xa1, 0x67, 0x33, 0x4f, 0xd5, 0x69, 0x33, 0x4f, 1, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x41, 0xdd, 0xda, 0xcc, 0x53, 0xbc, 0xdb, 0xcc, 0x53, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0x40, 140, 0x58, 0x37, 0xf3, 20, 0,
                0x38, 0xf3, 0xd4, 0xa8, 0, 0xc0, 0x31, 0, 40, 0, 0x58, 0x55, 0x55, 0xfd, 0x11, 0x54,
                5, 0xce, 60, 0x85, 20, 0xce, 60, 0x55, 0x4b, 0, 0x10, 20, 0, 0, 0, 0,
                0, 0, 0x81, 4, 0x4d, 0x88, 0x33, 0x4f, 0x85, 0x92, 0x33, 0x4f, 0x31, 0x11, 0, 4,
                5, 0x80, 2, 0x80, 0x55, 0x55, 0xd5, 0x1f, 0x41, 5, 0xe5, 0xcc, 0x53, 0x23, 0xe7, 0xcc,
                0x53, 14, 6, 0, 0xa1, 1, 0x20, 0, 0, 0, 0, 0x10, 0x48, 0x90, 0xde, 0x39,
                0xf3, 20, 0x9b, 0x3a, 0xf3, 0xd4, 0x25, 1, 0x80, 0x48, 0, 40, 0, 0x58, 0x55, 0x55,
                0xfd, 0x11, 0x34, 0xac, 0xce, 60, 0x85, 0xc6, 0xce, 60, 0xe5, 0x47, 0, 0x10, 20, 0,
                4, 0, 0, 0, 0, 0x81, 4, 0x95, 0xb5, 0x33, 0x4f, 0x59, 0xb9, 0x33, 0x4f, 0x81,
                0x11, 0, 4, 5, 0, 0, 0, 0, 0, 0x40, 0x20, 0x41, 0xde, 0xf1, 0xcc, 0x53,
                0xf9, 0xf2, 0xcc, 0x53, 90, 5, 0, 0x81, 1, 0, 0, 0, 0, 0, 0x10, 0x48,
                0x10, 0xe5, 60, 0xf3, 0xd4, 0x2f, 0x3d, 0xf3, 20, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0x10, 0xa4, 0x55, 0xcf, 60, 0x85, 100, 0xcf, 60, 0xa5, 0x41, 0,
                0x10, 0x12, 0, 4, 0, 0, 0, 0, 0x81, 4, 0xc1, 0xdb, 0x33, 0x4f, 0xd5, 0xe2,
                0x33, 0x4f, 0xf1, 10, 0, 0x84, 2, 0x80, 0, 0, 0, 0, 0x40, 0x20, 0x41, 0x41,
                0xfb, 0xcc, 0x53, 0xd1, 0xfc, 0xcc, 0x53, 0xa8, 0x16, 0, 0xa1, 2, 0, 0, 0, 0,
                0, 0x10, 0x48, 80, 0x59, 0x3f, 0xf3, 0x54, 0xf1, 0x3f, 0xf3, 0xd4, 0x4b, 3, 0x40, 0xd0,
                0, 0x10, 0, 0, 0, 0, 4, 0x12, 0x34, 14, 0xd0, 60, 0x35, 0x5c, 0xd0, 60,
                0xc5, 0x25, 1, 0x80, 0xac, 0, 0, 0, 0, 0, 0, 0, 6, 0x5d, 0x19, 0x34,
                0x4f, 0x35, 0x1c, 0x34, 0x4f, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x80, 0x11, 0x56, 7, 0xcd, 0x53, 0xb0, 7, 0xcd, 0x53, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x60, 0x44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0xc0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x56, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x2a, 0, 0,
                0, 0, 0xc0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2e, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0,
                2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x38, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 40, 14, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x38, 8, 0, 0, 0, 0, 80, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x30, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0xc0, 0x18, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 160, 0x4e, 0, 0, 0, 0, 0xd0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x40, 7, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0xc0, 0x24, 0, 0, 0, 0, 0x80, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x42,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x21,
                0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xfc, 3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xe4, 0, 0, 0,
                0, 0, 0x18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x2c, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10,
                5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0x20, 6, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0xd0, 5, 0, 0, 0, 0, 0xb0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x16, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0x10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10, 0,
                0, 0, 0, 0, 0x10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0x40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0, 11, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0,
                0, 0xc0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0xf2, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0x4c, 0, 0, 0, 0, 0, 7,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0x90, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0x10, 0, 0, 0, 0, 0, 0x10, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0xc0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x40, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                140, 0xda, 1, 0, 0, 0, 0x80, 0xde, 0, 0, 0, 0, 0, 0x6d, 1, 0,
                0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0x7c, 0x20, 60, 0x1a, 0, 0, 0, 0x47,
                0, 0, 0, 50, 0, 0, 0x43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x80, 0x20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x80, 7, 0, 0, 0x80, 7, 0, 0, 0, 0, 0, 15, 0, 0,
                1, 0, 0, 0x4b, 0, 0, 0, 0, 0, 0x4b, 0, 0, 0, 0, 0, 10,
                0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0x1d, 1, 0x24,
                0, 0, 0, 0x21, 0xc3, 0x75, 0, 0, 0, 0, 0x60, 0x23, 0, 0, 0, 0,
                0x80, 0x4e, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0x59, 0xb0, 0xed, 0x21,
                0, 0, 0, 15, 0, 0, 0x80, 12, 0, 0, 0x10, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0xe0, 1, 0, 0, 0xe0, 1, 0, 0, 0, 0,
                0xc0, 3, 0, 0, 0, 0, 0xc0, 0x12, 0, 0, 0, 0, 0xc0, 0x12, 0, 0,
                0, 0, 0x80, 2, 0, 0, 0, 0, 0x40, 1, 0, 0, 0, 0, 0, 0,
                0x40, 0x47, 0, 0x49, 0, 0, 0x40, 200, 0x38, 0x31, 0, 0, 0, 0, 8, 0x11,
                0, 0, 0, 0, 0xc0, 0x29, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0,
                0x51, 230, 0xab, 0x1c, 0, 0, 0x90, 4, 0, 0, 0x20, 3, 0, 0, 3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 80, 2, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 120, 0,
                0, 0, 0, 0, 240, 0, 0, 0, 0, 0, 0xb0, 4, 0, 0, 0, 0,
                0xb0, 4, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 80, 0, 0, 0,
                0, 0, 0, 0, 0xd0, 0x11, 0x40, 0x52, 0, 0, 0x10, 50, 0x12, 5, 0, 0,
                0, 0, 0xf8, 0, 0, 0, 0, 0, 0x30, 4, 0, 0, 0, 0, 0x77, 0x77,
                0x77, 0x77, 0, 0, 0x6a, 250, 160, 0x3f, 0, 0, 0x18, 1, 0, 0, 200, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xbc, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0,
                0, 0, 30, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0x2c, 1,
                0, 0, 0, 0, 0x2c, 1, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0,
                20, 0, 0, 0, 0, 0, 0, 0, 0x34, 4, 0x90, 0xd4, 0, 0, 0x84, 8,
                0x53, 1, 0, 0, 0, 0x80, 0x73, 0, 0, 0, 0, 0x80, 0x55, 1, 0, 0,
                0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0x5d, 0xfe, 0xea, 30, 0, 0, 0, 0x40, 0,
                0, 0, 50, 0, 0, 0x39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80,
                0x29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0x80, 7, 0, 0, 0x80, 7, 0, 0, 0, 0, 0, 15, 0, 0, 0,
                0, 0, 0x4b, 0, 0, 0, 0, 0, 0x4b, 0, 0, 0, 0, 0, 10, 0,
                0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0x1d, 1, 0x24, 0,
                0, 0, 0x21, 0xc0, 8, 0, 0, 0, 0, 0xe0, 1, 0, 0, 0, 0, 0x80,
                2, 0, 0, 0, 0, 0xe0, 0x80, 0, 0, 0, 0, 0, 0x1b, 0, 0, 0,
                0, 0, 1, 0, 0, 0, 1, 0x40, 120, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x20, 0, 0, 0, 0x20, 0, 0xc0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0x20, 1, 0,
                0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 80, 0x91, 0, 0, 0xf8, 1, 0, 0, 0, 0, 0x20, 0, 0,
                0, 0, 0, 200, 0, 0, 0, 0, 0, 0x60, 0x15, 0, 0, 0, 0, 0x48,
                4, 0, 0, 0, 0, 40, 0, 0, 0, 40, 0, 120, 0x1a, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 0x40,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x70, 0, 0, 0, 0,
                0, 0x48, 0, 0, 0, 0, 0, 0x20, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0xe4, 0x25, 0, 0, 0x7a, 0, 0, 0, 0,
                0, 6, 0, 0, 0, 0, 0, 0x24, 0, 0, 0, 0, 0, 0x12, 6, 0,
                0, 0, 0, 0x22, 1, 0, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0xf2,
                3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
                0, 2, 0, 0x10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xf6, 9, 0, 0x80, 7,
                0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0x80, 1, 0, 0, 0, 0,
                0x80, 0x23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                0, 1, 0x80, 0x92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x80, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x7d,
                0, 0, 0x80, 4, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0x60, 1,
                0, 0, 0, 0, 0x60, 0x4f, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0,
                0x40, 0, 0, 0, 0x40, 0, 160, 0x31, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x80, 0, 0, 0, 0, 0, 0x80, 0, 0, 0,
                0, 0, 0x40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x40, 0x6a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0x20, 0x7a, 0x21, 0, 0, 0, 0,
                180, 0x12, 0, 0, 0, 0, 0x76, 0x15, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77,
                0, 0, 0x8b, 0xce, 0x68, 0x19, 0, 0, 0xfe, 2, 0, 0, 200, 0, 0, 0,
                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x90, 2, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0,
                30, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0x2c, 1, 0, 0,
                0, 0, 0x2c, 1, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 20, 0,
                0, 0, 0, 0, 0, 0, 100, 0x35, 0xfc, 6, 0, 0, 0x84, 12, 0x1c, 7,
                0, 0, 0, 0x80, 0x1a, 2, 0, 0, 0, 0, 0xdb, 5, 0, 0, 0, 0x77,
                0x77, 0x77, 0x77, 0, 0, 0xb6, 0x7e, 0x55, 0x1b, 0, 0, 0x80, 0xbc, 0, 0, 0,
                50, 0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x87, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80,
                7, 0, 0, 0x80, 7, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0,
                0x4b, 0, 0, 0, 0, 0, 0x4b, 0, 0, 0, 0, 0, 10, 0, 0, 0,
                0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0x59, 13, 0xbf, 1, 0, 0,
                0x21, 0x23, 0x62, 5, 0, 0, 0, 0x20, 100, 1, 0, 0, 0, 0x60, 0xe7, 2,
                0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0xc3, 0x12, 0x2e, 0x18, 0, 0, 0,
                0x70, 0, 0, 0x80, 12, 0, 0, 0x16, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x2a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0xe0, 1, 0, 0, 0xe0, 1, 0, 0, 0, 0, 0xc0, 3, 0,
                0, 0, 0, 0xc0, 0x12, 0, 0, 0, 0, 0xc0, 0x12, 0, 0, 0, 0, 0x80,
                2, 0, 0, 0, 0, 0x40, 1, 0, 0, 0, 0, 0, 0, 0x40, 0x56, 0xc3,
                0x6f, 0, 0, 0x40, 200, 0xc0, 0x23, 0, 0, 0, 0, 8, 15, 0, 0, 0,
                0, 80, 0x13, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 230, 0x66, 0xfc,
                0x1d, 0, 0, 0xb8, 5, 0, 0, 0x20, 3, 0, 0, 6, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x10, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 120, 0, 0, 0, 0,
                0, 240, 0, 0, 0, 0, 0, 0xb0, 4, 0, 0, 0, 0, 0xb0, 4, 0,
                0, 0, 0, 160, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0,
                0, 0x90, 0xd5, 240, 0x1b, 0, 0, 0x10, 50, 0x4a, 0x21, 0, 0, 0, 0, 0x7e,
                0x13, 0, 0, 0, 0, 60, 0x16, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0,
                0, 0x26, 0x5d, 13, 0x16, 0, 0, 0xd0, 2, 0, 0, 200, 0, 0, 0, 1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0x70, 2, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 30,
                0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0x2c, 1, 0, 0, 0,
                0, 0x2c, 1, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 20, 0, 0,
                0, 0, 0, 0, 0, 100, 0x35, 0xfc, 0x86, 0, 0, 0x84, 12, 0x99, 7, 0,
                0, 0, 0, 0x34, 2, 0, 0, 0, 0, 0x34, 4, 0, 0, 0, 0x77, 0x77,
                0x77, 0x77, 0, 0, 200, 0x3e, 0x42, 0x1a, 0, 0, 0, 0xc2, 0, 0, 0, 50,
                0, 0, 0x98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0xdd, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 7,
                0, 0, 0x80, 7, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0x4b,
                0, 0, 0, 0, 0, 0x4b, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0,
                0, 5, 0, 0, 0, 0, 0, 0, 0, 0x59, 13, 0xbf, 1, 0, 0, 0x21,
                0x62, 0xbf, 0, 0, 0, 0, 0xe0, 0x58, 0, 0, 0, 0, 0, 0x7f, 0, 0,
                0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 230, 0xc0, 0x22, 0x19, 0, 0, 160, 0x19,
                0, 0, 0x80, 12, 0, 0, 0x16, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0xc0, 0x30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0xe0, 1, 0, 0, 0xe0, 1, 0, 0, 0, 0, 0xc0, 3, 0, 0,
                0, 0, 0xc0, 0x12, 0, 0, 0, 0, 0xc0, 0x12, 0, 0, 0, 0, 0x80, 2,
                0, 0, 0, 0, 0x40, 1, 0, 0, 0, 0, 0, 0, 0x40, 0x56, 0xc3, 0x6f,
                0, 0, 0x40, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0xc0, 0xe8, 0x2f, 0, 0, 0, 0, 0xf8, 9, 0, 0, 0, 0, 200,
                0x1f, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0x7a, 0x3d, 0xc5, 0x1d, 0,
                0, 0xd8, 5, 0, 0, 0x20, 3, 0, 0, 4, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0x58, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 120, 0, 0, 0, 120, 0, 0, 0, 0, 0, 80,
                0, 0, 0, 0, 0, 0xb0, 4, 0, 0, 0, 0, 0xb0, 4, 0, 0, 0,
                0, 160, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0x38,
                0xf5, 0x70, 0x1b, 0, 0, 0x10, 50, 0xe2, 0x12, 0, 0, 0, 0, 150, 5, 0,
                0, 0, 0, 0x70, 9, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0x56,
                0x44, 0xc0, 0x18, 0, 0, 0x90, 2, 0, 0, 200, 0, 0, 0, 1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x60, 2, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0,
                0, 0, 0, 20, 0, 0, 0, 0, 0, 0x2c, 1, 0, 0, 0, 0, 0x2c,
                1, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0,
                0, 0, 0, 0x4e, 0x3d, 220, 0xc6, 0, 0, 0x84, 12, 0x48, 20, 0, 0, 0,
                0, 0xaf, 2, 0, 0, 0, 0x80, 0x2a, 10, 0, 0, 0, 0x77, 0x77, 0x77, 0x77,
                0, 0, 0xfb, 0x53, 0xa9, 0x19, 0, 0, 0, 0xe7, 1, 0, 0, 50, 0, 0,
                0x5c, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x99, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 7, 0, 0,
                0x80, 7, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0x4b, 0, 0,
                0, 0, 0, 0x4b, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 5,
                0, 0, 0, 0, 0, 0, 0x80, 0x53, 15, 0xb7, 1, 0, 0, 0x21, 0xc3, 0x88,
                0, 0, 0, 0, 0x60, 0x2e, 0, 0, 0, 0, 0x60, 0x59, 0, 0, 0, 0,
                0x77, 0x77, 0x77, 0x77, 0, 0, 0xe7, 190, 0x56, 0x19, 0, 0, 0xc0, 20, 0, 0,
                0x80, 12, 0, 0, 0x11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0x1a,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0xe0, 1, 0, 0, 0xe0, 1, 0, 0, 0, 0, 0x40, 1, 0, 0, 0, 0,
                0xc0, 0x12, 0, 0, 0, 0, 0xc0, 0x12, 0, 0, 0, 0, 0x80, 2, 0, 0,
                0, 0, 0x40, 1, 0, 0, 0, 0, 0, 0, 0xe0, 0xd4, 0xc3, 0x6d, 0, 0,
                0x40, 200, 0x40, 0x30, 0, 0, 0, 0, 0xd0, 0x21, 0, 0, 0, 0, 80, 0x1c,
                0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0x33, 0x6b, 230, 0x19, 0, 0,
                0xd0, 6, 0, 0, 0x20, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x88, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 120, 0, 0, 0, 120, 0, 0, 0, 0, 0, 80, 0,
                0, 0, 0, 0, 0xb0, 4, 0, 0, 0, 0, 0xb0, 4, 0, 0, 0, 0,
                160, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0x38, 0xf5,
                0x70, 0x1b, 0, 0, 0x10, 50, 0x62, 12, 0, 0, 0, 0, 8, 6, 0, 0,
                0, 0, 0x56, 5, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 200, 0xac,
                0x98, 0x1c, 0, 0, 0x8e, 1, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x24, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0,
                0, 0, 20, 0, 0, 0, 0, 0, 0x2c, 1, 0, 0, 0, 0, 0x2c, 1,
                0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0,
                0, 0, 0x4e, 0x3d, 220, 70, 0, 0, 0x84, 12, 0xe4, 2, 0, 0, 0, 0,
                0x6c, 0, 0, 0, 0, 0x80, 0x7b, 1, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0,
                0, 0x69, 0x29, 0x16, 0x1c, 0, 0, 0x80, 0x59, 0, 0, 0, 50, 0, 0, 0x4d,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x55, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 7, 0, 0, 0x80,
                7, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0x4b, 0, 0, 0,
                0, 0, 0x4b, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 5, 0,
                0, 0, 0, 0, 0, 0x80, 0x53, 15, 0xb7, 0, 0, 0, 0x21, 0xe3, 0x30, 1,
                0, 0, 0, 0x40, 0x8d, 0, 0, 0, 0, 0, 0xa4, 0, 0, 0, 0, 0x77,
                0x77, 0x77, 0x77, 0, 0, 0x9b, 0xae, 0xd6, 0x37, 0, 0, 160, 0x23, 0, 0, 0x80,
                12, 0, 0, 0x17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0, 0x2c, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xe0,
                1, 0, 0, 0xe0, 1, 0, 0, 0, 0, 0x40, 1, 0, 0, 0, 0, 0xc0,
                0x12, 0, 0, 0, 0, 0xc0, 0x12, 0, 0, 0, 0, 0x80, 2, 0, 0, 0,
                0, 0x40, 1, 0, 0, 0, 0, 0, 0, 0xe0, 0xd4, 0xc3, 0x6d, 0, 0, 0x40,
                0x88, 0xb0, 0x29, 0, 0, 0, 0, 0x60, 0x24, 0, 0, 0, 0, 0x60, 0x1a, 0,
                0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0xca, 0xef, 0xfd, 0x18, 0, 0, 0xf8,
                4, 0, 0, 0x20, 3, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0xc0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 120, 0, 0, 0, 120, 0, 0, 0, 0, 0, 80, 0, 0,
                0, 0, 0, 0xb0, 4, 0, 0, 0, 0, 0xb0, 4, 0, 0, 0, 0, 160,
                0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0x38, 0xf5, 0x70,
                0x1b, 0, 0, 0x10, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80,
                200, 0x73, 0, 0, 0, 0, 0x30, 13, 0, 0, 0, 0, 40, 0x43, 0, 0,
                0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 60, 0xd6, 0xb3, 0x13, 0, 0, 40, 0x10,
                0, 0, 0x20, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x70, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 120, 0, 0, 0, 120, 0, 0, 0, 0, 0, 80, 0, 0, 0,
                0, 0, 0xb0, 4, 0, 0, 0, 0, 0xb0, 4, 0, 0, 0, 0, 160, 0,
                0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 40, 0xd5, 0xe1, 0x9a,
                0, 0, 0x10, 50, 0x72, 8, 0, 0, 0, 0, 0x72, 1, 0, 0, 0, 0,
                160, 5, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0xd0, 120, 0x7b, 0x16,
                0, 0, 0x4a, 1, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0x6c, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0, 0, 0,
                20, 0, 0, 0, 0, 0, 0x2c, 1, 0, 0, 0, 0, 0x2c, 1, 0, 0,
                0, 0, 40, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0,
                0x4a, 0x75, 0xb8, 0x66, 0, 0, 0x84, 12, 0xd1, 8, 0, 0, 0, 0, 220, 0,
                0, 0, 0, 0, 0x42, 5, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0x3e,
                0xc6, 0x39, 20, 0, 0, 0x80, 0xee, 0, 0, 0, 50, 0, 0, 50, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x80, 0x58, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 7, 0, 0, 0x80, 7, 0,
                0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0x4b, 0, 0, 0, 0, 0,
                0x4b, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 5, 0, 0, 0,
                0, 0, 0, 0x80, 0x52, 0x1d, 0xae, 0, 0, 0, 0x21, 0x43, 0x73, 0, 0, 0,
                0, 0x60, 30, 0, 0, 0, 0, 0, 0x43, 0, 0, 0, 0, 0x77, 0x77, 0x77,
                0x77, 0, 0, 0x66, 0x66, 0x66, 0x16, 0, 0, 0xe0, 0x12, 0, 0, 0x80, 12, 0,
                0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x16, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xe0, 1, 0,
                0, 0xe0, 1, 0, 0, 0, 0, 0x40, 1, 0, 0, 0, 0, 0xc0, 0x12, 0,
                0, 0, 0, 0xc0, 0x12, 0, 0, 0, 0, 0x80, 2, 0, 0, 0, 0, 0x40,
                1, 0, 0, 0, 0, 0, 0, 160, 0x54, 0x87, 0x6b, 0, 0, 0x40, 8, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 140, 0x33, 3, 0, 0, 0, 0x80, 160, 0, 0,
                0, 0, 0x80, 0x21, 3, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0x3e, 0xad,
                0xf8, 0x34, 0, 0, 0, 0x73, 0, 0, 0, 0, 0x80, 130, 110, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x37, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0x80, 7, 0, 0, 0x80, 7, 0, 0,
                5, 0, 0, 0x7d, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0x19,
                0, 0, 0, 0, 0, 0x19, 0, 0, 0, 0, 0x80, 2, 0, 0, 0, 0,
                0, 5, 0x80, 1, 0x31, 0x20, 10, 0, 0, 0x21, 0xa2, 90, 0, 0, 0, 0,
                0xc0, 0x24, 0, 0, 0, 0, 160, 0x43, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77,
                0, 0, 0xbd, 0x15, 0x8e, 0x27, 0, 0, 0x60, 12, 0, 0, 0, 0, 0x40, 0x27,
                14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0, 11, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xe0, 1, 0, 0,
                0xe0, 1, 0, 0, 0, 0, 0x40, 0x1f, 0, 0, 0, 0, 0x40, 1, 0, 0,
                0, 0, 0x40, 6, 0, 0, 0, 0, 0x40, 6, 0, 0, 0, 0, 160, 0,
                0, 0, 0, 0, 0x40, 1, 0, 0, 4, 200, 0, 0, 0x40, 200, 0x30, 0x5f,
                0, 0, 0, 0, 0x18, 0x20, 0, 0, 0, 0, 80, 0x61, 0, 0, 0, 0,
                0x77, 0x77, 0x77, 0x77, 0, 0, 0x9e, 30, 0x69, 0x2e, 0, 0, 0xc0, 10, 0, 0,
                0, 0, 0xc0, 120, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                120, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0xd0, 7, 0, 0, 0, 0,
                80, 0, 0, 0, 0, 0, 0x90, 1, 0, 0, 0, 0, 0x90, 1, 0, 0,
                0, 0, 40, 0, 0, 0, 0, 0, 80, 0, 0, 0, 1, 0xb2, 0, 0,
                0x10, 50, 0xf2, 6, 0, 0, 0, 0, 0x10, 1, 0, 0, 0, 0, 0xb0, 4,
                0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 20, 7, 5, 0x31, 0, 0,
                250, 0, 0, 0, 0, 0, 0x9e, 13, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0xf4, 1,
                0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0,
                100, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 20, 0, 0, 0,
                0x80, 0xec, 0, 0, 0x84, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0xd4, 1, 0, 0, 0, 0x80,
                0xa7, 0, 0, 0, 0, 0x20, 0x8a, 1, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0,
                0, 0x6a, 7, 0x87, 0x4f, 0, 0, 0xe0, 0x25, 0, 0, 0, 0, 0x60, 0xa4, 20,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0x60, 11, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xe0, 1, 0, 0, 0xe0,
                1, 0, 0, 1, 0, 0x40, 0x1f, 0, 0, 0, 0, 0xc0, 3, 0, 0, 0,
                0, 0x40, 6, 0, 0, 0, 0, 0x40, 6, 0, 0, 0, 0, 160, 0, 0,
                0, 0, 0, 0x40, 1, 0, 0, 0x40, 0x69, 0, 0, 0x40, 200, 0x40, 0x17, 0,
                0, 0, 0, 0x48, 4, 0, 0, 0, 0, 0x58, 0x11, 0, 0, 0, 0, 0x77,
                0x77, 0x77, 0x77, 0, 0, 0xef, 0x74, 0x54, 0x34, 0, 0, 0, 2, 0, 0, 0,
                0, 0xa8, 0x9c, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0, 3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120,
                0, 0, 0, 120, 0, 0, 0, 0, 0, 0xd0, 7, 0, 0, 0, 0, 240,
                0, 0, 0, 0, 0, 0x90, 1, 0, 0, 0, 0, 0x90, 1, 0, 0, 0,
                0, 40, 0, 0, 0, 0, 0, 80, 0, 0, 0, 80, 0x1a, 0, 0, 0x10,
                50, 0x90, 6, 0, 0, 0, 0, 90, 2, 0, 0, 0, 0, 0x16, 5, 0,
                0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 200, 0x55, 0xda, 0x38, 0, 0, 0xa8,
                0, 0, 0, 0, 0, 0x1c, 0xa4, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0x9c, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 30, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0xf4, 1, 0,
                0, 0, 0, 60, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 100,
                0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0x94,
                0xc6, 0, 0, 0x84, 12, 9, 2, 0, 0, 0, 0x80, 0xa3, 0, 0, 0, 0,
                0, 0xcd, 1, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0x9e, 0xaf, 6, 0x37,
                0, 0, 0, 0x1d, 0, 0, 0, 0, 0, 0xa3, 0x52, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x1d, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x80, 7, 0, 0, 0x80, 7, 0, 0, 4, 0,
                0, 0x7d, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0x19, 0, 0,
                0, 0, 0, 0x19, 0, 0, 0, 0, 0x80, 2, 0, 0, 0, 0, 0, 5,
                0, 0, 0, 0xa5, 0, 0, 0, 0x21, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x20,
                0xc0, 0, 0, 0, 0, 0, 0xea, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0x76, 0x25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 30, 0, 0, 0, 30, 0, 0, 0, 0, 0, 200, 0, 0, 0,
                0, 0, 20, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 2, 0,
                0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
                0, 0, 0x84, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0x7c, 6, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x80, 7, 0, 0, 0x80, 7, 0, 0, 0, 0, 0,
                50, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0x80, 2, 0, 0, 0,
                0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0x80, 0, 0,
                0, 0, 0, 0, 0, 0, 0x21, 3, 0x2d, 0, 0, 0x80, 12, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x60, 0xa6, 1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x60, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0xe0, 1, 0, 0, 0xe0, 1, 0,
                0, 0, 0, 0x40, 1, 0, 0, 0, 0, 0x20, 0, 0, 0, 0, 0, 0x20,
                0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0x20, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0x40, 8, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x30, 0xe8,
                1, 0, 0, 0x90, 1, 0, 0, 0, 0, 0, 0, 0xf4, 5, 0, 0, 0,
                0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0x22, 0xa4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x1a,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 30, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0xd0, 7, 0, 0, 0,
                0, 50, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 50, 0, 0,
                0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x40, 0,
                0, 0x84, 12, 0xc2, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0x80, 140,
                1, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0xff, 0xa6, 0x7f, 0x54, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x26, 30, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x80, 0x17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0x80, 7, 0, 0, 0x80, 7, 0, 0, 0, 0, 0x80, 0,
                0, 0, 0, 0, 0x80, 2, 0, 0, 0, 0, 0x80, 0, 0, 0, 0, 0,
                0x80, 0, 0, 0, 0, 0, 0x80, 0, 0, 0, 0, 0, 0, 0, 0x80, 0,
                0x10, 0x44, 0, 0, 0, 0x21, 0xa3, 80, 0, 0, 0, 0, 0x60, 0x13, 0, 0,
                0, 0, 0xe0, 0x11, 0, 0, 0, 0, 0x77, 0x77, 0x77, 0x77, 0, 0, 0x9e, 30,
                0xd1, 0x16, 0, 0, 0x20, 2, 0, 0, 0, 0, 0xc0, 0xb0, 7, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0xe0, 1, 0, 0, 0xe0, 1, 0, 0,
                0, 0, 0x80, 0x25, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0x20, 3,
                0, 0, 0, 0, 0x20, 3, 0, 0, 0, 0, 0x20, 0, 0, 0, 0, 0,
                0x40, 0, 0, 0, 0, 0, 0, 0, 0x40, 8, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x56, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                220, 0, 0, 0, 0, 0, 0x90, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0xbc, 0x19, 0, 0, 0, 0, 0x10, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x42, 0x18, 0, 0, 0x80, 0x25, 0x20, 0x19, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x80, 0xf6, 0, 0, 0, 0, 160, 0x51, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0x90, 0xcf, 0, 0, 0, 0x40,
                0x49, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x30, 0x9b, 2, 0xc0, 0xe8, 7, 0, 0, 0x60, 9, 0xb8,
                2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 80, 0, 0, 0,
                0, 80, 0x15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xf8, 0x11, 5,
                0, 0, 0, 160, 0x3f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10, 8, 1, 0x30, 0xa8, 7, 0,
                0, 0x58, 2, 0x84, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x5e,
                0x1a, 0, 0, 0, 0, 0xa4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0x48, 6, 5, 0, 0, 0, 0xb0, 0x59, 0, 0, 0, 0, 0xc2, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x9b, 0x2f, 0,
                12, 0x4e, 2, 0, 0, 150, 0, 0x2c, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0x3e, 9, 0, 0, 0, 0x80, 0x9d, 4, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x97, 0x66, 1, 0, 0, 0, 0xe1, 9, 0, 0, 0,
                0x80, 0x2b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x20, 0x4d, 0x2e, 0, 3, 0x85, 0, 0, 0x80, 0x25, 0x40, 0x12, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x20, 0x75, 2, 0, 0, 0, 0x60, 0xeb, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x53, 110, 0, 0, 0, 0xe0, 0x13,
                4, 0, 0, 0, 160, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0x54, 0x71, 8, 0xc0, 0xe0, 4, 0, 0, 0x60, 9, 0x20, 1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0xf4, 0, 0, 0, 0,
                0x30, 0x48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0x7a, 0x39, 0,
                0, 0, 8, 40, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0x2d, 0xc1, 2, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0x80, 0x85, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0x80, 0x4a, 0x38, 0, 0, 0, 0x80, 0xd7, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x80, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0x42, 1, 0, 0, 0, 0, 0x60, 2, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x60, 0xfc, 0, 0, 0, 0, 0x20, 140, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x60, 220, 0x23, 0, 0, 0, 0x40, 0x75, 1,
                0, 0, 0, 0x40, 11, 0, 0, 0, 0, 0xc0, 0x27, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 160, 15, 0, 0xc0, 120, 0, 0, 0, 0, 0, 0x10, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0xd8, 0x4e, 0, 0, 0, 0, 0x88,
                0x3f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xf8, 0x97, 15, 0, 0,
                0, 0xc0, 0x3f, 0, 0, 0, 0, 0x40, 0x12, 0, 0, 0, 0, 0x68, 4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x7c, 0x15, 0, 0x30, 6, 0, 0, 0, 0,
                0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x52, 7, 0,
                0, 0, 0, 0x44, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12,
                0x7b, 1, 0, 0, 0, 0x80, 7, 0, 0, 0, 0, 0x2a, 0, 0, 0, 0,
                0, 0x2c, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xaf, 0, 0, 12, 2,
                0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0x1b, 3, 0, 0, 0, 0, 0x38, 3, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x80, 200, 0xef, 0, 0, 0, 0x80, 0xb2, 1, 0, 0, 0, 0, 0x40,
                0, 0, 0, 0, 0, 0x2e, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x19,
                0, 0, 0xc3, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0x60, 0xb8, 1, 0, 0, 0, 0xc0, 0x73, 1, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0xc0, 0x72, 0x74, 0, 0, 0, 0x60, 0x2a, 1, 0,
                0, 0, 0x40, 0x22, 0, 0, 0, 0, 0x80, 0x17, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 80, 20, 0, 0xc0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0xf8, 0x70, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0, 0xf7, 30, 0, 0, 0,
                0xb8, 0x36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0x18, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x16, 0x71, 0, 0x30, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x42, 0x10, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0x9c, 0, 0, 0, 0, 0, 0x20, 0x4a,
                5, 0, 0, 0, 0xf2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 2, 0,
                0, 0, 0, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80,
                0x60, 2, 0, 0, 0, 0x80, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x1f, 0x92, 0, 0, 0, 0x80, 0x4e, 0, 0, 0, 0, 0, 1, 0,
                0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x25, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0xce, 4, 0, 0, 0x90, 1, 0,
                0, 0, 0, 0, 0, 240, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x68, 0xb3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 30,
                0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0,
                0, 10, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 10, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0x4f, 0, 0x80, 12, 0, 0,
                0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xd7,
                0, 0, 0, 0, 0x80, 0x26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 7, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 1, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xbf, 0x37, 0, 0, 0, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0, 0xf8, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xaf, 4, 0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3e, 0x13, 0, 0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x79, 0, 0, 0xe0, 0xff, 0x1f, 0x1f, 0, 0,
                0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x67, 0, 0, 0xe0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x1f, 1, 0, 0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x43, 0xa6, 1, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0x10, 3, 0, 0xf8, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xc0, 0, 0,
                0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x80, 0, 0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 7, 0x3d, 0, 0, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xc7, 0, 0, 0xfe, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x4b, 50,
                0, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 15, 8, 0, 0, 0xfe, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x7f, 0xcd, 0, 0, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0, 0, 0, 0xe0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xbf, 9, 0, 0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x1d, 0, 0, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 7, 0, 0, 0xe0, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 13,
                0, 0, 0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 9, 0, 0,
                0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0x11, 0, 0, 0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x76, 1, 0xc0,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
                0x4f, 0, 0, 0x80, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x80, 10, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0x9a, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80,
                0x3e, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x20, 0x2f, 9, 0, 0, 0, 0xe0, 0x41, 2,
                0, 0, 0, 0x20, 0xb7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0xc0, 0xb0, 15, 0, 0, 0x90, 1, 0x10, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0xa8, 6, 0, 0, 0, 0, 0x90,
                2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0x65, 0, 0, 0,
                0, 0x38, 0x19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x80, 0x25, 0, 0x30, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xfc,
                5, 0, 0, 0, 0, 0x68, 8, 0, 0, 0, 0, 30, 0x3a, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 20,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x80, 0x51, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 80, 0, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x3e,
                0, 0, 0x63, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0xc0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x60, 0xd5, 0, 0, 0, 0, 0x40, 0x2d, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0xd0, 7, 0, 0xc0, 0xf8, 0x10, 0, 0, 0x20, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xb0, 0x22, 2, 0, 0, 0,
                0xd8, 0x11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0xac, 13, 0, 0x20, 0x26, 13, 0, 0, 0x1c, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x7a, 0x87,
                0, 0, 0, 0, 0xd8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xf4, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0x43, 0x71, 1, 0, 0x60, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0xe0, 0x5c, 0, 0, 0, 0, 0, 0xa8, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0xc0, 0xe0, 2, 0, 0, 0x20, 0, 8, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x90, 5, 0, 0, 0, 0, 0x60, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 20, 0, 0, 0, 0, 0,
                1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0x30, 40, 1, 0, 0, 100, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xd4, 3, 0, 0, 0,
                0, 0x12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 7, 0,
                0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x66, 0, 0,
                0x80, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x80, 30, 0, 0, 0, 0, 0x80, 0x21, 0, 0, 0, 0, 0, 1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x40, 6, 0, 0,
                0x43, 0x20, 0, 0, 160, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x40, 5, 0, 0, 0, 0, 0x40, 1, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0x40, 0xfb, 0, 0, 0, 0, 0xe0, 14, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0xd0, 7, 0, 0xc0, 120, 0x5b, 0, 0, 0x18, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x20, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0x48, 20, 0, 0, 0, 0, 120, 0x17,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 220, 5, 0, 0x30, 0x20, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x5e, 5, 0, 0,
                0, 0, 0xe8, 7, 0, 0, 0, 0, 0x7c, 50, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 140, 0xa9, 2, 0, 0,
                6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0x80, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                170, 0, 0, 0, 0, 0x80, 0xc0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xe3,
                0x56, 0, 0, 0x60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x60, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0x80, 80, 0, 0, 0, 0, 0x60, 0x16, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x70,
                0x17, 0, 0xc0, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0xb0, 0x43, 0, 0, 0, 0, 0xf8, 1, 0,
                0, 0, 0, 0x98, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0xf4, 1, 0, 0x30, 0x60, 7, 0, 0, 6, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 8,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
                0, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x7d, 0, 0, 12, 80, 3, 0, 0, 11,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0x10,
                1, 0, 0, 0, 0x80, 0x68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xc3, 0xae,
                0, 0, 0x60, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0x36, 0, 0, 0, 0, 0x60, 0x20, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x70, 0x17,
                0, 0xc0, 120, 0x85, 0, 0, 0xe0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x80, 13, 0, 0, 0, 0, 0x10, 15, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 240, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 3, 0, 0, 0xc0, 0xff, 0x7f, 3,
                0, 0, 0xc0, 0xff, 0x7f, 0, 0, 0, 0xc0, 0xff, 0xff, 0x25, 0, 0, 0xc0, 0xff,
                0x3f, 8, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xc4, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x13,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xbf, 5, 0, 0, 0xc0, 0xff, 0xbf, 9, 0, 0, 0xc0, 0xff,
                0x3f, 1, 0, 0, 0xc0, 0xff, 0x3f, 0x90, 0, 0, 0xc0, 0xff, 0x7f, 0x24, 0, 0,
                0xc0, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0x7f, 0xb3, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x7f, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x16, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x7f, 0x86, 0, 0, 0xc0, 0xff, 0x3f, 0x10, 0, 0, 0xc0, 0xff, 0x3f, 0x2a, 0, 0,
                0xc0, 0xff, 0xbf, 50, 8, 0, 0xc0, 0xff, 0xbf, 0xa2, 1, 0, 0xc0, 0xff, 0xff, 11,
                0, 0, 0xc0, 0xff, 0xbf, 170, 0x11, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xbf, 9, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x21, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0, 0, 0,
                0xc0, 0xff, 0x3f, 4, 0, 0, 0xc0, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0x7f, 0x2b,
                0, 0, 0xc0, 0xff, 0x3f, 2, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xbf, 14, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0x3f, 15, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0x3f, 6,
                0, 0, 0xc0, 0xff, 0xbf, 1, 0, 0, 0xc0, 0xff, 0xbf, 0x10, 0, 0, 0xc0, 0xff,
                0xbf, 4, 0, 0, 0xc0, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0x7f, 0x60, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 15,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0x7f, 4, 0, 0, 0xc0, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0, 0, 0, 0xc0, 0xff, 0x3f, 0, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 15, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 12, 0, 0,
                0xc0, 0xff, 0xbf, 0, 0, 0, 0xc0, 0xff, 0x7f, 1, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x7f, 0x22, 2, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x12, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xbf, 10, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x3f, 0, 0, 0, 0xc0, 0xff, 0xff, 0x57, 0, 0, 0xc0, 0xff, 0xff, 15, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x9f, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0, 0, 0, 0x40, 11, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x7f, 0, 0, 0, 0xc0, 0xff, 0xff, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 14, 0, 0, 0xc0, 0xff, 0xbf, 14, 0, 0, 0xc0, 0xff, 0x3f, 0,
                0, 0, 0xc0, 0xff, 0x7f, 9, 0x1b, 0, 0xc0, 0xff, 0x3f, 11, 0, 0, 0xc0, 0xff,
                0x3f, 1, 0, 0, 0xc0, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x7f, 0x26, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xf3, 0, 0, 0xc0, 0xff, 0x3f, 0x3e, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xce, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3f, 2, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 2, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 2, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x7f, 0xbf, 1, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x65, 0, 0,
                0xc0, 0xff, 0xbf, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x11,
                1, 0, 0xc0, 0xff, 0xbf, 0x66, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xbf, 0x1c, 70, 0, 0xc0, 0xff, 0x3f, 170, 0, 0, 0xc0, 0xff, 0x3f, 0x7f, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3f, 0x7c, 0, 0, 0xc0, 0xff, 0xff, 6, 0, 0, 0xc0, 0xff,
                0xff, 0x29, 0, 0, 0xc0, 0xff, 0xbf, 0x7d, 7, 0, 0xc0, 0xff, 0xbf, 0x7f, 1, 0,
                0xc0, 0xff, 0x7f, 11, 0, 0, 0xc0, 0xff, 0xbf, 0x95, 0x10, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 8, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x3f, 1, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 1, 0, 0, 0xc0, 0xff, 0x7f, 3,
                0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 15, 0, 0, 0xc0, 0xff,
                0x7f, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x15, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3f, 6, 0, 0, 0xc0, 0xff, 0x7f, 5, 0, 0, 0xc0, 0xff,
                0xff, 0, 0, 0, 0xc0, 0xff, 0x3f, 0x5f, 0, 0, 0xc0, 0xff, 0xbf, 0x13, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 140, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x53, 0, 0,
                0xc0, 0xff, 0x3f, 1, 0, 0, 0xc0, 0xff, 0x3f, 20, 0, 0, 0xc0, 0xff, 0x7f, 0x58,
                5, 0, 0xc0, 0xff, 0xff, 0x13, 1, 0, 0xc0, 0xff, 0x3f, 7, 0, 0, 0xc0, 0xff,
                0x7f, 0xe2, 4, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x7f, 0x16, 0, 0, 0xc0, 0xff, 0x7f, 0x12, 0, 0, 0xc0, 0xff,
                0x7f, 2, 0, 0, 0xc0, 0xff, 0x7f, 0x45, 1, 0, 0xc0, 0xff, 0x7f, 0x33, 0, 0,
                0xc0, 0xff, 0x3f, 2, 0, 0, 0xc0, 0xff, 0x3f, 130, 1, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x16, 0, 0,
                0xc0, 0xff, 0x3f, 2, 0, 0, 0xc0, 0xff, 0x7f, 0, 0, 0, 0xc0, 0xff, 0x7f, 0x16,
                1, 0, 0xc0, 0xff, 0x7f, 0x33, 0, 0, 0xc0, 0xff, 0xff, 0, 0, 0, 0xc0, 0xff,
                0x3f, 0x11, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x13, 0, 0, 0xc0, 0xff,
                0x7f, 1, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x3f, 0, 0, 0, 0xc0, 0xff, 0xbf, 2, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xbf, 0x16, 0, 0, 0xc0, 0xff, 0xbf, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 1, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 6, 0, 0,
                0xc0, 0xff, 0x3f, 1, 0, 0, 0xc0, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0xff, 0x69,
                0, 0, 0xc0, 0xff, 0x7f, 0x20, 0, 0, 0xc0, 0xff, 0x7f, 0, 0, 0, 0xc0, 0xff,
                0x7f, 0x30, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x7f, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0,
                0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 1, 0, 0, 0xc0, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0, 0, 0, 0xc0, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 4, 0, 0, 0xc0, 0xff, 0x7f, 0, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 1, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x7f, 0x1b, 0, 0, 0xc0, 0xff, 0x3f, 0x15, 0, 0, 0xc0, 0xff, 0x7f, 2, 0, 0,
                0xc0, 0xff, 0xbf, 0x69, 1, 0, 0xc0, 0xff, 0x3f, 0x4f, 0, 0, 0xc0, 0xff, 0xff, 1,
                0, 0, 0xc0, 0xff, 0x3f, 0x3b, 2, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x3f, 2, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x62, 0, 0, 0xc0, 0xff, 0x7f, 4,
                0, 0, 0xc0, 0xff, 0xff, 20, 0, 0, 0xc0, 0xff, 0x3f, 0x4e, 6, 0, 0xc0, 0xff,
                0xff, 0x44, 1, 0, 0xc0, 0xff, 0xbf, 8, 0, 0, 0xc0, 0xff, 0xff, 0x31, 5, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 4, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff,
                0x7f, 0, 0, 0, 0xc0, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0x7f, 0, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x25, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x3f, 3, 0, 0, 0xc0, 0xff, 0xff, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xbf, 9, 0, 0, 0xc0, 0xff, 0x7f, 3, 0, 0, 0xc0, 0xff, 0x3f, 0,
                0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0, 0, 0,
                0xc0, 0xff, 0x3f, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 4,
                0, 0, 0xc0, 0xff, 0xbf, 0, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0,
                0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 15, 0xfc,
                30, 0xc2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 7, 0xfc, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x3f, 0, 0, 0x40, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0,
                0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0,
                0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x3f, 0x3f, 0, 0x5e, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 3, 0xe0,
                0xc5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0, 0x5e, 0xfc, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 3, 0xe0, 0xc5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0x3f, 0x3f, 0, 0x5e, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3,
                3, 0xe0, 0xc5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xef, 0x21, 0xfc,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0,
                0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 3, 0xe0, 0xc5, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
                0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 3, 0x60, 0xc4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0x3f, 0x3f, 0, 0x5e, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0,
                0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0,
                0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f,
                0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0x40, 0xfc, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xf3, 3, 0xe0, 0xc5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0,
                0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3,
                0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0,
                0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 3, 0, 0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
                0, 0, 0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0xc0,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0, 0, 0, 0xfc, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 3, 0, 0, 0, 0, 0x68, 0x80, 0, 0, 0, 0,
                4, 1, 0, 0, 0, 0, 0, 0, 0, 0x6a, 0, 0, 0, 0, 130, 0,
                0, 0, 0, 0, 0, 0, 0x94, 0x9d, 0x9e, 0x95, 0, 0, 0, 0, 0, 0,
                0, 0x18, 0, 0, 0x40, 0xad, 0x2c, 0x80, 1, 0x83, 3, 0, 0, 0, 0x80, 10,
                8, 0, 0, 0, 0x40, 0x10, 0, 0, 0, 0, 0, 0, 0, 160, 6, 0,
                0, 0, 0x20, 8, 0, 0, 0, 0, 0, 0, 0x40, 0xd9, 0x19, 10, 0xc0, 9,
                0, 0, 0, 0, 0, 0x80, 1, 0, 0, 0xd8, 0xca, 2, 0x10, 20, 8, 0,
                0, 0, 0, 0, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x6a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x18, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 160, 6, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x6a, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0x18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160,
                6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0x80, 1, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0x6a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x18, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 160, 6, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0x80, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x6a, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 160, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0x80, 1, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 120, 0xd9, 0x54, 0xb9, 0xb1, 0xbd, 0x8d, 0xad, 0x81,
                4, 0xb1, 0xb1, 1, 0, 0, 0, 120, 0xd5, 8, 0xe5, 0x81, 120, 0xd9, 8, 0xdd,
                220, 220, 0xe0, 1, 0, 0, 0, 120, 0xc5, 0x54, 0xcd, 0xa5, 0xb9, 0x9d, 1, 0,
                0, 0, 0, 0, 0, 0, 0, 120, 0xd9, 8, 0xdd, 220, 220, 0xe0, 1, 0,
                0, 0, 0, 0, 0, 0, 0, 120, 0xd5, 0x4c, 0xd1, 0x85, 0xd1, 0xcd, 0x81, 80,
                0xbd, 0xbd, 0xb1, 1, 0, 0, 0, 0x6c, 0xed, 0xad, 180, 0x95, 0xb1, 0x95, 0x95, 0xf5,
                0x75, 1, 0, 0, 0, 0, 0, 120, 0xc9, 80, 0xa1, 0xe1, 0x81, 20, 0xd9, 0x95,
                0xe5, 0xbd, 0xb9, 0x95, 0xf1, 0xcc, 0, 0x6c, 0xed, 0xad, 180, 0x95, 0xb1, 0x95, 0x95, 0xf5,
                0x75, 1, 0, 0, 0, 0, 0, 120, 0xd9, 0x58, 0xa5, 0xcd, 0xa5, 0xd1, 0x81, 120,
                0xd9, 0x38, 0x1d, 0x55, 1, 0, 0, 120, 0xd5, 0x38, 0x95, 0xe1, 0xd1, 0x1d, 0x95, 0xb9,
                0x55, 0xc1, 0x91, 0x85, 0xd1, 0x95, 1, 0, 0, 0, 20, 0xff, 0xff, 0x8f, 80, 3,
                0xe4, 0xff, 0xff, 0xff, 0x5f, 1, 0, 0, 0, 0, 0, 0xe0, 15, 80, 0xf3, 0xff,
                0xff, 0xff, 15, 0, 0, 0, 0, 0, 0, 240, 0xa7, 0xec, 0xf4, 4, 0xd0, 4,
                0, 0, 0, 0, 0, 0xc0, 0xfe, 0xff, 0xff, 0x6d, 0x65, 1, 12, 0x18, 0x1c, 0,
                0, 0, 0, 0x54, 0x40, 0xfe, 0xff, 0xff, 0xff, 0x15, 0, 0, 0, 0, 0, 0,
                0xfe, 0, 0x35, 0xff, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0, 0, 0, 0x7f, 0xca,
                0xce, 80, 0, 0x4e, 0, 0, 0, 0, 0, 0, 0xec, 0xff, 0xff, 0xdf, 0x56, 0x16,
                0x80, 160, 0x40, 0, 0, 0, 0, 0x80, 5, 0xe4, 0xff, 0xff, 0xff, 0x5f, 1, 0,
                0, 0, 0, 0, 0xe0, 15, 80, 0xf3, 0xff, 0xff, 0xff, 15, 0, 0, 0, 0,
                0, 0, 240, 0xa7, 0xec, 12, 5, 0xe0, 4, 0, 0, 0, 0, 0, 0xc0, 0xfe,
                0xff, 0xff, 0x6d, 0x65, 1, 8, 10, 4, 0, 0, 0, 0, 0, 0x40, 0xfe, 0xff,
                0xff, 0xff, 1, 0, 0, 0, 0, 0, 0, 0xfe, 0, 0x35, 0xff, 0xff, 0xff, 0xff,
                0, 0, 0, 0, 0, 0, 0, 0x7f, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0xec, 0xff, 0xff, 0x1f, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0xe4, 0xff, 0xff, 0xff, 0x1f, 0, 0, 0, 0, 0, 0, 0xe0, 15, 80,
                0xf3, 0xff, 0xff, 0xff, 15, 0, 0, 0, 0, 0, 0, 240, 7, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0xc0, 0xfe, 0xff, 0xff, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x84, 110, 110, 110, 240, 0, 110, 240, 0, 0, 0,
                0, 0, 0, 0, 0, 0x84, 110, 110, 110, 240, 0, 110, 240, 0, 0, 0,
                0, 0, 0, 0, 0, 0x84, 110, 110, 110, 240, 0, 110, 240, 0, 0, 0,
                0, 0, 0, 0, 0, 0x5c, 0, 0x6a, 0x84, 110, 110, 110, 240, 0, 0, 0,
                0, 0, 0, 0, 0, 0x5c, 0, 0x6a, 0x84, 110, 110, 110, 240, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0xfe, 0xff, 0xff, 0xff, 0x41, 0x40, 0xfe, 0xff,
                0xff, 0xff, 1, 0, 0, 0, 0, 0, 0, 0xfe, 0x35, 0x35, 0xff, 0xff, 0xff, 0xff,
                0, 0, 0, 0, 0, 0, 0, 0x7f, 0xca, 0x4e, 0x4f, 0, 0, 0x80, 0x9f, 0x80,
                0x1c, 9, 12, 0xec, 0xff, 0xff, 0x1f, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                160, 0xa1, 0xe1, 0xff, 0xff, 0xff, 0x1f, 0, 0, 0, 0, 0, 0, 0xe0, 0x6f, 0x60,
                240, 0xff, 0xff, 0xff, 15, 0, 0, 0, 0, 0, 0, 240, 0xa7, 0xec, 0xf4, 4,
                0, 0, 0xf8, 9, 200, 0x91, 0xc0, 0xc0, 0xfe, 0xff, 0xff, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x48, 0x48, 0xfe, 0xff, 0xff, 0xff, 1, 0, 0, 0, 0,
                0, 0, 0xfe, 0x35, 0x35, 0xff, 0xff, 0xff, 0xff, 0, 0, 0, 0, 0, 0, 0,
                0x7f, 0xca, 0x4e, 0x4f, 0, 0, 0x80, 0x9f, 0x80, 0x1c, 9, 12, 0xec, 0xff, 0xff, 0x1f,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0xe0, 0xe5, 0xe5, 0xff, 0xff, 0xff, 0x1f,
                0, 0, 0, 0, 0, 0, 0xe0, 0x5f, 0x53, 0xf3, 0xff, 0xff, 0xff, 15, 0, 0,
                0, 0, 0, 0, 240, 0xa7, 0xec, 0xf4, 4, 0, 0, 0xf8, 9, 200, 0x91, 0xc0,
                0xc0, 0xfe, 0xff, 0xff, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x56, 0x56,
                0xfe, 0xff, 0xff, 0xff, 1, 0, 0, 0, 0, 0, 0, 0xfe, 6, 6, 0xff, 0xff,
                0xff, 0xff, 0, 0, 0, 0, 0, 0, 0, 0x7f, 0xca, 0x4e, 0x4f, 0, 0, 0x80,
                0x9f, 0x80, 0x1c, 9, 12, 0xec, 0xff, 0xff, 0x1f, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 160, 0x62, 0x88, 0x2d, 0x6c, 110, 0xae, 12, 4, 0xae, 0x4c, 110, 0xee, 0xcd,
                5, 0x24, 0xa6, 0x62, 0x88, 0x2d, 0x6c, 110, 0xae, 12, 4, 0xae, 0x4c, 110, 0xee, 0xcd,
                5, 0x44, 0xa6, 0x62, 0x88, 0x2d, 0x6c, 110, 0xae, 12, 4, 0xae, 0x4c, 110, 0xee, 0xcd,
                5, 100, 0xa6, 0x62, 0x88, 0x2d, 0x6c, 110, 0xae, 12, 4, 0xae, 0x4c, 110, 0xee, 0xcd,
                5, 0x84, 0xa6, 0x62, 0x88, 0x2d, 0x6c, 110, 0xae, 12, 4, 0xae, 0x4c, 110, 0xee, 0xcd,
                5, 0xa4, 0xa6, 230, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xdd, 0xa7, 0x1b, 0xe8, 0xdf, 0x7d,
                0xdb, 0xe7, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0, 0, 0, 0, 0, 0,
                0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0, 0, 0, 0, 0, 0,
                0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24,
                0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49,
                0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9,
                0xdf, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x92,
                0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24,
                0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49,
                0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92,
                0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24, 0x49, 0x92, 0x24,
                0x49, 0x92, 0x24, 0x49, 0x12, 0xff, 0x49, 0x92, 0x24, 0xff, 0x92, 0x24, 0xff, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xc0, 100, 0x42,
                0xed, 0xde, 0x37, 0xe0, 0x52, 0x63, 0x72, 0x2f, 0x22, 0x22, 0xb6, 0xbf, 0x8f, 0x48, 0, 0,
                0xb8, 0xff, 0x75, 0x35, 0x74, 0, 0x10, 0, 0, 0, 200, 0xf8, 0x69, 0x4d, 0xc1, 0x36,
                0x37, 0xbd, 5, 0, 0, 0, 100, 0x42, 0x6d, 0xdd, 0x37, 0xe0, 0x52, 0x63, 0x72, 0xaf,
                0xb6, 0x2a, 0xb6, 0xbf, 0xc7, 0x4c, 0, 0, 0xb8, 0xff, 0x75, 0x35, 0x74, 0, 4, 0,
                0, 0, 0xd4, 0x3b, 0x6a, 0x4d, 0xc1, 0x36, 0x37, 0xbd, 5, 0, 0x90, 0, 100, 0x42,
                0xed, 210, 0x77, 0xe0, 0x52, 0x63, 0x72, 0xaf, 0xb6, 0x2a, 0xb6, 0xbf, 0xc7, 0x4c, 0, 0,
                0xb8, 0xff, 0x75, 0x35, 0x74, 0, 0x18, 0, 0, 0, 0x9c, 0xda, 140, 0x4d, 0x59, 0x85,
                0x35, 0x80, 4, 0, 0, 0, 0x58, 0x5c, 0x45, 0x29, 0xa5, 0xc4, 0x51, 0x44, 0x7e, 0x6b,
                0xb7, 0x20, 0x49, 80, 0xfc, 0x13, 2, 0, 0xb8, 0xff, 0x75, 0x35, 0x74, 0, 4, 0,
                0, 0, 0xb8, 0xba, 0x8f, 0x4d, 9, 0xcc, 0x5c, 0x4a, 4, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x88, 0x36,
                0x94, 0x54, 0xca, 190, 0xb3, 0xd8, 0xf9, 0xff, 0xff, 0xff, 7, 0, 4, 0xd4, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 4, 0x4c, 0xd9, 170, 0xef, 1, 0, 0, 0,
                0, 0x4c, 0x69, 0x3d, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0xd8, 0, 0x48, 1, 0xa5, 20, 0, 0, 0, 0, 0, 0, 0, 0,
                2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xd7, 0x62, 14, 0x86, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0x44, 0x80, 8, 0x10, 1, 0x22, 0x40, 4, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 10, 0, 0, 0, 0xf4, 0xd4, 0x6d, 0xa7, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0xde, 0x7d, 0x5b, 0xbd, 1, 0, 0, 0, 2, 0x22, 8,
                0, 0, 0x80, 1, 0, 0, 10, 0x70, 8, 0x72, 0x1c, 0xc7, 0x7f, 30, 0x85, 0xdf,
                0x84, 0, 10, 0x70, 8, 6, 0x21, 0xfe, 0xff, 1, 15, 0x70, 8, 0, 0, 0,
                0, 6, 0x21, 0xfe, 0xff, 1, 10, 160, 5, 0, 0, 0, 0, 70, 0x21, 0xfe,
                0xff, 1, 15, 0x70, 8, 0, 0, 0, 0, 6, 0x21, 6, 0xfe, 0x81, 12, 0x70,
                8, 0, 0, 0, 0, 70, 0x21, 6, 0xfe, 0x81, 12, 0x70, 8, 0, 0, 0,
                0, 6, 0x21, 6, 0xfe, 0x41, 11, 0x70, 8, 0, 0, 0, 0, 70, 0x21, 6,
                0xfe, 0x41, 11, 0x70, 8, 0, 0, 0, 0, 6, 0x21, 6, 0xfe, 1, 10, 0x70,
                8, 0, 0, 0, 0, 70, 0x21, 6, 0xfe, 1, 10, 0x70, 8, 0, 0, 0,
                0, 6, 0x21, 6, 0xfe, 0x81, 7, 0x70, 8, 0, 0, 0, 0, 70, 0x21, 6,
                0xfe, 0x81, 7, 0x70, 8, 0, 0, 0, 0, 2, 0x22, 0xfe, 0xff, 0xa1, 5, 0xc0,
                3, 0, 0, 0, 0, 0x42, 0x22, 0xfe, 0xff, 0xa1, 5, 0xc0, 3, 0, 0, 0,
                0, 2, 2, 0xfe, 0xff, 0xa1, 5, 0xc0, 3, 0, 0, 0, 0, 4, 0x26, 0xfe,
                0xff, 0xa1, 5, 0x80, 4, 0, 0, 0, 0, 0x44, 0x26, 0xfe, 0xff, 0xa1, 5, 0x80,
                4, 0, 0, 0, 0, 4, 6, 0xfe, 0xff, 0xa1, 5, 0x80, 4, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0x80, 0x49, 0x7e, 0, 0, 0x53, 0x7d, 0, 0, 0x18,
                0x7d, 0, 0x80, 0x2d, 0x7e, 0, 0, 0x30, 0x7c, 0, 0, 0x24, 0x7d, 0, 0, 0x2c,
                0x7d, 0x9a, 0x99, 0x19, 0x80, 0x9a, 0x99, 0x19, 0x80, 0x9a, 0x99, 0x19, 0x80, 6, 0, 0,
                0, 20, 0xae, 0x47, 0x7e, 0x86, 0xeb, 0x51, 0x7d, 0x34, 0x33, 0x33, 0x7d, 0x34, 0x33, 0x33,
                0x7e, 0x34, 0x33, 0x33, 0x7c, 110, 0x34, 0x40, 0x7d, 0x60, 0xe5, 80, 0x7d, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 20, 0xae, 0x47,
                0x7e, 0x86, 0xeb, 0x51, 0x7d, 0x34, 0x33, 0x33, 0x7d, 0x34, 0x33, 0x33, 0x7e, 0x34, 0x33, 0x33,
                0x7c, 110, 0x34, 0x40, 0x7d, 0x60, 0xe5, 80, 0x7d, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x60, 0, 8, 0, 240, 0xff, 0xff, 0xff, 7, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0xcc, 0x20, 0, 11, 0, 0x18, 0, 0x19, 0, 0, 1, 0, 0, 0x20, 0, 0,
                0xe8, 0x40, 0, 0, 4, 0, 2, 0x88, 0x80, 0, 0, 0, 3, 0x18, 0x24, 0,
                0, 0, 5, 0, 0, 0, 0x10, 0, 0, 0, 0x24, 0x70, 0xa2, 0x10, 0x60, 100,
                3, 0x10, 0x10, 1, 0, 0, 0, 0, 0x6c, 0, 4, 0x80, 3, 0x80, 6, 0,
                9, 0, 0x40, 0, 0x80, 0x10, 40, 0, 0, 1, 0xd0, 0x41, 0xa3, 0xef, 0x93, 0x40,
                0x80, 0x20, 0x1b, 0x1c, 0xe3, 0x24, 0x3e, 0x89, 0, 0, 0, 0x20, 250, 0, 0, 0,
                8, 0x38, 0xb1, 0xf5, 0xbb, 0x77, 0xde, 0x41, 0xca, 6, 0xa4, 0xdf, 0xee, 0xf1, 0, 0x33,
                0xb0, 0x93, 0xd7, 0x17, 0, 0, 0, 0x8f, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 4, 0x80, 0, 0, 0, 0, 130, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0xe4, 0x34, 0x80, 0x48, 0, 0, 0x1c, 0xde,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 14, 160, 0, 0, 0, 0, 0, 0, 0xfc, 0x80, 0,
                0x20, 0x1c, 0x56, 0x1f, 8, 0x13, 0x83, 0x83, 13, 2, 0x62, 0x68, 0xa3, 0x88, 0x61, 0xc6,
                0x70, 1, 0x80, 70, 0x80, 9, 0x10, 0x25, 0x60, 0x80, 2, 1, 4, 160, 0x34, 0x80,
                0, 0, 70, 0x80, 0x41, 0x76, 0x90, 0, 0x6a, 7, 150, 0x90, 0x5f, 0x44, 0xe4, 0x93,
                0xc3, 0x40, 0x81, 210, 0xe8, 0x60, 0, 0x3e, 0xa6, 0x2d, 2, 0x7d, 0, 0x21, 0x20, 4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x40, 0x5b, 0x9c, 0,
                0xd8, 0x10, 0x38, 0x23, 0x93, 0, 0x1b, 0x59, 0x71, 0x68, 0x20, 0xc4, 0x26, 5, 0, 0x71,
                0x80, 0x4c, 0x20, 0x8a, 0x6a, 0x49, 0x45, 2, 0x40, 0x41, 0x25, 0x22, 0, 0, 130, 0x30,
                0, 0, 0, 0, 0, 0, 0, 0, 0x59, 4, 0x58, 160, 8, 0x20, 0x99, 0xd6,
                140, 0x84, 0x18, 0xab, 0, 0x4e, 3, 0x6b, 0, 0, 0, 0, 0xb8, 0xe0, 0, 0,
                0x16, 0xe8, 0x62, 160, 130, 0xad, 0xa4, 0x44, 0, 0x51, 0xa2, 0x9c, 0, 0, 0, 0xe7,
                0x3e, 0x11, 0x22, 0x60, 0x4b, 0x98, 6, 0x29, 0x57, 0xbd, 4, 0xd1, 0, 15, 0x20, 0x16,
                0, 0, 0, 0, 0x41, 0x6a, 0, 0, 1, 6, 0x53, 0x10, 0x21, 0x25, 0x7a, 0x68,
                0, 0, 1, 1, 0x44, 130, 0x80, 160, 0x6d, 0x30, 0x48, 0x38, 5, 0x68, 3, 0x22,
                0x40, 0, 0, 0, 0, 0, 0, 0x10, 0x52, 0xb8, 0, 0, 14, 0x45, 0, 0,
                3, 0x86, 0x90, 0, 0, 0x51, 0x4e, 0, 0, 12, 0x11, 0xc0, 0, 0, 0x21, 0x10,
                0, 0, 0, 0, 0x18, 0, 1, 0x40, 2, 0, 1, 0xc3, 200, 0x58, 0, 11,
                40, 0x8a, 0, 1, 4, 0x39, 0x60, 0, 0, 80, 0, 0, 0, 0, 0x20, 0x80,
                0, 2, 0x8e, 0x40, 0, 0, 0, 0, 80, 0, 0, 0, 7, 4, 0, 0,
                0, 0, 12, 0, 0, 0x1c, 1, 0x80, 0, 0, 0x80, 0x30, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0
            };
                PS3.SetMemory(0x26fc870, buffer);
                MessageBox.Show("Play now Online to Save all Stats ;D", "Succes", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            }
        }

        private void UnlockStats_CheckedChanged(object sender, EventArgs e)
        {
            if (UnlockStats.Checked == true)
            {
                byte[] array = new byte[]
                {
                byte.MaxValue
                };
                PS3.SetMemory(40927772u, array);
                byte[] array2 = new byte[]
                {
                byte.MaxValue
                };
                PS3.SetMemory(40927769u, array2);
                UnlockAll.DissForceUA();
            }
            else
            {
                MessageBox.Show("Sorry But you can't reset the Unlockall!", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void LegitStats_Click(object sender, EventArgs e)
        {
            this.PresNum.Value = 8m;
            this.RankNum.Value = 56m;
            this.TokeNum.Value = 255m;
            this.ScrNum.Value = 14152775m;
            this.KillNum.Value = 108823m;
            this.DeaNum.Value = 53820m;
            this.WinNum.Value = 2494m;
            this.LosNum.Value = 6811m;
            this.TimDNum.Value = 27m;
            this.TimHNum.Value = 22m;
            this.TimMNum.Value = 53m;
        }

        private void Un2_Click(object sender, EventArgs e)
        {
            uint num = 9371u;
            PS6.Func.SetUInt32(Stats.StatsCombat + num + 4u, 400u, true);
            PS6.Func.SetUInt32(Stats.StatsCombat + num + 70u, 30u, true);
            PS6.Func.SetUInt32(Stats.StatsCombat + num + 76u, 20u, true);
            PS6.Func.SetUInt32(Stats.StatsCombat + num + 82u, 10u, true);
            PS6.Func.SetUInt32(Stats.StatsCombat + num + 88u, 10u, true);
            PS6.Func.SetUInt32(Stats.StatsCombat + num + 94u, 10u, true);
            PS6.Func.SetUInt32(Stats.StatsCombat + num + 100u, 10u, true);
            for (int i = 0; i < Stats.Weapons.Offsets.Length; i++)
            {
                if (Stats.Weapons.Offsets[i] >= 226u && Stats.Weapons.Offsets[i] <= 2194u)
                {
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 34u, 100u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 70u, 15u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 76u, 30u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 82u, 150u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 88u, 150u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 94u, 20u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 100u, 10u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 112u, 4325376u * Stats.Weapons.Multi[i], true);
                }
                else if (Stats.Weapons.Offsets[i] >= 2773u && Stats.Weapons.Offsets[i] <= 4509u)
                {
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 34u, 100u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 70u, 15u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 76u, 10u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 82u, 150u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 88u, 150u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 94u, 20u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 100u, 10u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 112u, 4325376u * Stats.Weapons.Multi[i], true);
                }
                else if (Stats.Weapons.Offsets[i] >= 4856u && Stats.Weapons.Offsets[i] <= 5204u)
                {
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 70u, 15u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 76u, 250u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 82u, 10u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 88u, 50u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 94u, 50u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 100u, 5u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 106u, 10u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 112u, 4325376u * Stats.Weapons.Multi[i], true);
                }
                else if (Stats.Weapons.Offsets[i] >= 5435u && Stats.Weapons.Offsets[i] <= 5782u)
                {
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 70u, 15u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 76u, 250u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 82u, 30u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 88u, 50u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 94u, 50u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 100u, 5u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 106u, 10u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 112u, 4325376u * Stats.Weapons.Multi[i], true);
                }
                else if (Stats.Weapons.Offsets[i] >= 6130u && Stats.Weapons.Offsets[i] <= 6361u)
                {
                    if (Stats.Weapons.Offsets[i] == 6130u)
                    {
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 70u, 15u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 76u, 100u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 82u, 10u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 88u, 5u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 94u, Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 100u, 5u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 106u, Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 112u, 4325376u * Stats.Weapons.Multi[i], true);
                    }
                    else if (Stats.Weapons.Offsets[i] > 6130u && Stats.Weapons.Offsets[i] < 6361u)
                    {
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 70u, 15u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 76u, 100u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 82u, 10u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 88u, 5u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 94u, 2u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 100u, 10u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 106u, Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 112u, 4325376u * Stats.Weapons.Multi[i], true);
                    }
                    else if (Stats.Weapons.Offsets[i] == 6361u)
                    {
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 4u, 100u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 70u, 15u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 76u, 10u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 82u, Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 88u, Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 94u, 5u * Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 100u, Stats.Weapons.Multi[i], true);
                        PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 112u, 4325376u * Stats.Weapons.Multi[i], true);
                    }
                }
                else if (Stats.Weapons.Offsets[i] == 6593u)
                {
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 4u, 200u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 70u, 15u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 76u, 1000u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 82u, 25u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 88u, 25u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 94u, 25u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 100u, 25u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 112u, 4325376u * Stats.Weapons.Multi[i], true);
                }
                else if (Stats.Weapons.Offsets[i] == 6708u)
                {
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 4u, 300u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 70u, 15u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 76u, Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 82u, 5u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 88u, Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 94u, Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 100u, Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 112u, 4325376u * Stats.Weapons.Multi[i], true);
                }
                else if (Stats.Weapons.Offsets[i] == 6824u)
                {
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 70u, 15u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 76u, 300u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 82u, 5u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 88u, 25u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 94u, 25u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 100u, Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 106u, 2u * Stats.Weapons.Multi[i], true);
                    PS6.Func.SetUInt32(Stats.StatsCombat + Stats.Weapons.Offsets[i] + 112u, 4325376u * Stats.Weapons.Multi[i], true);
                }
            }
        }

        private void T1Class_Click(object sender, EventArgs e)
        {
            PS3.SetMemory(Stats.StatsCombat + 38932u, new byte[16]);
            PS3.SetMemory(Stats.StatsCombat + 38932u, new byte[]
            {
                68,
                128,
                8,
                16,
                1,
                34,
                64,
                4
            });
        }

        private void RefreshStats_Click(object sender, EventArgs e)
        {
            PS6.Func.SetByte(Stats.StatsCombat + 40749u, 0);
        }

        private void KillNum_ValueChanged(object sender, EventArgs e)
        {
            if (this.DeaNum.Value > 0m && this.KillNum.Value > 0m)
            {
                decimal num = this.KillNum.Value / this.DeaNum.Value;
                this.KDR.Text = num.ToString("0.00").Replace(".00", string.Empty);
            }
        }

        private void WinNum_ValueChanged(object sender, EventArgs e)
        {
            if (this.WinNum.Value > 0m && this.LosNum.Value > 0m)
            {
                decimal num = this.WinNum.Value / this.LosNum.Value;
                this.WLR.Text = num.ToString("0.00").Replace(".00", string.Empty);
            }
        }

        private void LosNum_ValueChanged(object sender, EventArgs e)
        {
            if (this.WinNum.Value > 0m && this.LosNum.Value > 0m)
            {
                decimal num = this.WinNum.Value / this.LosNum.Value;
                this.WLR.Text = num.ToString("0.00").Replace(".00", string.Empty);
            }
        }

        private void DeaNum_ValueChanged(object sender, EventArgs e)
        {
            if (this.DeaNum.Value > 0m && this.KillNum.Value > 0m)
            {
                decimal num = this.KillNum.Value / this.DeaNum.Value;
                this.KDR.Text = num.ToString("0.00").Replace(".00", string.Empty);
            }
        }

        private void LoadSF_Click(object sender, EventArgs e)
        {
            try
            {
                string text = FileLS.ReadText(this.LSBox.Text);
                if (text.Split("|".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)[0] == "Stats")
                {
                    this.PresNum.Value = Convert.ToDecimal(FileLS.GetValueFile(text, 1));
                    this.RankNum.Value = Convert.ToDecimal(FileLS.GetValueFile(text, 2));
                    this.TokeNum.Value = Convert.ToDecimal(FileLS.GetValueFile(text, 3));
                    this.ScrNum.Value = Convert.ToDecimal(FileLS.GetValueFile(text, 4));
                    this.TimDNum.Value = Convert.ToDecimal(FileLS.GetValueFile(text, 5));
                    this.TimHNum.Value = Convert.ToDecimal(FileLS.GetValueFile(text, 6));
                    this.TimMNum.Value = Convert.ToDecimal(FileLS.GetValueFile(text, 7));
                    this.KillNum.Value = Convert.ToDecimal(FileLS.GetValueFile(text, 8));
                    this.DeaNum.Value = Convert.ToDecimal(FileLS.GetValueFile(text, 9));
                    this.WinNum.Value = Convert.ToDecimal(FileLS.GetValueFile(text, 10));
                    this.LosNum.Value = Convert.ToDecimal(FileLS.GetValueFile(text, 11));
                    if (FileLS.GetValueFile(text, 12) == "true")
                    {
                        this.UnlockStats.Checked = true;
                    }
                    else
                    {
                        this.UnlockStats.Checked = false;
                    }
                    this.SLStatus.ForeColor = Color.Green;
                    this.SLStatus.Text = "Loaded";
                }
                else
                {
                    this.SLStatus.ForeColor = Color.Red;
                    this.SLStatus.Text = "Failed To Load";
                }
            }
            catch
            {
                this.SLStatus.ForeColor = Color.Red;
                this.SLStatus.Text = "Failed To Load";
            }
        }

        private void SaveSF_Click(object sender, EventArgs e)
        {
            if (FileLS.WriteText(this.LSBox.Text, string.Concat(new string[]
            {
                "Stats|Prestige=",
                this.PresNum.Value.ToString(),
                "|Rank=",
                this.RankNum.Value.ToString(),
                "|Tokens=",
                this.TokeNum.Value.ToString(),
                "|Score=",
                this.ScrNum.Value.ToString(),
                "|Days=",
                this.TimDNum.Value.ToString(),
                "|Hours=",
                this.TimHNum.Value.ToString(),
                "|Minutes=",
                this.TimMNum.Value.ToString(),
                "|Kills=",
                this.KillNum.Value.ToString(),
                "|Deaths=",
                this.DeaNum.Value.ToString(),
                "|Wins=",
                this.WinNum.Value.ToString(),
                "|Losses=",
                this.LosNum.Value.ToString(),
                "|Unlock=",
                this.UnlockStats.Checked ? "true" : "false"
            })))
            {
                this.SLStatus.ForeColor = Color.Green;
                this.SLStatus.Text = "Saved";
            }
            else
            {
                this.SLStatus.ForeColor = Color.Red;
                this.SLStatus.Text = "Failed To Save";
            }
        }

        private void Button122_Click(object sender, EventArgs e)
        {
            BO2AdvancedStats Hurra = new BO2AdvancedStats();
            Hurra.Show();
        }

        private void Button124_Click(object sender, EventArgs e)
        {
            this.comboBox3.DroppedDown = true;
        }


        public void SetClass(uint offset, string input)
        {
            PS3.SetMemory(offset, new byte[16]);
            byte[] B = new byte[1] { (byte)4 };
            byte[] bytes = Encoding.ASCII.GetBytes(input);
            PS3.SetMemory(offset, bytes.List(B));
        }
        private void Button125_Click(object sender, EventArgs e)
        {
            if (comboBox3.Text == "Class 1")
            {
                this.SetClass(40925895U, this.textBox5.Text);
            }
            else if (comboBox3.Text == "Class 2")
            {
                this.SetClass(40925911U, this.textBox5.Text);
            }
            else if (comboBox3.Text == "Class 3")
            {
                this.SetClass(40925927U, this.textBox5.Text);
            }
            else if (comboBox3.Text == "Class 4")
            {
                this.SetClass(40925943U, this.textBox5.Text);
            }
            else if (comboBox3.Text == "Class 5")
            {
                this.SetClass(40925959U, this.textBox5.Text);
            }
            else if (comboBox3.Text == "Class 6")
            {
                this.SetClass(40925975U, this.textBox5.Text);
            }
            else if (comboBox3.Text == "Class 7")
            {
                this.SetClass(40925991U, this.textBox5.Text);
            }
            else if (comboBox3.Text == "Class 8")
            {
                this.SetClass(40926007U, this.textBox5.Text);
            }
            else if (comboBox3.Text == "Class 9")
            {
                this.SetClass(40926023U, this.textBox5.Text);
            }
            else if (comboBox3.Text == "Class 10")
            {
                this.SetClass(0x40926039, this.textBox5.Text);
            }
        }

        private void Button126_Click(object sender, EventArgs e)
        {
            this.SetClass(40925895U, this.textBox5.Text);
            this.SetClass(40925911U, this.textBox5.Text);
            this.SetClass(40925927U, this.textBox5.Text);
            this.SetClass(40925943U, this.textBox5.Text);
            this.SetClass(40925959U, this.textBox5.Text);
            this.SetClass(40925975U, this.textBox5.Text);
            this.SetClass(40925991U, this.textBox5.Text);
            this.SetClass(40926007U, this.textBox5.Text);
            this.SetClass(40926023U, this.textBox5.Text);
            this.SetClass(0x40926039, this.textBox5.Text);
        }

        private void Button128_Click(object sender, EventArgs e)
        {

        }

        private void Button223_Click(object sender, EventArgs e)
        {
            {

                {

                    if (this.comboBox6.Text == "MP7")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    52
                        });
                    }
                    else if (this.comboBox6.Text == "PWD-57")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    60
                        });
                    }
                    else if (this.comboBox6.Text == "Vector K10")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    72
                        });
                    }
                    else if (this.comboBox6.Text == "MSMC")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    68
                        });
                    }
                    else if (this.comboBox6.Text == "Chicom CQB")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    64
                        });
                    }
                    else if (this.comboBox6.Text == "Skorpion EVO")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    56
                        });
                    }
                    else if (this.comboBox6.Text == "Peacekeeper")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    76
                        });
                    }
                    else if (this.comboBox6.Text == "MTAR")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    128
                        });
                    }
                    else if (this.comboBox6.Text == "Typ 25")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    112
                        });
                    }
                    else if (this.comboBox6.Text == "SWAT-556")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    108
                        });
                    }
                    else if (this.comboBox6.Text == "FAL OSW")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    116
                        });
                    }
                    else if (this.comboBox6.Text == "M27")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    124
                        });
                    }
                    else if (this.comboBox6.Text == "SCAR-H")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    100
                        });
                    }
                    else if (this.comboBox6.Text == "SMR")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    120
                        });
                    }
                    else if (this.comboBox6.Text == "M8A1")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    96
                        });
                    }
                    else if (this.comboBox6.Text == "AN-94")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    104
                        });
                    }
                    else if (this.comboBox6.Text == "R870 MCS")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    188
                        });
                    }
                    else if (this.comboBox6.Text == "S12")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    196
                        });
                    }
                    else if (this.comboBox6.Text == "KSG")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    200
                        });
                    }
                    else if (this.comboBox6.Text == "M1216")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    192
                        });
                    }
                    else if (this.comboBox6.Text == "Mk 48")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    144
                        });
                    }
                    else if (this.comboBox6.Text == "QBB LSW")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    148
                        });
                    }
                    else if (this.comboBox6.Text == "LSAT")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    152
                        });
                    }
                    else if (this.comboBox6.Text == "HAMR")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    156
                        });
                    }
                    else if (this.comboBox6.Text == "SVU-AS")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    172
                        });
                    }
                    else if (this.comboBox6.Text == "DSR-50")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    176
                        });
                    }
                    else if (this.comboBox6.Text == "Ballista")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    168
                        });
                    }
                    else if (this.comboBox6.Text == "XPR-50")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    180
                        });
                    }
                    else if (this.comboBox6.Text == "Riot Shield")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    228
                        });
                    }
                    else if (this.comboBox6.Text == "Tac-45")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    13
                        });
                    }
                    else if (this.comboBox6.Text == "Kap-40")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    8
                        });
                    }
                    else if (this.comboBox6.Text == "B23R")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    18
                        });
                    }
                    else if (this.comboBox6.Text == "Executioner")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    23
                        });
                    }
                    else if (this.comboBox6.Text == "Kap-40 TwoHands")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    28
                        });
                    }
                    else if (this.comboBox6.Text == "Five-Seven")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    27
                        });
                    }
                    else if (this.comboBox6.Text == "Tac-45 TwoHands")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    32
                        });
                    }
                    else if (this.comboBox6.Text == "Five-seven TwoHands")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    37
                        });
                    }
                    else if (this.comboBox6.Text == "Executioner TwoHands")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    40
                        });
                    }
                    else if (this.comboBox6.Text == "B23R TwoHands")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    44
                        });
                    }
                    else if (this.comboBox6.Text == "SMAW")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    215
                        });
                    }
                    else if (this.comboBox6.Text == "FHJ-18 AA")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    217
                        });
                    }
                    else if (this.comboBox6.Text == "RPG")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    222
                        });
                    }
                    else if (this.comboBox6.Text == "Crossbow")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    235
                        });
                    }
                    else if (this.comboBox6.Text == "Ballistic Knife")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    238
                        });
                    }
                    else if (this.comboBox6.Text == "CHECKERBOARD")
                    {
                        PS3.SetMemory(40925370u, new byte[]
                        {
                    48
                        });
                    }
                    else if (this.comboBox6.Text == "Delete")
                    {
                        PS3.SetMemory(40925370u, new byte[1]);
                    }
                }
            }



        }

        private void Button267_Click(object sender, EventArgs e)
        {
            {

                {

                    {

                        if (this.comboBox7.Text == "MP7")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    27
                            });
                        }
                        else if (this.comboBox7.Text == "PWD-57")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    31
                            });
                        }
                        else if (this.comboBox7.Text == "Vector K10")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    37
                            });
                        }
                        else if (this.comboBox7.Text == "MSMC")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    35
                            });
                        }
                        else if (this.comboBox7.Text == "Chicom CQB")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    33
                            });
                        }
                        else if (this.comboBox7.Text == "Skorpion EVO")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    29
                            });
                        }
                        else if (this.comboBox7.Text == "Peacekeeper")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    39
                            });
                        }
                        else if (this.comboBox7.Text == "MTAR")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    65
                            });
                        }
                        else if (this.comboBox7.Text == "Typ 25")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    57
                            });
                        }
                        else if (this.comboBox7.Text == "SWAT-556")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    55
                            });
                        }
                        else if (this.comboBox7.Text == "FAL OSW")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    59
                            });
                        }
                        else if (this.comboBox7.Text == "M27")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    63
                            });
                        }
                        else if (this.comboBox7.Text == "SCAR-H")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    51
                            });
                        }
                        else if (this.comboBox7.Text == "SMR")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    61
                            });
                        }
                        else if (this.comboBox7.Text == "M8A1")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    49
                            });
                        }
                        else if (this.comboBox7.Text == "AN-94")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    53
                            });
                        }
                        else if (this.comboBox7.Text == "R870 MCS")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    95
                            });
                        }
                        else if (this.comboBox7.Text == "S12")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    99
                            });
                        }
                        else if (this.comboBox7.Text == "KSG")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    101
                            });
                        }
                        else if (this.comboBox7.Text == "M1216")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    97
                            });
                        }
                        else if (this.comboBox7.Text == "Mk 48")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    73
                            });
                        }
                        else if (this.comboBox7.Text == "QBB LSW")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    75
                            });
                        }
                        else if (this.comboBox7.Text == "LSAT")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    77
                            });
                        }
                        else if (this.comboBox7.Text == "HAMR")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    79
                            });
                        }
                        else if (this.comboBox7.Text == "SVU-AS")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    87
                            });
                        }
                        else if (this.comboBox7.Text == "DSR-50")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    89
                            });
                        }
                        else if (this.comboBox7.Text == "Ballista")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    85
                            });
                        }
                        else if (this.comboBox7.Text == "XPR-50")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    91
                            });
                        }
                        else if (this.comboBox7.Text == "Riot Shield")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    115
                            });
                        }
                        else if (this.comboBox7.Text == "Tac-45")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    7
                            });
                        }
                        else if (this.comboBox7.Text == "Kap-40")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    5
                            });
                        }
                        else if (this.comboBox7.Text == "B23R")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    9
                            });
                        }
                        else if (this.comboBox7.Text == "Executioner")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    11
                            });
                        }
                        else if (this.comboBox7.Text == "Five-Seven")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    13
                            });
                        }
                        else if (this.comboBox7.Text == "SMAW")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    107
                            });
                        }
                        else if (this.comboBox7.Text == "FHJ-18 AA")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    109
                            });
                        }
                        else if (this.comboBox7.Text == "RPG")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    111
                            });
                        }
                        else if (this.comboBox7.Text == "Crossbow")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    117
                            });
                        }
                        else if (this.comboBox7.Text == "Ballistic Knife")
                        {
                            PS3.SetMemory(40925384u, new byte[]
                            {
                    119
                            });
                        }
                        else if (this.comboBox7.Text == "Delete")
                        {
                            PS3.SetMemory(40925384u, new byte[1]);
                        }
                    }
                }
            }
        }

        private void Button302_Click(object sender, EventArgs e)
        {
            this.comboBox6.DroppedDown = true;
        }

        private void Button301_Click(object sender, EventArgs e)
        {
            this.comboBox4.DroppedDown = true;
        }

        private void Button303_Click(object sender, EventArgs e)
        {
            this.comboBox7.DroppedDown = true;
        }

        private void Button300_Click(object sender, EventArgs e)
        {
            this.comboBox7.DroppedDown = true;
        }

        private void Button128_Click_1(object sender, EventArgs e)
        {

        }

        private void Button302_Click_1(object sender, EventArgs e)
        {
            this.comboBox6.DroppedDown = true;
        }

        private void Button303_Click_1(object sender, EventArgs e)
        {
            this.comboBox7.DroppedDown = true;
        }

        private void Button301_Click_1(object sender, EventArgs e)
        {
            this.comboBox4.DroppedDown = true;
        }

        private void Button300_Click_1(object sender, EventArgs e)
        {
            this.comboBox5.DroppedDown = true;
        }

        private void Button128_Click_2(object sender, EventArgs e)
        {
            string DRNKDBO2 = "callvote map \"zm_transit;\"";
            BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
            Thread.Sleep(1000);
            BO2RPC.Call(0x313C18, 0, "disconnect\n");
        }

        private void Button132_Click(object sender, EventArgs e)
        {
            BO2RPC.CBuf_Addtext(";cmd userinfo \"\\clanAbbrev\\" + "^HÖ§" + "\\name\\" + PSNGamertag.Text.Trim().Replace(" ", "_") + "\\xuid\\" + PS3.Extension.ReadString(40634088U));
            BO2RPC.CBuf_Addtext("Callvote map zm_transit");
            Thread.Sleep(1000);
        }

        private void Button133_Click(object sender, EventArgs e)
        {
            BO2RPC.CBuf_Addtext(";cmd userinfo \"\\clanAbbrev\\^ HHH");
        }

        private void GroupBox13_Enter(object sender, EventArgs e)
        {

        }

        private void Button134_Click(object sender, EventArgs e)
        {
            switch (this.button134.Text)
            {
                case "Freeze All InGame Range OFF ":
                    this.button134.Text = "Freeze All InGame Range ON";

                    BO2RPC.CBuf_Addtext(";cmd userinfo \"\\clanAbbrev\\" + "^HÖ§" + "\\name\\" + PSNGamertag.Text + "\0");
                    break;

                case "ON":
                    this.button134.Text = "Freeze All InGame Range OFF ";
                    BO2RPC.CBuf_Addtext(";cmd userinfo \"\\clanAbbrev\\" + "" + "\\name\\" + PSNGamertag.Text + "\0");
                    break;
            }
        }

        private void Button139_Click(object sender, EventArgs e)
        {
            Lib.WriteString(0x00D707DB, "S");
            Reset();
        }

        private void Button138_Click(object sender, EventArgs e)
        {
            Lib.WriteString(0x00D707DB, "S");
            Reset();
        }

        private void Button144_Click(object sender, EventArgs e)
        {
            this.Freeze00.Text = PS3.Extension.ReadString(24667244);
            this.Freeze01.Text = PS3.Extension.ReadString(24689780);
            this.Freeze02.Text = PS3.Extension.ReadString(24712316);
            this.Freeze03.Text = PS3.Extension.ReadString(24734852);
            this.Freeze04.Text = PS3.Extension.ReadString(24757388);
            this.Freeze05.Text = PS3.Extension.ReadString(24779924);
            this.Freeze06.Text = PS3.Extension.ReadString(24802460);
            this.Freeze07.Text = PS3.Extension.ReadString(24824996);
            this.Freeze08.Text = PS3.Extension.ReadString(24847532);
        }

        private void Freeze00_Click(object sender, EventArgs e)
        {

            freezePlayer(0);
        }
        private void freezePlayer(int P)
        {
            BO2RPC.iPrintlnBold(P, "^1PS3 Freeze by E3Modz");
            Thread.Sleep(2500);
            BO2RPC.SV_GameSendServerCommand(P, "^ 6 70 90");
        }
        private void Freeze03_Click(object sender, EventArgs e)
        {
            freezePlayer(10);
        }

        private void Freeze02_Click(object sender, EventArgs e)
        {
            freezePlayer(2);
        }

        private void Freeze05_Click(object sender, EventArgs e)
        {
            freezePlayer(5);
        }

        private void Freeze08_Click(object sender, EventArgs e)
        {
            freezePlayer(6);
        }

        private void Freeze07_Click(object sender, EventArgs e)
        {
            freezePlayer(7);
        }

        private void Freeze04_Click(object sender, EventArgs e)
        {
            freezePlayer(8);
        }

        private void Freeze01_Click(object sender, EventArgs e)
        {
            freezePlayer(8);
        }

        private void Freeze06_Click(object sender, EventArgs e)
        {
            freezePlayer(9);
        }

        private void Button135_Click(object sender, EventArgs e)
        {
            PS3.Extension.WriteString(40633944u, "^H™™™#E3Modz");
        }

        private void Button136_Click(object sender, EventArgs e)
        {
            {
                byte[] bytes;

                bytes = Encoding.ASCII.GetBytes(PS3.Extension.ReadString(0x26c0658));
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x11, 0x11, 11 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x22, 0x12, 0x1b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x33, 0x13, 0x2b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x44, 20, 0x3b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x55, 0x15, 0x4b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x66, 0x16, 0x5b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x77, 0x17, 0x6b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x88, 0x18, 0x7b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x99, 0x19, 0x8b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x11, 0x11, 11 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x22, 0x12, 0x1b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x33, 0x13, 0x2b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x44, 20, 0x3b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x55, 0x15, 0x4b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x66, 0x16, 0x5b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x77, 0x17, 0x6b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x88, 0x18, 0x7b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x99, 0x19, 0x8b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x11, 0x11, 11 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x22, 0x12, 0x1b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x33, 0x13, 0x2b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x44, 20, 0x3b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x55, 0x15, 0x4b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x66, 0x16, 0x5b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x77, 0x17, 0x6b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x88, 0x18, 0x7b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x99, 0x19, 0x8b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x11, 0x11, 11 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x22, 0x12, 0x1b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x33, 0x13, 0x2b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x44, 20, 0x3b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x55, 0x15, 0x4b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x66, 0x16, 0x5b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x77, 0x17, 0x6b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x88, 0x18, 0x7b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x99, 0x19, 0x8b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x11, 0x11, 11 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x22, 0x12, 0x1b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x33, 0x13, 0x2b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x44, 20, 0x3b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x55, 0x15, 0x4b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x66, 0x16, 0x5b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x77, 0x17, 0x6b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x88, 0x18, 0x7b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x99, 0x19, 0x8b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9b });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
                PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
                Array.Resize<byte>(ref bytes, bytes.Length + 1);
                PS3.SetMemory(0x26c0658, bytes);
                this.FreezePartyExtremeOFF();
            }
        }
        private void FreezePartyExtremeOFF()
        {
            byte[] bytes;

            bytes = Encoding.ASCII.GetBytes(PS3.Extension.ReadString(0x26c0658));
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x11, 0x11, 11 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x22, 0x12, 0x1b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x33, 0x13, 0x2b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x44, 20, 0x3b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x55, 0x15, 0x4b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x66, 0x16, 0x5b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x77, 0x17, 0x6b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x88, 0x18, 0x7b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x99, 0x19, 0x8b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x11, 0x11, 11 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x22, 0x12, 0x1b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x33, 0x13, 0x2b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x44, 20, 0x3b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x55, 0x15, 0x4b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x66, 0x16, 0x5b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x77, 0x17, 0x6b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x88, 0x18, 0x7b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x99, 0x19, 0x8b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x11, 0x11, 11 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x22, 0x12, 0x1b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x33, 0x13, 0x2b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x44, 20, 0x3b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x55, 0x15, 0x4b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x66, 0x16, 0x5b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x77, 0x17, 0x6b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x88, 0x18, 0x7b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x99, 0x19, 0x8b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x11, 0x11, 11 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x22, 0x12, 0x1b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x33, 0x13, 0x2b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x44, 20, 0x3b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x55, 0x15, 0x4b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x66, 0x16, 0x5b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x77, 0x17, 0x6b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x88, 0x18, 0x7b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x99, 0x19, 0x8b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x11, 0x11, 11 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x22, 0x12, 0x1b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x33, 0x13, 0x2b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x44, 20, 0x3b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x55, 0x15, 0x4b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x66, 0x16, 0x5b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x77, 0x17, 0x6b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x88, 0x18, 0x7b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0x99, 0x19, 0x8b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9b });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 170, 0x1a, 0xab });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xbb, 0x1b, 0xbb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xcc, 0x1c, 0xcb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xdd, 0x1d, 0xeb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0xee, 30, 0xfb });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 1, 0x11, 15 });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 2, 0x12, 0x1f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 3, 0x13, 0x2f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 4, 20, 0x3f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 5, 0x15, 0x4f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 6, 0x16, 0x5f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 7, 0x17, 0x6f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 8, 0x18, 0x7f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 9, 0x19, 0x8f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 0, 0x10, 0x9f });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 10, 0x1a, 0xaf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 11, 0x1b, 0xbf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 12, 0x1c, 0xcf });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 13, 0x1d, 0xef });
            PS3.SetMemory(0x26c0658, new byte[] { 0x5e, 0x49, 14, 30, 0xff });
            Array.Resize<byte>(ref bytes, bytes.Length + 1);
            PS3.SetMemory(0x26c0658, bytes);
            PS3.Extension.WriteString(0x026C0658, this.PSNGamertag.Text + "\0");
        }

        private void Button140_Click(object sender, EventArgs e)
        {
            MessageBox.Show("Write the Name of the Player in the Box who should be safe from the Extrem Freeze!! Please look on you Name if the Name inGame not the Same of the Tool on The Account then you will get Freezed! When you Name is not The Same you can write in Your new Name in The Box UP!", "Info", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void Button145_Click(object sender, EventArgs e)
        {
            {
                PS3.SetMemory(1290040U, new byte[4]
    {
        (byte) 56,
        (byte) 96,
        (byte) 0,
        (byte) 249
    });
                PS3.SetMemory(5416688U, new byte[4]
                {
        (byte) 56,
        (byte) 96,
        (byte) 0,
        byte.MaxValue
                });
                PS3.Extension.WriteString(40633944U, this.PSNGamertag.Text);
            }
        }

        private void button75_Click(object sender, EventArgs e)
        {
            PS3.SetMemory(1290040U, new byte[4]
{
        (byte) 56,
        (byte) 96,
        (byte) 0,
        (byte) 249
});
            PS3.SetMemory(5416688U, new byte[4]
             {
        (byte) 56,
        (byte) 96,
        (byte) 0,
        byte.MaxValue
             });
            PS3.Extension.WriteString(40633944U, this.PSNGamertag.Text);
        }

        private void Button143_Click(object sender, EventArgs e)
        {
            PS3.SetMemory(1290040U, new byte[4]
{
        (byte) 56,
        (byte) 96,
        (byte) 0,
        (byte) 249
});
            PS3.SetMemory(5416688U, new byte[4]
             {
        (byte) 56,
        (byte) 96,
        (byte) 0,
        byte.MaxValue
             });
            PS3.Extension.WriteString(40633944U, this.PSNGamertag.Text);
        }

        private void Button146_Click(object sender, EventArgs e)
        {

        }


        private void Button141_Click_1(object sender, EventArgs e)
        {
            if (button141.Text == "OFF")
            {
                Mods.AntiCloseON();
                Mods.AutoInviteON();
                Mods.SelfInviteON();
                Mods.RedBoxON();
                Mods.LazerON();
                Mods.FPSON();
                Mods.NoRecoilON();
                Mods.NamesON();
                Mods.UAVON();
                Mods.VSATON();
                button141.Text = "ON";
            }
            else if (button141.Text == "ON")
            {
                Mods.AntiCloseOFF();
                Mods.AutoInviteOFF();
                Mods.SelfInviteOFF();
                Mods.RedBoxOFF();
                Mods.LazerOFF();
                Mods.FPSOFF();
                Mods.NoRecoilOFF();
                Mods.NamesOFF();
                Mods.UAVOFF();
                Mods.VSATOFF();
                button141.Text = "OFF";
            }
        }

        private void Button137_Click(object sender, EventArgs e)
        {
            if (button137.Text == "OFF")
            {
                Mods.NamesON();
                button141.Text = "ON";
            }
            else if (button137.Text == "ON")
            {
                Mods.NamesOFF();
                button137.Text = "OFF";
            }
        }

        private void Button152_Click(object sender, EventArgs e)
        {
            if (button152.Text == "OFF")
            {
                button152.Text = "ON";
                PS3.SetMemory(24667166u, new byte[]
           {
                1
           });
                return;
            }
            else if (button152.Text == "ON")
            {
                PS3.SetMemory(24667166u, new byte[]
                {
                36
                });
                button152.Text = "OFF";
            }

        }

        private void Button194_Click(object sender, EventArgs e)
        {
            Thread.Sleep(250);
            byte[] bytes = Encoding.ASCII.GetBytes(this.partyhost.Text);
            Array.Resize<byte>(ref bytes, bytes.Length + 1);
            PS3.SetMemory(40633944u, bytes);
            PS3.SetMemory(40634143u, new byte[]
            {
                4
            });
        }

        private void Button147_Click(object sender, EventArgs e)
        {
            byte[] bytes = Encoding.ASCII.GetBytes(this.hostname.Text);
            Array.Resize<byte>(ref bytes, bytes.Length + 1);
            PS3.SetMemory(40633944u, bytes);
            PS3.SetMemory(40634143u, new byte[]
            {
                4
            });
        }

        private void Hostname_TextChanged(object sender, EventArgs e)
        {

        }

        private void Button148_Click(object sender, EventArgs e)
        {
            if (button148.Text == "OFF")
            {

                button148.Text = "ON";
                PS3.SetMemory(30213080u, new byte[]
              {
                67,
                72
              });
                return;

            }
            else if (button148.Text == "ON")
            {

                button148.Text = "OFF";
                PS3.SetMemory(30213080u, new byte[]
                {
                196,
                72
                });
            }
        }

        private void Button150_Click(object sender, EventArgs e)
        {
            if (button150.Text == "OFF")
            {

                button150.Text = "ON";
                PS3.SetMemory(9726476u, new byte[]
             {
                63,
                129
             });
                return;
            }
            else if (button150.Text == "ON")
            {

                button150.Text = "OFF";
                PS3.SetMemory(9726476u, new byte[]
              {
                63,
                128
              });
            }
        }
        public static void CompassSize(int Size)
        {
            BO2RPC.CBuf_Addtext("set compassMaxRange " + Size);
        }
        private void TrackBar1_Scroll(object sender, EventArgs e)
        {
            CompassSize(this.trackBar1.Value);
        }

        private void TrackBar2_Scroll(object sender, EventArgs e)
        {
            BO2RPC.Call(3226648u, new object[]
    {
                0,
                "cg_fov " + this.trackBar2.Value
    });
        }

        private void Red_TextChanged(object sender, EventArgs e)
        {

        }
        public static void WriteFlo(uint Offset, float Input)
        {
            PS3.Extension.WriteFloat(Offset, Input);
        }
        private void Button153_Click(object sender, EventArgs e)
        {
            int num = Convert.ToInt32(this.red.Text);
            int num2 = Convert.ToInt32(this.green.Text);
            int num3 = Convert.ToInt32(this.blue.Text);
            uint offset = 10375392u;
            uint offset2 = 10375396u;
            uint offset3 = 10375400u;
            WriteFlo(offset, (float)num);
            WriteFlo(offset2, (float)num2);
            WriteFlo(offset3, (float)num3);
        }

        private void Button155_Click(object sender, EventArgs e)
        {
            int num = Convert.ToInt32("0");
            int num2 = Convert.ToInt32("0");
            int num3 = Convert.ToInt32("0");
            uint offset = 10375392u;
            uint offset2 = 10375396u;
            uint offset3 = 10375400u;
            WriteFlo(offset, (float)num);
            WriteFlo(offset2, (float)num2);
            WriteFlo(offset3, (float)num3);
        }
        public static void SetFloat(uint address, float value, bool IsBigEndian = true)
        {
            PS3.SetMemory(address, Binary.SetFloat(new byte[4], value, 0, IsBigEndian));
        }
        private void NumericUpDown1_ValueChanged(object sender, EventArgs e)
        {
            SetFloat(30201464u, (float)this.numericUpDown1.Value, true);
        }

        private void NumericUpDown2_ValueChanged(object sender, EventArgs e)
        {
            SetFloat(30201560u, (float)this.numericUpDown2.Value, true);
        }

        private void NumericUpDown3_ValueChanged(object sender, EventArgs e)
        {
            SetFloat(30201656u, (float)this.numericUpDown3.Value, true);
        }

        private void NumericUpDown4_ValueChanged(object sender, EventArgs e)
        {
            SetFloat(9726500u, (float)this.numericUpDown4.Value, true);
        }

        private void BodyCom_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.BodyCom.SelectedIndex >= 0)
            {
                PS3.SetMemory(30151740u, new byte[]
                 {
                    63,
                    128,
                    0,
                    0,
                    63,
                    128,
                    0,
                    0
                 });
            }
            if (this.BodyCom.SelectedIndex >= 1)
            {
                PS3.SetMemory(30151740u, new byte[]
                 {
                    111,
                    128,
                    0,
                    0,
                    63,
                    128,
                    0,
                    0
                 });
            }
            if (this.BodyCom.SelectedIndex >= 2)
            {
                PS3.SetMemory(30151740u, new byte[]
                 {
                    63,
                    128,
                    0,
                    0,
                    111,
                    128,
                    0
                 });
            }
            if (this.BodyCom.SelectedIndex >= 3)
            {
                PS3.SetMemory(30151740u, new byte[]
                 {
                    111,
                    128,
                    0,
                    0,
                    111,
                    128,
                    0
                 });
            }
            if (this.BodyCom.SelectedIndex >= 4)
            {
                PS3.SetMemory(30151740u, new byte[]
                 {
                    15,
                    128,
                    0,
                    0,
                    63,
                    128,
                    0
                 });
            }
            if (this.BodyCom.SelectedIndex >= 5)
            {
                PS3.SetMemory(30151740u, new byte[]
                 {
                    111,
                    128,
                    0,
                    0,
                    79,
                    128,
                    0
                 });
            }
            if (this.BodyCom.SelectedIndex >= 6)
            {
                PS3.SetMemory(30151740u, new byte[]
                 {
                    31,
                    byte.MaxValue,
                    0,
                    0,
                    63,
                    byte.MaxValue,
                    0
                 });
            }
            if (this.BodyCom.SelectedIndex >= 7)
            {
                PS3.SetMemory(30151740u, new byte[]
                 {
                    31,
                    byte.MaxValue,
                    0,
                    0,
                    95,
                    byte.MaxValue,
                    0
                 });
            }
            if (this.BodyCom.SelectedIndex >= 8)
            {
                PS3.SetMemory(30151740u, new byte[8]);
            }
            if (this.BodyCom.SelectedIndex >= 9)
            {
                PS3.SetMemory(30151740u, new byte[]
                 {
                    63,
                    byte.MaxValue,
                    0,
                    0,
                    31,
                    0,
                    0
                 });
            }
            if (this.BodyCom.SelectedIndex >= 10)
            {
                byte[] array = new byte[7];
                array[0] = 63;
                array[4] = byte.MaxValue;
                PS3.SetMemory(30151740u, array);
            }
            if (this.BodyCom.SelectedIndex >= 11)
            {
                uint offset = 30151740u;
                byte[] array2 = new byte[6];
                array2[0] = 63;
                array2[4] = 63;
                PS3.SetMemory(offset, array2);
            }
            if (this.BodyCom.SelectedIndex >= 12)
            {
                PS3.SetMemory(30151740u, new byte[]
                 {
                    79,
                    128,
                    0,
                    0,
                    79,
                    128,
                    0,
                    0
                 });
            }
            if (this.BodyCom.SelectedIndex >= 13)
            {
                PS3.SetMemory(30151740u, new byte[]
                {
                    63,
                    128,
                    0,
                    0,
                    63,
                    128,
                    0,
                    0
                });
            }
        }

        private void Button427_Click(object sender, EventArgs e)
        {
            this.BodyCom.DroppedDown = true;
        }

        private void SkyCom_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.SkyCom.SelectedIndex >= 0)
            {
                PS3.SetMemory(30157016u, new byte[]
                {
                    15,
                    128
                });
            }
            if (this.SkyCom.SelectedIndex >= 1)
            {
                PS3.SetMemory(30157016u, new byte[]
                {
                    95,
                    128
                });
            }
            if (this.SkyCom.SelectedIndex >= 2)
            {
                PS3.SetMemory(30157016u, new byte[]
                {
                    61,
                    128
                });
            }
            if (this.SkyCom.SelectedIndex >= 3)
            {
                PS3.SetMemory(30157016u, new byte[]
                {
                    62,
                    128
                });
            }
            if (this.SkyCom.SelectedIndex >= 4)
            {
                PS3.SetMemory(30157016u, new byte[]
                {
                    95,
                    byte.MaxValue
                });
            }
            if (this.SkyCom.SelectedIndex >= 5)
            {
                PS3.SetMemory(30157016u, new byte[]
                {
                    63,
                    128
                });
            }
        }

        private void Customgameicon_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.Customgameicon.SelectedIndex == 0)
            {
                PS3.Extension.WriteString(29559476u, "mp_crisis");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 1)
            {
                PS3.Extension.WriteString(29559476u, "mp_villa");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 2)
            {
                PS3.Extension.WriteString(29559476u, "mp_hanoi");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 3)
            {
                PS3.Extension.WriteString(29559476u, "mp_mountain");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 4)
            {
                PS3.Extension.WriteString(29559476u, "mp_cracked");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 5)
            {
                PS3.Extension.WriteString(29559476u, "mp_duga");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 6)
            {
                PS3.Extension.WriteString(29559476u, "mp_russianbase");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 7)
            {
                PS3.Extension.WriteString(29559476u, "mp_cairo");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 8)
            {
                PS3.Extension.WriteString(29559476u, "mp_havoc");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 9)
            {
                PS3.Extension.WriteString(29559476u, "mp_cosmodrome");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 10)
            {
                PS3.Extension.WriteString(29559476u, "mp_radiation");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 11)
            {
                PS3.Extension.WriteString(29559476u, "mp_berlinwall");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 12)
            {
                PS3.Extension.WriteString(29559476u, "mp_discovery");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 13)
            {
                PS3.Extension.WriteString(29559476u, "mp_nuked");
                return;
            }
            if (this.Customgameicon.SelectedIndex == 14)
            {
                PS3.Extension.WriteString(29559476u, "mp_nuketown_2020");
            }
        }

        private void ComboBox8_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.fakelevel.Text == "1")
            {
                levelcu.level1();
            }
            if (this.fakelevel.Text == "2")
            {
                levelcu.level2();
            }
            if (this.fakelevel.Text == "3")
            {
                levelcu.level3();
            }
            if (this.fakelevel.Text == "4")
            {
                levelcu.level4();
            }
            if (this.fakelevel.Text == "5")
            {
                levelcu.level5();
            }
            if (this.fakelevel.Text == "6")
            {
                levelcu.level6();
            }
            if (this.fakelevel.Text == "7")
            {
                levelcu.level7();
            }
            if (this.fakelevel.Text == "8")
            {
                levelcu.level8();
            }
            if (this.fakelevel.Text == "9")
            {
                levelcu.level9();
            }
            if (this.fakelevel.Text == "10")
            {
                levelcu.level10();
            }
            if (this.fakelevel.Text == "11")
            {
                levelcu.level11();
            }
            if (this.fakelevel.Text == "12")
            {
                levelcu.level12();
            }
            if (this.fakelevel.Text == "13")
            {
                levelcu.level13();
            }
            if (this.fakelevel.Text == "14")
            {
                levelcu.level14();
            }
            if (this.fakelevel.Text == "15")
            {
                levelcu.level15();
            }
            if (this.fakelevel.Text == "16")
            {
                levelcu.level16();
            }
            if (this.fakelevel.Text == "17")
            {
                levelcu.level17();
            }
            if (this.fakelevel.Text == "18")
            {
                levelcu.level18();
            }
            if (this.fakelevel.Text == "19")
            {
                levelcu.level19();
            }
            if (this.fakelevel.Text == "20")
            {
                levelcu.level20();
            }
            if (this.fakelevel.Text == "21")
            {
                levelcu.level21();
            }
            if (this.fakelevel.Text == "22")
            {
                levelcu.level22();
            }
            if (this.fakelevel.Text == "23")
            {
                levelcu.level23();
            }
            if (this.fakelevel.Text == "24")
            {
                levelcu.level24();
            }
            if (this.fakelevel.Text == "25")
            {
                levelcu.level25();
            }
            if (this.fakelevel.Text == "26")
            {
                levelcu.level26();
            }
            if (this.fakelevel.Text == "27")
            {
                levelcu.level27();
            }
            if (this.fakelevel.Text == "28")
            {
                levelcu.level28();
            }
            if (this.fakelevel.Text == "29")
            {
                levelcu.level29();
            }
            if (this.fakelevel.Text == "30")
            {
                levelcu.level30();
            }
            if (this.fakelevel.Text == "31")
            {
                levelcu.level31();
            }
            if (this.fakelevel.Text == "32")
            {
                levelcu.level32();
            }
            if (this.fakelevel.Text == "33")
            {
                levelcu.level33();
            }
            if (this.fakelevel.Text == "34")
            {
                levelcu.level34();
            }
            if (this.fakelevel.Text == "35")
            {
                levelcu.level35();
            }
            if (this.fakelevel.Text == "36")
            {
                levelcu.level36();
            }
            if (this.fakelevel.Text == "37")
            {
                levelcu.level37();
            }
            if (this.fakelevel.Text == "38")
            {
                levelcu.level38();
            }
            if (this.fakelevel.Text == "39")
            {
                levelcu.level39();
            }
            if (this.fakelevel.Text == "40")
            {
                levelcu.level40();
            }
            if (this.fakelevel.Text == "41")
            {
                levelcu.level41();
            }
            if (this.fakelevel.Text == "42")
            {
                levelcu.level42();
            }
            if (this.fakelevel.Text == "43")
            {
                levelcu.level43();
            }
            if (this.fakelevel.Text == "44")
            {
                levelcu.level44();
            }
            if (this.fakelevel.Text == "45")
            {
                levelcu.level45();
            }
            if (this.fakelevel.Text == "46")
            {
                levelcu.level46();
            }
            if (this.fakelevel.Text == "47")
            {
                levelcu.level47();
            }
            if (this.fakelevel.Text == "48")
            {
                levelcu.level48();
            }
            if (this.fakelevel.Text == "49")
            {
                levelcu.level49();
            }
            if (this.fakelevel.Text == "50")
            {
                levelcu.level50();
            }
            if (this.fakelevel.Text == "51")
            {
                levelcu.level51();
            }
            if (this.fakelevel.Text == "52")
            {
                levelcu.level52();
            }
            if (this.fakelevel.Text == "53")
            {
                levelcu.level53();
            }
            if (this.fakelevel.Text == "54")
            {
                levelcu.level54();
            }
            if (this.fakelevel.Text == "55")
            {
                levelcu.level55();
            }
            if (this.fakelevel.Text == "56")
            {
                levelcu.level56();
            }
            if (this.fakelevel.Text == "57")
            {
                levelcu.level57();
            }
            if (this.fakelevel.Text == "58")
            {
                levelcu.level58();
            }
            if (this.fakelevel.Text == "59")
            {
                levelcu.level59();
            }
            if (this.fakelevel.Text == "60")
            {
                levelcu.level60();
            }
            if (this.fakelevel.Text == "61")
            {
                levelcu.level61();
            }
            if (this.fakelevel.Text == "62")
            {
                levelcu.level62();
            }
            if (this.fakelevel.Text == "63")
            {
                levelcu.level63();
            }
            if (this.fakelevel.Text == "64")
            {
                levelcu.level64();
            }
            if (this.fakelevel.Text == "65")
            {
                levelcu.level65();
            }
            if (this.fakelevel.Text == "66")
            {
                levelcu.level66();
            }
            if (this.fakelevel.Text == "67")
            {
                levelcu.level67();
            }
            if (this.fakelevel.Text == "68")
            {
                levelcu.level68();
            }
            if (this.fakelevel.Text == "69")
            {
                levelcu.level69();
            }
            if (this.fakelevel.Text == "70")
            {
                levelcu.level70();
            }
            if (this.fakelevel.Text == "71")
            {
                levelcu.level71();
            }
            if (this.fakelevel.Text == "72")
            {
                levelcu.level72();
            }
            if (this.fakelevel.Text == "73")
            {
                levelcu.level73();
            }
            if (this.fakelevel.Text == "74")
            {
                levelcu.level74();
            }
            if (this.fakelevel.Text == "75")
            {
                levelcu.level75();
            }
            if (this.fakelevel.Text == "76")
            {
                levelcu.level76();
            }
            if (this.fakelevel.Text == "77")
            {
                levelcu.level77();
            }
            if (this.fakelevel.Text == "78")
            {
                levelcu.level78();
            }
            if (this.fakelevel.Text == "79")
            {
                levelcu.level79();
            }
            if (this.fakelevel.Text == "80")
            {
                levelcu.level80();
            }
            if (this.fakelevel.Text == "81")
            {
                levelcu.level81();
            }
            if (this.fakelevel.Text == "82")
            {
                levelcu.level82();
            }
            if (this.fakelevel.Text == "83")
            {
                levelcu.level83();
            }
            if (this.fakelevel.Text == "84")
            {
                levelcu.level84();
            }
            if (this.fakelevel.Text == "85")
            {
                levelcu.level85();
            }
            if (this.fakelevel.Text == "86")
            {
                levelcu.level86();
            }
            if (this.fakelevel.Text == "87")
            {
                levelcu.level87();
            }
            if (this.fakelevel.Text == "88")
            {
                levelcu.level88();
            }
            if (this.fakelevel.Text == "89")
            {
                levelcu.level89();
            }
            if (this.fakelevel.Text == "90")
            {
                levelcu.level90();
            }
            if (this.fakelevel.Text == "91")
            {
                levelcu.level91();
            }
            if (this.fakelevel.Text == "92")
            {
                levelcu.level92();
            }
            if (this.fakelevel.Text == "93")
            {
                levelcu.level93();
            }
            if (this.fakelevel.Text == "94")
            {
                levelcu.level94();
            }
            if (this.fakelevel.Text == "95")
            {
                levelcu.level95();
            }
            if (this.fakelevel.Text == "96")
            {
                levelcu.level96();
            }
            if (this.fakelevel.Text == "97")
            {
                levelcu.level97();
            }
            if (this.fakelevel.Text == "98")
            {
                levelcu.level98();
            }
            if (this.fakelevel.Text == "99")
            {
                levelcu.level99();
            }
            if (this.fakelevel.Text == "100")
            {
                levelcu.level100();
            }
            if (this.fakelevel.Text == "101")
            {
                levelcu.level101();
            }
            if (this.fakelevel.Text == "102")
            {
                levelcu.level102();
            }
            if (this.fakelevel.Text == "103")
            {
                levelcu.level103();
            }
            if (this.fakelevel.Text == "104")
            {
                levelcu.level104();
            }
            if (this.fakelevel.Text == "105")
            {
                levelcu.level105();
            }
            if (this.fakelevel.Text == "106")
            {
                levelcu.level106();
            }
            if (this.fakelevel.Text == "107")
            {
                levelcu.level107();
            }
            if (this.fakelevel.Text == "108")
            {
                levelcu.level108();
            }
            if (this.fakelevel.Text == "109")
            {
                levelcu.level109();
            }
            if (this.fakelevel.Text == "110")
            {
                levelcu.level110();
            }
            if (this.fakelevel.Text == "111")
            {
                levelcu.level111();
            }
            if (this.fakelevel.Text == "112")
            {
                levelcu.level112();
            }
            if (this.fakelevel.Text == "113")
            {
                levelcu.level113();
            }
            if (this.fakelevel.Text == "114")
            {
                levelcu.level114();
            }
            if (this.fakelevel.Text == "115")
            {
                levelcu.level115();
            }
            if (this.fakelevel.Text == "116")
            {
                levelcu.level116();
            }
            if (this.fakelevel.Text == "117")
            {
                levelcu.level117();
            }
            if (this.fakelevel.Text == "118")
            {
                levelcu.level118();
            }
            if (this.fakelevel.Text == "119")
            {
                levelcu.level119();
            }
            if (this.fakelevel.Text == "120")
            {
                levelcu.level120();
            }
            if (this.fakelevel.Text == "121")
            {
                levelcu.level121();
            }
            if (this.fakelevel.Text == "122")
            {
                levelcu.level122();
            }
            if (this.fakelevel.Text == "123")
            {
                levelcu.level123();
            }
            if (this.fakelevel.Text == "124")
            {
                levelcu.level124();
            }
            if (this.fakelevel.Text == "125")
            {
                levelcu.level125();
            }
            if (this.fakelevel.Text == "126")
            {
                levelcu.level126();
            }
            if (this.fakelevel.Text == "127")
            {
                levelcu.level127();
            }
            if (this.fakelevel.Text == "128")
            {
                levelcu.level128();
            }
            if (this.fakelevel.Text == "129")
            {
                levelcu.level129();
            }
            if (this.fakelevel.Text == "130")
            {
                levelcu.level130();
            }
            if (this.fakelevel.Text == "131")
            {
                levelcu.level131();
            }
            if (this.fakelevel.Text == "132")
            {
                levelcu.level132();
            }
            if (this.fakelevel.Text == "133")
            {
                levelcu.level133();
            }
            if (this.fakelevel.Text == "134")
            {
                levelcu.level134();
            }
            if (this.fakelevel.Text == "135")
            {
                levelcu.level135();
            }
            if (this.fakelevel.Text == "136")
            {
                levelcu.level136();
            }
            if (this.fakelevel.Text == "137")
            {
                levelcu.level137();
            }
            if (this.fakelevel.Text == "138")
            {
                levelcu.level138();
            }
            if (this.fakelevel.Text == "139")
            {
                levelcu.level139();
            }
            if (this.fakelevel.Text == "140")
            {
                levelcu.level140();
            }
            if (this.fakelevel.Text == "141")
            {
                levelcu.level141();
            }
            if (this.fakelevel.Text == "142")
            {
                levelcu.level142();
            }
            if (this.fakelevel.Text == "143")
            {
                levelcu.level143();
            }
            if (this.fakelevel.Text == "144")
            {
                levelcu.level144();
            }
            if (this.fakelevel.Text == "145")
            {
                levelcu.level145();
            }
            if (this.fakelevel.Text == "146")
            {
                levelcu.level146();
            }
            if (this.fakelevel.Text == "147")
            {
                levelcu.level147();
            }
            if (this.fakelevel.Text == "148")
            {
                levelcu.level148();
            }
            if (this.fakelevel.Text == "149")
            {
                levelcu.level149();
            }
            if (this.fakelevel.Text == "150")
            {
                levelcu.level150();
            }
            if (this.fakelevel.Text == "151")
            {
                levelcu.level151();
            }
            if (this.fakelevel.Text == "152")
            {
                levelcu.level152();
            }
            if (this.fakelevel.Text == "153")
            {
                levelcu.level153();
            }
            if (this.fakelevel.Text == "154")
            {
                levelcu.level154();
            }
            if (this.fakelevel.Text == "155")
            {
                levelcu.level155();
            }
            if (this.fakelevel.Text == "156")
            {
                levelcu.level156();
            }
            if (this.fakelevel.Text == "157")
            {
                levelcu.level157();
            }
            if (this.fakelevel.Text == "158")
            {
                levelcu.level158();
            }
            if (this.fakelevel.Text == "159")
            {
                levelcu.level159();
            }
            if (this.fakelevel.Text == "160")
            {
                levelcu.level160();
            }
            if (this.fakelevel.Text == "161")
            {
                levelcu.level161();
            }
            if (this.fakelevel.Text == "162")
            {
                levelcu.level162();
            }
            if (this.fakelevel.Text == "163")
            {
                levelcu.level163();
            }
            if (this.fakelevel.Text == "164")
            {
                levelcu.level164();
            }
            if (this.fakelevel.Text == "165")
            {
                levelcu.level165();
            }
            if (this.fakelevel.Text == "166")
            {
                levelcu.level166();
            }
            if (this.fakelevel.Text == "167")
            {
                levelcu.level167();
            }
            if (this.fakelevel.Text == "168")
            {
                levelcu.level168();
            }
            if (this.fakelevel.Text == "169")
            {
                levelcu.level169();
            }
            if (this.fakelevel.Text == "170")
            {
                levelcu.level170();
            }
            if (this.fakelevel.Text == "171")
            {
                levelcu.level171();
            }
            if (this.fakelevel.Text == "172")
            {
                levelcu.level172();
            }
            if (this.fakelevel.Text == "173")
            {
                levelcu.level173();
            }
            if (this.fakelevel.Text == "174")
            {
                levelcu.level174();
            }
            if (this.fakelevel.Text == "175")
            {
                levelcu.level175();
            }
            if (this.fakelevel.Text == "176")
            {
                levelcu.level176();
            }
            if (this.fakelevel.Text == "177")
            {
                levelcu.level177();
            }
            if (this.fakelevel.Text == "178")
            {
                levelcu.level178();
            }
            if (this.fakelevel.Text == "179")
            {
                levelcu.level179();
            }
            if (this.fakelevel.Text == "180")
            {
                levelcu.level180();
            }
            if (this.fakelevel.Text == "181")
            {
                levelcu.level181();
            }
            if (this.fakelevel.Text == "182")
            {
                levelcu.level182();
            }
            if (this.fakelevel.Text == "183")
            {
                levelcu.level183();
            }
            if (this.fakelevel.Text == "184")
            {
                levelcu.level184();
            }
            if (this.fakelevel.Text == "185")
            {
                levelcu.level185();
            }
            if (this.fakelevel.Text == "186")
            {
                levelcu.level186();
            }
            if (this.fakelevel.Text == "187")
            {
                levelcu.level187();
            }
            if (this.fakelevel.Text == "188")
            {
                levelcu.level188();
            }
            if (this.fakelevel.Text == "189")
            {
                levelcu.level189();
            }
            if (this.fakelevel.Text == "190")
            {
                levelcu.level190();
            }
            if (this.fakelevel.Text == "191")
            {
                levelcu.level191();
            }
            if (this.fakelevel.Text == "192")
            {
                levelcu.level192();
            }
            if (this.fakelevel.Text == "193")
            {
                levelcu.level193();
            }
            if (this.fakelevel.Text == "194")
            {
                levelcu.level194();
            }
            if (this.fakelevel.Text == "195")
            {
                levelcu.level195();
            }
            if (this.fakelevel.Text == "196")
            {
                levelcu.level196();
            }
            if (this.fakelevel.Text == "197")
            {
                levelcu.level197();
            }
            if (this.fakelevel.Text == "198")
            {
                levelcu.level198();
            }
            if (this.fakelevel.Text == "199")
            {
                levelcu.level199();
            }
            if (this.fakelevel.Text == "200")
            {
                levelcu.level200();
            }
            if (this.fakelevel.Text == "201")
            {
                levelcu.level201();
            }
            if (this.fakelevel.Text == "202")
            {
                levelcu.level202();
            }
            if (this.fakelevel.Text == "203")
            {
                levelcu.level203();
            }
            if (this.fakelevel.Text == "204")
            {
                levelcu.level204();
            }
            if (this.fakelevel.Text == "205")
            {
                levelcu.level205();
            }
            if (this.fakelevel.Text == "206")
            {
                levelcu.level206();
            }
            if (this.fakelevel.Text == "207")
            {
                levelcu.level207();
            }
            if (this.fakelevel.Text == "208")
            {
                levelcu.level208();
            }
            if (this.fakelevel.Text == "209")
            {
                levelcu.level209();
            }
            if (this.fakelevel.Text == "210")
            {
                levelcu.level210();
            }
            if (this.fakelevel.Text == "211")
            {
                levelcu.level211();
            }
            if (this.fakelevel.Text == "212")
            {
                levelcu.level212();
            }
            if (this.fakelevel.Text == "213")
            {
                levelcu.level213();
            }
            if (this.fakelevel.Text == "214")
            {
                levelcu.level214();
            }
            if (this.fakelevel.Text == "215")
            {
                levelcu.level215();
            }
            if (this.fakelevel.Text == "216")
            {
                levelcu.level216();
            }
            if (this.fakelevel.Text == "217")
            {
                levelcu.level217();
            }
            if (this.fakelevel.Text == "218")
            {
                levelcu.level218();
            }
            if (this.fakelevel.Text == "219")
            {
                levelcu.level219();
            }
            if (this.fakelevel.Text == "220")
            {
                levelcu.level220();
            }
            if (this.fakelevel.Text == "221")
            {
                levelcu.level221();
            }
            if (this.fakelevel.Text == "222")
            {
                levelcu.level222();
            }
            if (this.fakelevel.Text == "223")
            {
                levelcu.level223();
            }
            if (this.fakelevel.Text == "224")
            {
                levelcu.level224();
            }
            if (this.fakelevel.Text == "225")
            {
                levelcu.level225();
            }
            if (this.fakelevel.Text == "226")
            {
                levelcu.level226();
            }
            if (this.fakelevel.Text == "227")
            {
                levelcu.level227();
            }
            if (this.fakelevel.Text == "228")
            {
                levelcu.level228();
            }
            if (this.fakelevel.Text == "229")
            {
                levelcu.level229();
            }
            if (this.fakelevel.Text == "230")
            {
                levelcu.level230();
            }
            if (this.fakelevel.Text == "231")
            {
                levelcu.level231();
            }
            if (this.fakelevel.Text == "232")
            {
                levelcu.level232();
            }
            if (this.fakelevel.Text == "233")
            {
                levelcu.level233();
            }
            if (this.fakelevel.Text == "234")
            {
                levelcu.level234();
            }
            if (this.fakelevel.Text == "235")
            {
                levelcu.level235();
            }
            if (this.fakelevel.Text == "236")
            {
                levelcu.level236();
            }
            if (this.fakelevel.Text == "237")
            {
                levelcu.level237();
            }
            if (this.fakelevel.Text == "238")
            {
                levelcu.level238();
            }
            if (this.fakelevel.Text == "239")
            {
                levelcu.level239();
            }
            if (this.fakelevel.Text == "240")
            {
                levelcu.level240();
            }
            if (this.fakelevel.Text == "241")
            {
                levelcu.level241();
            }
            if (this.fakelevel.Text == "242")
            {
                levelcu.level242();
            }
            if (this.fakelevel.Text == "243")
            {
                levelcu.level243();
            }
            if (this.fakelevel.Text == "244")
            {
                levelcu.level244();
            }
            if (this.fakelevel.Text == "245")
            {
                levelcu.level245();
            }
            if (this.fakelevel.Text == "246")
            {
                levelcu.level246();
            }
            if (this.fakelevel.Text == "247")
            {
                levelcu.level247();
            }
            if (this.fakelevel.Text == "248")
            {
                levelcu.level248();
            }
            if (this.fakelevel.Text == "249")
            {
                levelcu.level249();
            }
            if (this.fakelevel.Text == "250")
            {
                levelcu.level250();
            }
            if (this.fakelevel.Text == "251")
            {
                levelcu.level251();
            }
            if (this.fakelevel.Text == "252")
            {
                levelcu.level252();
            }
            if (this.fakelevel.Text == "253")
            {
                levelcu.level253();
            }
            if (this.fakelevel.Text == "254")
            {
                levelcu.level254();
            }
            if (this.fakelevel.Text == "255")
            {
                levelcu.level255();
            }
            if (this.fakelevel.Text == "256")
            {
                levelcu.level256();
            }
        }

        private void Timer3_Tick(object sender, EventArgs e)
        {
            PS3.Extension.WriteString(16377496U, this.textBox4.Text);
            PS3.Extension.WriteString(16377824U, this.textBox4.Text);
            PS3.Extension.WriteString(16378152U, this.textBox4.Text);
            PS3.Extension.WriteString(16378480U, this.textBox4.Text);
            PS3.Extension.WriteString(16378808U, this.textBox4.Text);
            PS3.Extension.WriteString(16379136U, this.textBox4.Text);
            PS3.Extension.WriteString(16379792U, this.textBox4.Text);
            PS3.Extension.WriteString(16379464U, this.textBox4.Text);
            PS3.Extension.WriteString(16380120U, this.textBox4.Text);
            PS3.Extension.WriteString(16380448U, this.textBox4.Text);
            PS3.Extension.WriteString(16380776U, this.textBox4.Text);
            PS3.Extension.WriteString(16381104U, this.textBox4.Text);
            PS3.Extension.WriteString(16381432U, this.textBox4.Text);
            PS3.Extension.WriteString(16381760U, this.textBox4.Text);
            PS3.Extension.WriteString(16382088U, this.textBox4.Text);
            PS3.Extension.WriteString(16382416U, this.textBox4.Text);
            PS3.Extension.WriteString(16382744U, this.textBox4.Text);
            PS3.Extension.WriteString(16383072U, this.textBox4.Text);
        }

        private void Button104_Click_1(object sender, EventArgs e)
        {
            string text = this.button104.Text;
            if (text == "rename ALL OFF")
            {
                this.button104.Text = "ON";
                timer5.Start();
                return;
            }
            if (!(text == "ON"))
            {
                timer5.Stop();
                return;
            }
            this.button104.Text = "rename ALL OFF";

        }
        //Die voids
        private static string GrabName()
        {
            string text = PS3.Extension.ReadString(NameOff);
            string result;
            if (text != string.Empty)
            {
                result = text;
            }
            else
            {
                result = "N/A";
            }
            return result;
        }

        // Token: 0x060001AB RID: 427 RVA: 0x00169ECC File Offset: 0x001680CC
        private static string GrabPres()
        {
            byte b = PS3.Extension.ReadByte(PresOff);
            string text = string.Format("{0}", b);
            string result;
            if (text != "")
            {
                result = text;
            }
            else
            {
                result = "Unprestiged";
            }
            return result;
        }

        // Token: 0x060001AC RID: 428 RVA: 0x00169F18 File Offset: 0x00168118
        private static string GrabRank()
        {
            byte b = PS3.Extension.ReadByte(RankOff);
            string text = string.Format("{0}", (int)(b + 1));
            string result;
            if (text != "1")
            {
                result = text;
            }
            else
            {
                result = "N/A";
            }
            return result;
        }

        // Token: 0x060001AD RID: 429 RVA: 0x00169F68 File Offset: 0x00168168
        private static string GrabClan()
        {
            string str = PS3.Extension.ReadString(ClanOff);
            string result;
            if (str != string.Empty)
            {
                result = "[" + str + "]";
            }
            else
            {
                result = "N/A";
            }
            return result;
        }

        // Token: 0x060001AE RID: 430 RVA: 0x00169FB4 File Offset: 0x001681B4
        private static string GrabIIP()
        {
            byte[] array = PS6.GetMemory(IIPOff, 4);
            string text = string.Format("{0}.{1}.{2}.{3}", new object[]
            {
                array[0],
                array[1],
                array[2],
                array[3]
            });
            string result;
            if (text != "0.0.0.0" && text != "77.161.10.83" && text != "108.215.135.39")
            {
                result = text;
            }
            else
            {
                result = "N/A";
            }
            return result;
        }

        // Token: 0x060001AF RID: 431 RVA: 0x0016A04C File Offset: 0x0016824C
        private static string GrabIP()
        {
            byte[] array = PS6.GetMemory(IPOff, 4);
            string text = string.Format("{0}.{1}.{2}.{3}", new object[]
            {
                array[0],
                array[1],
                array[2],
                array[3]
            });
            string result;
            if (text != "0.0.0.0" && text != "98.239.237.187" && text != "108.215.135.39")
            {
                result = text;
            }
            else
            {
                result = "N/A";
            }
            return result;
        }

        // Token: 0x060001B0 RID: 432 RVA: 0x0016A0E4 File Offset: 0x001682E4
        private static string GrabPort()
        {
            byte[] value = PS6.GetMemory(PortOff, 2);
            string text = Convert.ToString(BitConverter.ToUInt16(value, 0));
            string result;
            if (text != "0")
            {
                result = text;
            }
            else
            {
                result = "N/A";
            }
            return result;
        }
        private void Timer5_Tick(object sender, EventArgs e)
        {
            PS3.Extension.WriteString(16377496U, this.textBox9.Text);
            PS3.Extension.WriteString(16377824U, this.textBox9.Text);
            PS3.Extension.WriteString(16378152U, this.textBox9.Text);
            PS3.Extension.WriteString(16378480U, this.textBox9.Text);
            PS3.Extension.WriteString(16378808U, this.textBox9.Text);
            PS3.Extension.WriteString(16379136U, this.textBox9.Text);
            PS3.Extension.WriteString(16379792U, this.textBox9.Text);
            PS3.Extension.WriteString(16379464U, this.textBox9.Text);
            PS3.Extension.WriteString(16380120U, this.textBox9.Text);
            PS3.Extension.WriteString(16380448U, this.textBox9.Text);
            PS3.Extension.WriteString(16380776U, this.textBox9.Text);
            PS3.Extension.WriteString(16381104U, this.textBox9.Text);
            PS3.Extension.WriteString(16381432U, this.textBox9.Text);
            PS3.Extension.WriteString(16381760U, this.textBox9.Text);
            PS3.Extension.WriteString(16382088U, this.textBox9.Text);
            PS3.Extension.WriteString(16382416U, this.textBox9.Text);
            PS3.Extension.WriteString(16382744U, this.textBox9.Text);
            PS3.Extension.WriteString(16383072U, this.textBox9.Text);
        }
        public static string[] GrabClientInfoz(int c, int s)
        {
            string text = "";
            string text2 = "";
            string text3 = "";
            string text4 = "";
            string text5 = "";
            string text6 = "";
            string text7 = "";
            string text8 = "";
            string text9 = "";
            string text10 = "";
            string text11 = "";
            bool flag;
            if (flag = PS3.Extension.ReadBool(16415235u))
            {
                if (flag)
                {
                    BO2.RankOff = (uint)(16377663 + c * 328);
                    BO2.PresOff = (uint)(16377667 + c * 328);
                    BO2.ClanOff = (uint)(16377572 + c * 328);
                    BO2.NameOff = (uint)(16377496 + c * 328);
                    BO2.IPOff = (uint)(16377638 + c * 328);
                    BO2.IIPOff = (uint)(16377608 + c * 328);
                    BO2.PortOff = (uint)(16377642 + c * 328);
                }
            }
            else
            {
                BO2.RankOff = (uint)(16423495 + c * 328);
                BO2.PresOff = (uint)(16423499 + c * 328);
                BO2.ClanOff = (uint)(16423404 + c * 328);
                BO2.NameOff = (uint)(16423368 + c * 328);
                BO2.IPOff = (uint)(16423470 + c * 328);
                BO2.IIPOff = (uint)(16423440 + c * 328);
                BO2.PortOff = (uint)(16423474 + c * 328);
            }
            if (s != 0)
            {
                if (s == 1)
                {
                    text8 = BO2.GrabName();
                    text7 = BO2.GrabClan();
                    text5 = BO2.GrabRank();
                    text = BO2.GrabPres();
                    text2 = BO2.GrabIP();
                    text3 = BO2.GrabPort();
                    text11 = BO2.GrabIIP();
                }
            }
            else
            {
                text8 = BO2.GrabName();
                text7 = BO2.GrabClan();
                text5 = BO2.GrabRank();
                text = BO2.GrabPres();
                text2 = BO2.GrabIP();
                text3 = BO2.GrabPort();
                text11 = BO2.GrabIIP();
            }
            return string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}:{8}:{9}:{10}", new object[]
            {
                text8,
                text7,
                text5,
                text,
                text2,
                text3,
                text11,
                text4,
                text10,
                text9,
                text6
            }).Split(new string[]
            {
                ":"
            }, StringSplitOptions.None);
        }
        private void Button108_Click_1(object sender, EventArgs e)
        {
            this.InfoGrabber.Rows.Clear();
            if (this.InfoGrabber.RowCount == 1)
            {
                this.InfoGrabber.Rows.Add(17);
            }
            for (int i = 0; i < 18; i++)
            {
                string[] array = GrabClientInfoz(i, this.ctype);
                string value = array[0];
                string value2 = array[1];
                string value3 = array[2];
                string value4 = array[3];
                string value5 = array[4];
                string value6 = array[5];
                string value7 = array[6];
                this.InfoGrabber[0, Convert.ToInt32(i)].Value = value;
                this.InfoGrabber[1, Convert.ToInt32(i)].Value = value2;
                this.InfoGrabber[2, Convert.ToInt32(i)].Value = value3;
                this.InfoGrabber[3, Convert.ToInt32(i)].Value = value4;
                this.InfoGrabber[4, Convert.ToInt32(i)].Value = value5;
                this.InfoGrabber[5, Convert.ToInt32(i)].Value = value7;
                this.InfoGrabber[6, Convert.ToInt32(i)].Value = value6;
            }
        }

        private void Button107_Click_1(object sender, EventArgs e)
        {
            this.InfoGrabber.Rows.Clear();
        }

        private void TabPage8_Click(object sender, EventArgs e)
        {

        }

        private void Button106_Click_1(object sender, EventArgs e)
        {
            string host = this.IPInternal.Text;
            for (int port = 20; port < 21; port++)
                using (var tcp = new TcpClient())
                {
                    var ar = tcp.BeginConnect(host, port, null, null);
                    using (ar.AsyncWaitHandle)
                    {

                        if (ar.AsyncWaitHandle.WaitOne(2000, false))
                        {
                            try
                            {
                                this.IPInternal.Text = "Open";
                                MessageBox.Show("Open!", "Open!", MessageBoxButtons.OK, MessageBoxIcon.Information);

                            }
                            catch
                            {
                                this.IPInternal.Text = "Ports are Opne";
                                MessageBox.Show("Open!", "Open!", MessageBoxButtons.OK, MessageBoxIcon.Information);

                            }
                        }
                        else
                        {
                            this.IPInternal.Text = "Ports are Closed";
                            MessageBox.Show("Closed!", "Closed!", MessageBoxButtons.OK, MessageBoxIcon.Error);

                        }
                    }
                }
        }

        private void Button105_Click_1(object sender, EventArgs e)
        {
            string host = this.IPExternal.Text;
            for (int port = 20; port < 21; port++)
                using (var tcp = new TcpClient())
                {
                    var ar = tcp.BeginConnect(host, port, null, null);
                    using (ar.AsyncWaitHandle)
                    {

                        if (ar.AsyncWaitHandle.WaitOne(2000, false))
                        {
                            try
                            {
                                this.IPExternal.Text = "Ports are Open";
                                MessageBox.Show("Open! Connect To PS3 ;D");

                            }
                            catch
                            {
                                this.IPExternal.Text = "Ports are Opne";
                                MessageBox.Show("Open! Connect To PS3 ;D");

                            }
                        }
                        else
                        {
                            this.IPExternal.Text = "Ports are Closed";

                        }
                    }
                }
        }

        private void PresNum_ValueChanged(object sender, EventArgs e)
        {

        }

        private void PresCheck_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void Button268_Click(object sender, EventArgs e)
        {
            this.comboBox10.DroppedDown = true;
        }

        private void Button269_Click(object sender, EventArgs e)
        {
            this.comboBox12.DroppedDown = true;
        }

        private void Button8_Click_1(object sender, EventArgs e)
        {
            string DRNKDBO2 = "callvote map \"quit\n;statsetbyname RANKXP 0;statsetbyname PLEVEL 0;statsetbyname RANK 0;\"";
            BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
            Thread.Sleep(1000);
            BO2RPC.Call(0x313C18, 0, "disconnect\n");
        }

        private void ComboBox10_SelectedIndexChanged(object sender, EventArgs e)
        {
            {
                if (this.comboBox10.Text == "")
                {
                    MessageBox.Show("Choose first a Map", "Project Vortex");
                    return;
                }
                if (this.comboBox10.SelectedIndex == 0)
                {
                    string DRNKDBO2 = "callvote map \"mp_nuketown_2020;\"";
                    BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
                    Thread.Sleep(1000);
                    BO2RPC.Call(0x313C18, 0, "disconnect\n");
                }
                if (this.comboBox10.SelectedIndex == 1)
                {
                    string DRNKDBO2 = "callvote map \"mp_raid;\"";
                    BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
                    Thread.Sleep(1000);
                    BO2RPC.Call(0x313C18, 0, "disconnect\n");
                }
                if (this.comboBox10.SelectedIndex == 2)
                {
                    string DRNKDBO2 = "callvote map \"mp_hijacked;\"";
                    BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
                    Thread.Sleep(1000);
                    BO2RPC.Call(0x313C18, 0, "disconnect\n");
                }
                if (this.comboBox10.SelectedIndex == 3)
                {
                    string DRNKDBO2 = "callvote map \"mp_village;\"";
                    BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
                    Thread.Sleep(1000);
                    BO2RPC.Call(0x313C18, 0, "disconnect\n");
                }
                if (this.comboBox10.SelectedIndex == 4)
                {
                    string DRNKDBO2 = "callvote map \"mp_slums;\"";
                    BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
                    Thread.Sleep(1000);
                    BO2RPC.Call(0x313C18, 0, "disconnect\n");
                }
                if (this.comboBox10.SelectedIndex == 5)
                {
                    string DRNKDBO2 = "callvote map \"mp_express;\"";
                    BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
                    Thread.Sleep(1000);
                    BO2RPC.Call(0x313C18, 0, "disconnect\n");
                }
                if (this.comboBox10.SelectedIndex == 6)
                {
                    string DRNKDBO2 = "callvote map \" mp_carrier;\"";
                    BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
                    Thread.Sleep(1000);
                    BO2RPC.Call(0x313C18, 0, "disconnect\n");
                }
                if (this.comboBox10.SelectedIndex == 7)
                {
                    string DRNKDBO2 = "callvote map \"mp_dockside;\"";
                    BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
                    Thread.Sleep(1000);
                    BO2RPC.Call(0x313C18, 0, "disconnect\n");
                }
                if (this.comboBox10.SelectedIndex == 8)
                {
                    string DRNKDBO2 = "callvote map \"mp_drone;\"";
                    BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
                    Thread.Sleep(1000);
                    BO2RPC.Call(0x313C18, 0, "disconnect\n");
                }
                if (this.comboBox10.SelectedIndex == 9)
                {
                    string DRNKDBO2 = "callvote map \"mp_la;\"";
                    BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
                    Thread.Sleep(1000);
                    BO2RPC.Call(0x313C18, 0, "disconnect\n");
                }
                if (this.comboBox10.SelectedIndex == 10)
                {
                    string DRNKDBO2 = "callvote map \"mp_turbine;\"";
                    BO2RPC.Call(0x124C80, 0, DRNKDBO2.Replace(';', '\x0D'));
                    Thread.Sleep(1000);
                    BO2RPC.Call(0x313C18, 0, "disconnect\n");
                }
            }
        }

        private void ComboBox12_SelectedIndexChanged(object sender, EventArgs e)
        {
            {
                if (this.comboBox12.SelectedIndex == 0)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_crisis");
                    PS3.SetMemory(0x01C30ABD, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 1)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_villa");
                    PS3.SetMemory(0x01C30ABC, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 2)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_hanoi");
                    PS3.SetMemory(0x01C30ABC, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 3)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_mountain");
                    PS3.SetMemory(0x01C30ABF, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 4)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_cracked");
                    PS3.SetMemory(0x01C30ABE, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 5)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_duga");
                    PS3.SetMemory(0x01C30ABB, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 6)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_russianbase");
                    PS3.SetMemory(0x01C30AC2, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 7)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_cairo");
                    PS3.SetMemory(0x01C30ABC, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 8)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_havoc");
                    PS3.SetMemory(0x01C30ABC, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 9)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_cosmodrome");
                    PS3.SetMemory(0x01C30AC1, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 10)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_radiation");
                    PS3.SetMemory(0x01C30AC0, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 11)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_berlinwall");
                    PS3.SetMemory(0x01C30AC1, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 12)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_discovery");
                    PS3.SetMemory(0x01C30AC0, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 13)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "mp_nuked");
                    PS3.SetMemory(0x01C30ABC, new byte[] { 0x00 });
                }
                else if (this.comboBox12.SelectedIndex == 14)
                {
                    PS3.Extension.WriteString(0x1c30ab4, "zm_transit");
                }
            }
        }
        public uint ContainsSequence(byte[] toSearch, byte[] toFind, uint StartOffset, int bytes)
        {
            int num = 0;
            uint result;
            while (num + toFind.Length < toSearch.Length)
            {
                bool flag = true;
                for (int i = 0; i < toFind.Length; i++)
                {
                    if (toSearch[num + i] != toFind[i])
                    {
                        flag = false;
                        break;
                    }
                }
                if (flag)
                {
                    this.NumberOffsets++;
                    int num2 = (int)(StartOffset + (uint)num);
                    result = (uint)num2;
                    return result;
                }
                num += bytes;
            }
            result = 0u;
            return result;
        }
        private ulong Search(byte[] Search, uint Start, int Length, int bytes)
        {
            byte[] toSearch = PS3.Extension.ReadBytes(Start, Length);
            uint num = this.ContainsSequence(toSearch, Search, Start, bytes);
            ulong result;
            if (num.Equals(this.ZeroOffset))
            {
                result = 0uL;
            }
            else
            {
                int num2 = 0;
                for (int i = 0; i < Search.Length; i++)
                {
                    int num3 = (int)Search[i];
                    if (num3 == 1)
                    {
                        num2++;
                    }
                }
                uint num4 = num + (uint)num2;
                result = (ulong)num4;
            }
            return result;
        }
        private ulong SpoofIPAddr = 0uL;
        public uint ZeroOffset;
        public int NumberOffsets = 0;
        private string externalIp;
        private void Button111_Click_1(object sender, EventArgs e)
        {
            this.SpoofIPAddr = this.Search(PS3.Extension.ReadBytes(16423470u, 4), 27423972u, 2097152, 4);
            if (this.SpoofIPAddr != 0uL)
            {
                MessageBox.Show("IP Found");
                this.label74.Text = wb.DownloadString("https://api.ipify.org");
            }
            else
            {
                MessageBox.Show("Error");
            }
        }
        public static byte[] GrabIP(string ip)
        {
            string[] array = ip.Split(new char[]
            {
                '.'
            });
            return new byte[]
            {
                Convert.ToByte(array[0]),
                Convert.ToByte(array[1]),
                Convert.ToByte(array[2]),
                Convert.ToByte(array[3])
            };
        }
        private void Button112_Click_1(object sender, EventArgs e)
        {
            UTF8Encoding uTF8Encoding = new UTF8Encoding();
            string @string = uTF8Encoding.GetString(wb.DownloadData("https://api.ipify.org"));
            PS3.SetMemory(Convert.ToUInt32(this.SpoofIPAddr), BO2.GrabIP(this.SpoofIPText.Text));
            this.label9.Text = this.SpoofIPText.Text;
            MessageBox.Show(string.Concat(new string[]
            {
                    "Successfully Spoofed Your IP Address From (",
                    @string,
                    ") To (",
                    this.SpoofIPText.Text,
                    ")\nYou Will Need To Go Back To The Main Menu For The Spoofed IP Address To Set"
            }));
        }

        private void Button113_Click(object sender, EventArgs e)
        {
            if (button113.Text == "Anti Ban OFF")
            {
                PS3.SetMemory(0x50CA9F, new byte[] { 0x99 });
                PS3.SetMemory(0x4BAA20, new byte[] { 0x48, 0x00, });
                PS3.SetMemory(0x50DD2C, new byte[] { 0x48, 0x00, });
                PS3.SetMemory(0x50CACC, new byte[] { 0x48, 0x80, });
                PS3.SetMemory(0x50E184, new byte[] { 0x60, 0x00, 0x00, 0x00 });
                PS3.SetMemory(0x54A4E4, new byte[] { 0x60, 0x00, 0x00, 0x00 });
                PS3.SetMemory(0x54A858, new byte[] { 0x60, 0x00, 0x00, 0x00 });
                PS3.SetMemory(0x5327F8, new byte[] { 0x60, 0x00, 0x00, 0x00 });
                PS3.SetMemory(0x532804, new byte[] { 0x60, 0x00, 0x00, 0x00 });
                PS3.SetMemory(0x52FE74, new byte[] { 0x41, 0x80 });
                PS3.Extension.WriteUInt32(0x3DBD54, 0x480000D8);
                PS3.SetMemory(0x003DC634, new byte[] { 0x60, 0x00, 0x00, 0x00 }); //DisableRSAProtection
                PS3.SetMemory(0x003DC634, new byte[] { 0x48, 0x00, 0x00, 0xD8 });
                button113.Text = "Anti Ban ON";
            }
            else if (button113.Text == "Anti Ban ON")
            {
                PS3.SetMemory(0x50CA9F, new byte[] { 0x99 });
                PS3.SetMemory(0x4BAA20, new byte[] { 0x48, 0x00, });
                PS3.SetMemory(0x50DD2C, new byte[] { 0x48, 0x00, });
                PS3.SetMemory(0x50CACC, new byte[] { 0x48, 0x80, });
                PS3.SetMemory(0x50E184, new byte[] { 0x60, 0x00, 0x00, 0x00 });
                PS3.SetMemory(0x54A4E4, new byte[] { 0x60, 0x00, 0x00, 0x00 });
                PS3.SetMemory(0x54A858, new byte[] { 0x60, 0x00, 0x00, 0x00 });
                PS3.SetMemory(0x5327F8, new byte[] { 0x60, 0x00, 0x00, 0x00 });
                PS3.SetMemory(0x532804, new byte[] { 0x60, 0x00, 0x00, 0x00 });
                PS3.SetMemory(0x52FE74, new byte[] { 0x41, 0x82 });
                PS3.SetMemory(0x003DC634, new byte[] { 0x88, 0x63, 0x00, 0x18 }); //DisableRSAProtection
                PS3.SetMemory(0x003DC634, new byte[] { 0x60, 0x7C, 0x00, 0x00 });
                button113.Text = "Anti Ban OFF";
            }
        }


        private void Button114_Click(object sender, EventArgs e)
        {

        }


        private void AimBot_Tick(object sender, EventArgs e)
        {

        }

        private void Panel8_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                BO2.newpoint = Control.MousePosition;
                BO2.newpoint.X -= BO2.x;
                BO2.newpoint.Y -= BO2.y;
                base.Location = BO2.newpoint;
            }
        }

        private void Panel8_MouseDown(object sender, MouseEventArgs e)
        {
            BO2.x = Control.MousePosition.X - base.Location.X;
            BO2.y = Control.MousePosition.Y - base.Location.Y;
        }

        private void GroupBox14_Enter(object sender, EventArgs e)
        {

        }

        private void Button156_Click(object sender, EventArgs e)
        {
            fakelevel.DroppedDown = true;
        }

        private void Button411_Click(object sender, EventArgs e)
        {
            Customgameicon.DroppedDown = true;
        }

        private void Button14_Click_1(object sender, EventArgs e)
        {

        }

        private void Button116_Click(object sender, EventArgs e)
        {

        }

        private void Button115_Click(object sender, EventArgs e)
        {
            PS3.ChangeAPI(SelectAPI.PS3Manager);
            if (!PS3M_API.AttachProcess(PS3M_API.Process.Processes_Pid[this.comboBox8.SelectedIndex]))
            {
                MessageBox.Show("Impossible to attach :(", "Error.", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                PS3M_API.DisconnectTarget();
            }
            PS3M_API.PS3.Notify("Successfully Attached");
            label22.Text = PS3.CCAPI.GetTemperatureCELL();
            label23.Text = PS3.CCAPI.GetTemperatureRSX();
            label24.Text = PS3.CCAPI.GetFirmwareVersion();
            label25.Text = PS3.CCAPI.GetFirmwareType();
            PS6.Attach();
            label3.Text = "Connected + Attached!";
            label3.ForeColor = Color.Green;
            this.PSNGamertag.Text = Lib.ReadString(40633944);
            PSNGamertag.ForeColor = Color.Green;
            Notify("^2USER: " + PSNGamertag.Text, " ^1Authorized!", "menu_mp_lobby_spets");
            label27.Text = "Ready to Mod";
            pictureBox1.Visible = true;
            this.AntiLVL();
            this.AntiFreeze();
            this.Hear();
            label16.Text = "99%";
            label16.ForeColor = Color.Yellow;
            MessageBox.Show("Connected and Attched! 99% Anti Freeze: Enabled!", "Succesfully", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        private void Button114_Click_1(object sender, EventArgs e)
        {

        }
        public string GetName(int ClientNum)
        {
            byte[] array = new byte[20];
            PS3.GetMemory((uint)(24667244 + 22536 * ClientNum), array);
            string @string = Encoding.ASCII.GetString(array);
            return @string.Replace("\0", "");
        }

        private void Button160_Click(object sender, EventArgs e)
        {
            this.dataGridView1.Enabled = true;
            this.dataGridView1.RowCount = 18;
            for (int i = 0; i < 18; i++)
            {
                this.dataGridView1.Update();
                this.dataGridView1.Rows[i].Cells[0].Value = i;
                this.dataGridView1.Rows[i].Cells[1].Value = GetName(i);
            }
        }

        private void EnableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                5
            };
            PS3.SetMemory((uint)(24645443 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "GodMode:^2Enabled");
        }

        private void DisableToolStripMenuItem_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                8
            };
            PS3.SetMemory((uint)(24645443 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "GodMode:^1Disabled");
        }

        private void EnableToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                255,
                255
            };
            PS3.SetMemory((uint)(24646493 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646497 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646501 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646489 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646557 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646549 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646545 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646541 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "UnlimitedAmmo:^2Enabled");
        }

        private void DisableToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                0,
                100
            };
            PS3.SetMemory((uint)(24646493 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646497 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646501 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646489 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646557 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646549 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646545 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646541 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "UnlimitedAmmo:^1Disabled");
        }

        private void KillHimToolStripMenuItem_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
        {
                70
        };
            PS3.SetMemory((uint)(24645464 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "^1BitchYouHaveBeenKilled!");
        }

        private void EnableToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                15
            };
            PS3.SetMemory((uint)(24667927 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "VSAT:^2Enabled");
        }

        private void DisableToolStripMenuItem2_Click(object sender, EventArgs e)
        {
            byte[] array = new byte[1];
            byte[] buffer = array;
            PS3.SetMemory((uint)(24667927 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "VSAT:^1Disabled");
        }

        private void EnableToolStripMenuItem3_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
        {
                64
        };
            PS3.SetMemory((uint)(24667160 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "SPEED2X:^2Enabled");
        }

        private void DisableToolStripMenuItem3_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                63
            };
            PS3.SetMemory((uint)(24667160 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "SPEED2X:^1Disabled");
        }

        private void EnableToolStripMenuItem4_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                1
            };
            PS3.SetMemory((uint)(24646791 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646783 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646779 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "UnlimitedScoreStreaks:^2Enabled");
        }

        private void DisableToolStripMenuItem4_Click(object sender, EventArgs e)
        {
            byte[] array = new byte[1];
            byte[] buffer = array;
            PS3.SetMemory((uint)(24646791 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646783 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            PS3.SetMemory((uint)(24646779 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "UnlimitedScoreStreaks:^1Disabled");
        }

        private void GiveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "O " + "^5YourPS3WillBeFreezeIn5Seconds");
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "^5YourPS3WillBeFreezeIn5Seconds");
            Thread.Sleep(1000);
            BO2RPC.SV_GameSendServerCommand(this.dataGridView1.CurrentRow.Index, "^ 6 70 90");
        }

        private void EnableToolStripMenuItem5_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                240
            };
            PS3.SetMemory((uint)(24632887 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "SkateMode:^2Enabled");
        }

        private void DisableToolStripMenuItem5_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                34
            };
            PS3.SetMemory((uint)(24632887 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "SkateMode:^1Disabled");
        }

        private void EnabledToolStripMenuItem_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                1
            };
            PS3.SetMemory((uint)(24667928 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "AutoProne:^2Enabled");
        }

        private void DisabledToolStripMenuItem_Click(object sender, EventArgs e)
        {
            byte[] array = new byte[1];
            byte[] buffer = array;
            PS3.SetMemory((uint)(24667928 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "AutoProne:^1Disabled");
        }

        private void EnableToolStripMenuItem6_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                15
            };
            PS3.SetMemory((uint)(24667583 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "^1YouHaveBeenFrozen");
        }

        private void DisableToolStripMenuItem6_Click(object sender, EventArgs e)
        {
            byte[] array = new byte[1];
            byte[] buffer = array;
            PS3.SetMemory((uint)(24667583 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "^2YouHaveBeenUnfrozen");
        }

        private void EnableToolStripMenuItem7_Click(object sender, EventArgs e)
        {
            byte[] array = new byte[1];
            byte[] buffer = array;
            PS3.SetMemory((uint)(24666979 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "^1LooksLikeYouInternetIsBad");
        }

        private void DisableToolStripMenuItem7_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                2
            };
            PS3.SetMemory((uint)(24666979 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "^2100KInternetGiven");
        }

        private void KickHimOutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            BO2RPC.SV_GameSendServerCommand(this.dataGridView1.CurrentRow.Index, " ^5GTFO");
        }

        private void EnableToolStripMenuItem8_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255
            };
            PS3.SetMemory((uint)(24646768 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "AllPerks:^2Enabled");
        }

        private void DisableToolStripMenuItem8_Click(object sender, EventArgs e)
        {

            byte[] buffer = new byte[]
            {
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            };
            PS3.SetMemory((uint)(24646768 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "AllPerks:^1Disabled");
        }

        private void DisabledToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            byte[] array = new byte[1];
            byte[] buffer = array;
            PS3.SetMemory((uint)(24645669 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "Invisible:^1Disabled");
        }

        private void EnabledToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            byte[] buffer = new byte[]
            {
                1
            };
            PS3.SetMemory((uint)(24645669 + this.dataGridView1.CurrentRow.Index * 22536), buffer);
            BO2RPC.Call(0x0349F6C, this.dataGridView1.CurrentRow.Index, 1, "1 " + "Invisible:^2Enabled");
        }

        private void button161_Click(object sender, EventArgs e)
        {
            BO2RPC.CBuf_Addtext("StatSetByName PLEVEL 5");
        }

        private void HenRadio_CheckedChanged(object sender, EventArgs e)
        {
            if (HenRadio.Checked == true)
            {
                label28.Text = "Hen";
                label28.ForeColor = Color.Green;
            }
            else
            {
                label28.Text = "N/A";
                label28.ForeColor = Color.Red;
            }

        }

        private void button428_Click(object sender, EventArgs e)
        {
            SkyCom.DroppedDown = true;
        }

        private void button14_Click_2(object sender, EventArgs e)
        {
            if (HenRadio.Checked == true)
            {
                PS3.ChangeAPI(SelectAPI.PS3Manager);
                if (!PS3M_API.AttachProcess(PS3M_API.Process.Processes_Pid[this.comboBox8.SelectedIndex]))
                {
                    MessageBox.Show("Impossible to attach :(", "Error.", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    PS3M_API.DisconnectTarget();
                }
                PS3M_API.PS3.Notify("Successfully Attached");
                PS6.Attach();
                label3.Text = "Connected + Attached!";
                label3.ForeColor = Color.Green;
                this.PSNGamertag.Text = PS3.Extension.ReadString(40633944);
                PSNGamertag.ForeColor = Color.Green;
                label27.Text = "Ready to Mod";
                pictureBox1.Visible = true;
                this.AntiLVL();
                this.AntiFreeze();
                this.Hear();
                label16.Text = "99%";
                label16.ForeColor = Color.Yellow;
                Notify("^2USER: " + PSNGamertag.Text, " ^1Authorized!", "menu_mp_lobby_spets");
                MessageBox.Show("Attched", "Succes", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

            else
            {
                label20.Text = "Attaching..";
                if (PS3.AttachProcess())
                {
                    PS6.Attach();
                    label3.Text = "Connected + Attached!";
                    label3.ForeColor = Color.Green;
                    this.PSNGamertag.Text = Lib.ReadString(40633944);
                    PSNGamertag.ForeColor = Color.Green;
                    Funcs.ModdedList.ChangeString(true);
                    Notify("^2USER: " + PSNGamertag.Text, " ^1Authorized!", "menu_mp_lobby_spets");
                    Notify("^1Vortex RTM", "^2Injected! ", "rank_prestige09");
                    label27.Text = "Ready to Mod";
                    this.AntiLVL();
                    this.AntiFreeze();
                    this.Hear();
                    label16.Text = "99%";
                    label16.ForeColor = Color.Yellow;
                    MessageBox.Show("Connected and Attched! 99% Anti Freeze: Enabled!", "Succesfully", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show("Attaching failed!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void timer6_Tick(object sender, EventArgs e)
        {

        }

        private void HenCOnHelper_Tick(object sender, EventArgs e)
        {
            if (HenRadio.Checked == true)
            {
                PS3.ChangeAPI(SelectAPI.PS3Manager);
                if (!PS3M_API.AttachProcess(PS3M_API.Process.Processes_Pid[this.comboBox8.SelectedIndex]))
                {
                    MessageBox.Show("Impossible to attach :(", "Error.", MessageBoxButtons.OK, MessageBoxIcon.Hand);
                    PS3M_API.DisconnectTarget();
                }

                PS3M_API.PS3.Notify("Successfully Attached");
                label22.Text = PS3.CCAPI.GetTemperatureCELL();
                label23.Text = PS3.CCAPI.GetTemperatureRSX();
                label24.Text = PS3.CCAPI.GetFirmwareVersion();
                label25.Text = PS3.CCAPI.GetFirmwareType();
                PS6.Attach();
                label3.Text = "Connected + Attached!";
                label3.ForeColor = Color.Green;
                this.PSNGamertag.Text = Lib.ReadString(40633944);
                PSNGamertag.ForeColor = Color.Green;

                label27.Text = "Ready to Mod";
                pictureBox1.Visible = true;
                this.AntiLVL();
                this.AntiFreeze();
                this.Hear();
                label16.Text = "99%";
                label16.ForeColor = Color.Yellow;
                Notify("^2USER: " + PSNGamertag.Text, " ^1Authorized!", "menu_mp_lobby_spets");

                MessageBox.Show("Connected and Attched! 99% Anti Freeze: Enabled!", "Succesfully", MessageBoxButtons.OK, MessageBoxIcon.Information);
                HenCOnHelper.Stop();

            }

            else
            {
                label20.Text = "Attaching..";
                if (PS3.AttachProcess())
                {
                    PS6.Attach();
                    label3.Text = "Connected + Attached!";
                    label3.ForeColor = Color.Green;
                    this.PSNGamertag.Text = Lib.ReadString(40633944);
                    PSNGamertag.ForeColor = Color.Green;
                    Funcs.ModdedList.ChangeString(true);
                    Notify("^2USER: " + PSNGamertag.Text, " ^1Authorized!", "menu_mp_lobby_spets");
                    Notify("^1Vortex RTM", "^2Injected! ", "rank_prestige09");
                    label27.Text = "Ready to Mod";
                    this.AntiLVL();
                    this.AntiFreeze();
                    this.Hear();
                    label16.Text = "99%";
                    label16.ForeColor = Color.Yellow;
                    HenCOnHelper.Stop();
                    MessageBox.Show("Connected and Attched! 99% Anti Freeze: Enabled!", "Succesfully", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show("Attaching failed!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void button35_MouseEnter(object sender, EventArgs e)
        {
            button35.BackColor = Color.White;
            button35.ForeColor = Color.Black;
        }

        private void button35_MouseLeave(object sender, EventArgs e)
        {
            button35.BackColor = Color.FromArgb(35, 35, 35);
            button35.ForeColor = Color.White;
        }

        private void button36_MouseEnter(object sender, EventArgs e)
        {
            button36.BackColor = Color.White;
            button36.ForeColor = Color.Black;
        }

        private void button36_MouseMove(object sender, MouseEventArgs e)
        {

        }

        private void button36_MouseLeave(object sender, EventArgs e)
        {
            button36.BackColor = Color.FromArgb(35, 35, 35);
            button36.ForeColor = Color.White;
        }

        private void button89_Click(object sender, EventArgs e)
        {
            comboBox1.DroppedDown = true;
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }
        public void ChangeClantag(string InputText)
        {
            byte[] bytes = (Encoding.ASCII.GetBytes(InputText + "\0"));
            PS3.SetMemory(Variables.Clantag, bytes);
        }
        private void comboBox1_SelectedIndexChanged_1(object sender, EventArgs e)
        {
            if (comboBox1.Text == "PS3")
            {
                ChangeClantag("PS3");
            }
            else if (comboBox1.Text == "PS4")
            {
                ChangeClantag("PS4");
            }
            else if (comboBox1.Text == "MoDz")
            {
                ChangeClantag("MoDz");
            }
            else if (comboBox1.Text == "<3")
            {
                ChangeClantag("<3");
            }
            else if (comboBox1.Text == "RTM")
            {
                ChangeClantag("^5RTM");
            }
            else if (comboBox1.Text == "Ua")
            {
                ChangeClantag("^2Ua");
            }
            else if (comboBox1.Text == "BO2")
            {
                ChangeClantag("BO2");
            }
            else if (comboBox1.Text == "BOII")
            {
                ChangeClantag("BOII");
            }
            else if (comboBox1.Text == "BO3")
            {
                ChangeClantag("BO3");
            }
            else if (comboBox1.Text == "iMP")
            {
                ChangeClantag("iMP");
            }
            else if (comboBox1.Text == "Faze")
            {
                ChangeClantag("Faze");
            }
            else if (comboBox1.Text == "CheckBox")
            {
                ChangeClantag("^Hac");
            }
            else if (comboBox1.Text == "Modded")
            {
                int flashColor = (new Random().Next(0, 7));
                ChangeClantag("{^" + flashColor + "}");
            }
        }

        private void button89_Click_1(object sender, EventArgs e)
        {
            comboBox1.DroppedDown = true;
        }

        private void comboBox6_SelectedIndexChanged(object sender, EventArgs e)
        {

        }
    }
}

    





